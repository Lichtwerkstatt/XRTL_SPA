{"version":3,"sources":["components/Webcam.js","index.js"],"names":["Webcam","jwt","require","payload","sub","component","iat","Date","now","exp","token","sign","io","useState","peerConnections","setPeerConnections","videoRef","useRef","useEffect","a","socket","connect","auth","autoConnect","contraints","audio","video","facingMode","width","height","config","iceServers","urls","navigator","mediaDevices","getUserMedia","stream","connected","document","getElementById","style","background","viewer","viewerId","peerConnection","RTCPeerConnection","srcObject","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","emit","id","data","createOffer","then","sdp","setLocalDescription","localDescription","answer","setRemoteDescription","e","console","error","addIceCandidate","RTCIceCandidate","disconnect","on","removeAllListeners","webcamEmit","autoPlay","playsInline","ref","ReactDOM","render"],"mappings":"kcAyGeA,EAjGA,WACX,IAAIC,EAAMC,EAAQ,KACdC,EAAU,CACVC,IAAK,SACLC,UAAW,YACXC,IAAKC,KAAKC,MACVC,IAAKF,KAAKC,MAAQ,MAElBE,EAAQT,EAAIU,KAAKR,EAAS,aACxBS,EAAKV,EAAQ,KATF,EAW6BW,mBAAS,IAXtC,mBAWVC,EAXU,KAWOC,EAXP,KAYXC,EAAWC,mBA+EjB,OA7EAC,qBAAU,YACU,uCAAG,0CAAAC,EAAA,6DACTC,EAASR,EAAGS,QAAQ,wBAAyB,CAAEC,KAAM,CAAEZ,MAAOA,GAASa,aAAa,IACpFC,EAAa,CAAEC,OAAO,EAAOC,MAAO,CAAEC,WAAY,OAAQC,MAAO,IAAKC,OAAQ,MAC9EC,EAAS,CAAEC,WAAY,CAAC,CAAEC,KAAM,CAAC,mCAHxB,SAIMC,UAAUC,aAAaC,aAAaX,GAJ1C,cAITY,EAJS,OAMZhB,EAAOiB,UACNC,SAASC,eAAe,cAAcC,MAAMC,WAAa,UAEzDH,SAASC,eAAe,cAAcC,MAAMC,WAAa,UAGvDC,EAAS,SAACC,GACZ,IAAMC,EAAiB,IAAIC,kBAAkBf,GAC7ChB,EAAgB6B,GAAYC,EAE5B7B,EAAmBD,EAAgB6B,GAAYC,GAC/C,IAAIR,EAASE,SAASC,eAAe,SAASO,UAE9CV,EACKW,YACAC,SAAQ,SAAAC,GAAK,OAAIL,EAAeM,SAASD,EAAOb,MAErDQ,EAAeO,eAAiB,SAACC,GACzBA,EAAMC,WACNjC,EAAOkC,KAAK,YAAa,CAAEC,GAAIZ,EAAUa,KAAMJ,EAAMC,aAI7DT,EACKa,cACAC,MAAK,SAACC,GAAD,OAASf,EAAegB,oBAAoBD,MACjDD,MAAK,WACFtC,EAAOkC,KAAK,QAAS,CAAEC,GAAIZ,EAAUa,KAAMZ,EAAeiB,uBAIhEC,EAAS,SAAC3D,GACZ,IAAMW,EAAgBX,EAAQoD,IAAIQ,qBAAqB5D,EAAQqD,MAC/D,MAAOQ,GACHC,QAAQC,MAAM,8CAIhBb,EAAY,SAAClD,GACfW,EAAgBX,EAAQoD,IAAIY,gBAAgB,IAAIC,gBAAgBjE,EAAQqD,QAGtEa,EAAa,SAACd,UACTzC,EAAgByC,IAG3BjB,SAASC,eAAe,SAASO,UAAYV,EAE7ChB,EAAOkC,KAAK,mBAAoB,SAEhClC,EAAOkD,GAAG,SAAU5B,GAEpBtB,EAAOkD,GAAG,SAAUR,GAEpB1C,EAAOkD,GAAG,YAAajB,GAEvBjC,EAAOkD,GAAG,4BAA6BD,GA9DxB,mBAgER,WACHjD,EAAOmD,mBAAmB,SAAU7B,GACpCtB,EAAOmD,mBAAmB,SAAUT,GACpC1C,EAAOmD,mBAAmB,YAAalB,GACvCjC,EAAOmD,mBAAmB,4BAA6BF,MApE5C,4CAAH,qDAwEhBG,KAED,IAGC,qBAAKjB,GAAG,aAAR,SACI,uBAAOA,GAAG,QAAQkB,UAAQ,EAACC,aAAW,EAACC,IAAK3D,O,OChGxD4D,IAASC,OACP,mCACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,W","file":"static/js/main.e05a5819.chunk.js","sourcesContent":["//TODO: \r\n//* wenn Viewer Fenster schließt oder disconnected, dann überprüfen, ob noch jemand in dem Raum ist (wenn nicht Strema beenden)\r\n//* wenn kein Stream verfügbar Bild oder text einblenden\r\n//* Stream unabhängig machne --> uf raspberry\r\n//* testen, ob das auf Raspberry funktioniert\r\n//* \r\nimport React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst Webcam = () => {\r\n    var jwt = require('jsonwebtoken');\r\n    var payload = {\r\n        sub: 'webcam',\r\n        component: 'component',\r\n        iat: Date.now(),\r\n        exp: Date.now() + 1800000,\r\n    }\r\n    var token = jwt.sign(payload, \"keysecret\");\r\n    const io = require(\"socket.io-client\");\r\n\r\n    const [peerConnections, setPeerConnections] = useState({});\r\n    const videoRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const webcamEmit = async () => {\r\n            const socket = io.connect(\"http://localhost:3000\", { auth: { token: token }, autoConnect: true }); //http://10.232.37.40:3000\r\n            const contraints = { audio: false, video: { facingMode: \"user\", width: 640, height: 480 }, };\r\n            const config = { iceServers: [{ urls: [\"stun:stun.l.google.com:19302\"] }] }\r\n            const stream = await navigator.mediaDevices.getUserMedia(contraints);\r\n\r\n            if(socket.connected){\r\n                document.getElementById('background').style.background = '#b6d7a8'\r\n            }else{\r\n                document.getElementById('background').style.background = '#ea9999'\r\n            }\r\n\r\n            const viewer = (viewerId) => {\r\n                const peerConnection = new RTCPeerConnection(config);\r\n                peerConnections[viewerId] = peerConnection;\r\n\r\n                setPeerConnections(peerConnections[viewerId] = peerConnection);\r\n                let stream = document.getElementById(\"video\").srcObject;\r\n\r\n                stream\r\n                    .getTracks()\r\n                    .forEach(track => peerConnection.addTrack(track, stream));\r\n\r\n                peerConnection.onicecandidate = (event) => {\r\n                    if (event.candidate) {\r\n                        socket.emit('candidate', { id: viewerId, data: event.candidate });\r\n                    }\r\n                }\r\n\r\n                peerConnection\r\n                    .createOffer()\r\n                    .then((sdp) => peerConnection.setLocalDescription(sdp))\r\n                    .then(() => {\r\n                        socket.emit('offer', { id: viewerId, data: peerConnection.localDescription })\r\n                    });\r\n            }\r\n\r\n            const answer = (payload) => {\r\n                try { peerConnections[payload.id].setRemoteDescription(payload.data); }\r\n                catch (e) {\r\n                    console.error(\"Remote answer is in stable state stable!\")\r\n                }\r\n            }\r\n\r\n            const candidate = (payload) => {\r\n                peerConnections[payload.id].addIceCandidate(new RTCIceCandidate(payload.data))\r\n            }\r\n\r\n            const disconnect = (id) => {\r\n                delete peerConnections[id]\r\n            }\r\n\r\n            document.getElementById(\"video\").srcObject = stream;\r\n\r\n            socket.emit('broadcaster join', 'Cam_1')\r\n\r\n            socket.on('viewer', viewer)\r\n\r\n            socket.on('answer', answer);\r\n\r\n            socket.on('candidate', candidate)\r\n\r\n            socket.on('disconnect peerConnection', disconnect)\r\n\r\n            return () => {\r\n                socket.removeAllListeners('viewer', viewer)\r\n                socket.removeAllListeners('answer', answer)\r\n                socket.removeAllListeners('candidate', candidate)\r\n                socket.removeAllListeners('disconnect peerConnection', disconnect)\r\n            }\r\n        }\r\n\r\n        webcamEmit() //function call\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div id='background' >\r\n            <video id='video' autoPlay playsInline ref={videoRef}></video>\r\n        </div>\r\n    );\r\n};\r\nexport default Webcam;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Cam from \"./components//Webcam\"\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(\r\n  <>\r\n    <Cam />\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}