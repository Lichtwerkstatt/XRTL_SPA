{"version":3,"sources":["components/Console/CSS/Console.module.css","components/UI/CSS/Settings.module.css","components/UI/CSS/RotaryCtrl.module.css","components/UI/CSS/NavBar.module.css","components/Login/CSS/Login.module.css","App.js","services/SocketContext.js","components/experiment/ComponentDescription/CSS/Description.module.css","components/windows/CSS/InfoWindowContent.module.css","services/AppContext.js","components/UI/experimentUI/NavBar.js","components/Console/Console.js","components/Login/Login.js","components/Chat/Chat.js","components/UI/templates/RadioButton.js","components/UI/templates/Switch.js","components/UI/CtrlUnits/MultiCtrl.js","components/experiment/ComponentDescription/LegalNotice.js","components/experiment/ComponentDescription/DescriptionHandler.js","components/UI/experimentUI/Window.js","components/assembly/MultiComponentSelection.js","components/UI/templates/ESPCam.js","components/UI/templates/Slider.js","components/UI/templates/Select.js","components/UI/CtrlUnits/ESPCamPlusSettings.js","components/assembly/ESPCamStream.js","components/UI/templates/HeaterSettings.js","components/UI/CtrlUnits/HeaterCtrl.js","components/assembly/Heater.js","components/UI/CtrlUnits/RotaryCtrl.js","components/assembly/media/rotary_outline.png","components/assembly/Rotary.js","components/assembly/media/PS_outline.png","components/UI/CtrlUnits/LaserCtrl.js","components/assembly/Laser.js","components/assembly/media/km100_outline.png","components/assembly/KM100.js","components/assembly/media/linear_outline.png","components/assembly/SM1ZP.js","components/experiment/MichelsonInterferometer/MichelsonInterferometer.js","components/UI/CtrlUnits/ESPCamWithoutSettings.js","components/windows/OverviewCamWindow.js","components/media/images/xrtl_team.png","components/windows/Content/InfoWindowContent.js","components/windows/InfoWindow.js","components/UI/experimentUI/ExperimentUILayer.js","components/UI/experimentUI/DescriptiveTag.js","components/experiment/MichelsonInterferometer/MI_230201.js","components/UI/experimentUI/VirtualLayer.js","index.js","components/UI/templates/Theme.js","components/UI/CSS/HeaterCtrl.module.css","components/UI/CSS/Window.module.css","services/PopUpContext.js","components/Chat/CSS/Chat.module.css"],"names":["module","exports","App","process","title","jwt","require","manager","Manager","autoConnect","socket","SocketContext","createContext","useSocketContext","useContext","SocketContextProvider","children","useState","fontColor","setFontColor","connected","setConnected","username","setUsername","URL","setURL","appCtx","useAppContext","useEffect","connect","e","addLog","setSocket","disconnect","on","removeAllListeners","setNewURL","newURL","Provider","value","toggleConnection","key","close","payload","sub","token","sign","header","kid","auth","emit","AppContext","React","AppContextProvider","underConstruction","setUnderConstruction","Set","roomComponent","setRoomComponent","showVirtualLayer","setShowVirtualLayer","selectedComps","setSelectedComps","showInfoWindow","setShowInfoWindow","autoRotate","setAutoRotate","showLogin","setShowLogin","showBeam","setShowBeam","showTags","setShowTags","showCam","setShowCam","showLED","setShowLED","logs","setLogs","toggleSelectedComp","compId","has","prev","filter","x","toogleRoomComp","add","val","controlId","userId","toggleAutoRotate","toggleShowVirtualLayer","log","toggleShowTags","toggleShowBeam","newVal","toggleShowInfoWindow","toggleLogin","toggleCam","toggleShowLED","toggleunderConstruction","NavBar","socketCtx","connectionStatusColor","autoRotateColor","showTagsColor","cameraStatusColor","mobileVersion","setMobileVersion","openMobileVersion","Boolean","led","setLED","openLED","laserBeam","setLaserBeam","openLaserBeam","closeMobileVersion","handleLED","closeLaserBeam","id","className","styles","navbar","theme","navMenuLaser","onClick","event","currentTarget","variant","sx","borderRadius","height","width","color","bgcolor","icon","MenuListProps","anchorEl","open","onClose","disableRipple","navMenu","size","mobile","style","paddingRight","memo","isEqual","Console","showConsole","setShowConsole","animation","setAnimation","consoleContainer","consoleMain","map","index","consoleHandler","closeConsole","openConsole","Login","connectionOption","connection","setConnection","accessCode","setAccessCode","handleLogin","String","error","handleChange","target","handleAccessCode","themeLogin","popupWindow","popupInner","fontSize","container","direction","justifyContent","alignItems","autoFocus","label","onChange","onKeyPress","marginLeft","helperText","type","endIcon","Chat","showChat","setShowChat","message","setMessage","chat","setChat","sendMessage","a","preventDefault","at","user","console","i","length","slice","component","controlIds","reset","frameSize","exposure","contrast","replace","chatContainer","chatMain","msgForm","paddingTop","htmlFor","endAdornment","position","edge","chatHandler","closeChat","openChat","RadioButton","props","radioButton","setRadioButton","option","status","FormControl","FormLabel","RadioGroup","row","aria-labelledby","name","Object","keys","dictionary","FormControlLabel","disabled","online","control","Radio","SwitchCtrl","switchValue","setSwitchValue","Box","FormGroup","Stack","ml","Typography","left","Switch","checked","switchStatus","newValue","substring","inputProps","right","MultiCtrl","switchWhiteIsOn","setSwitchWhiteStatus","switchRedIsOn","setSwitchRedStatus","selectionStatus","setSelectionStatus","onlineStatus","setOnlineStatus","redLED","isOn","whiteLED","busy","state","getStatus","ThemeProvider","mx","none","splitter","pinhole","rled","wled","Imprint","mainWrapper","mr","Button","window","DescriptionHandler","renderOption","info","Window","setInfo","lastChange","setLastChange","footer","setFooter","topper","setTopper","popupCtx","usePopUpContext","para","iconClose","setting","undefined","Footer","componentList","includes","time","Date","getHours","getMinutes","getSeconds","getDay","getMonth","getFooter","handle","top","windowHeader","display","cursor","float","smallSetting","smallSettings","toggleShowWelcomeWindow","toggleShowManualWindow","windowContent","background","windowFooter","timeNow","difH","difMin","difSec","alert","toggleShowPopUp","identify","MultiComponentSelection","controlId2","controlLED","controlLED2","ESPCam","ctx","data","uint8Arr","Uint8Array","binary","fromCharCode","base64String","btoa","img","Image","onload","canvas","document","getElementById","getContext","drawImage","this","src","Canvas","SliderCtrl","sliderPos","setSliderPos","sliderValue","marks","parseInt","min","max","handleSettingChanges","text","m","gutterBottom","spacing","mb","Slider","aria-label","valueLabelDisplay","step","onChangeCommitted","TypeSelectMenuItem","MenuItem","CustomSelect","fullWidth","InputLabel","Select","selectValue","isNaN","Number","list","ESPCamPlusSettings","switchIsOn","setSwitchStatus","setFrameSize","setContrast","setExposure","gray","Settings","IconButton","setSetting","5","8","9","10","ESPCamStream","innerWidth","HeaterSettings","Temp","Canvas2","marginTop","marginBottom","startIcon","zIndex","averageTime","100","500","1000","2000","updateTime","5000","10000","HeaterCtrl","powerSwitch","setPowerSwitch","setAverageTime","setUpdateTime","powerValue","setPowerValue","temp","setTemp","hiddenSetting","pwm","componentT","string","toFixed","Canvas1","start","end","TempSmall","SwitchTemp","Heater","controlIdHeater","controlIdThermistor","RotaryCtrl","enteredRotation","setEnteredRotation","rotation","setRotation","absolute","rotCW_Handler","move","rotaryCtrl","CtrlLeft","CtrlRight","Rotary","Rotary_bg","setSwitch","border","textAlign","Laser","PS_Background","LaserCtrl","KM100","controlIdBottom","controlIdTop","KM100_Background","SM1ZP","SM1ZP_bg","MichelsonInterferometer","settingHeater","setSettingHeater","innerHeight","halfWidth","topHigh","topHighMiddle","topMiddle","leftLeft","leftMiddle","leftRight","leftMiddleRight","leftCam","selected","rotationTop","rotationBottom","ESPCamWithoutSettings","transform","backgroundSize","CamWindow","InfoWindowContent","backgroundImage","bgTeam","href","InfoWindow","ExperimentUILayer","authFailed","toggleSelect","DescriptiveTag","wrapperStyle","y","Html","zIndexRange","borderLeft","description","Model","useRef","nodes","materials","useGLTF","dispose","args","scale","thickness","roughness","transmission","clearcoat","clearcoatRoughness","ior","envMapIntensity","attenuationColor","attenuationDistance","Math","PI","onPointerDown","stopPropagation","castShadow","receiveShadow","geometry","SideMirrorMesh","material","BlackParts","transparent","opacity","SideMirrorMesh_1","ShinyParts","SideMirrorMesh_2","Mirror","PlaneMesh","WhiteParts","PlaneMesh_1","LaserMesh","LaserMesh_1","SD5","Cylinder","Cylinder_1","LaserBeam","emissive","emissiveIntensity","Cylinder007","Cylinder007_1","LaserBeamBS","LEDLightWhite","LEDWhite","LEDLightRed","LEDRed","TranslateMirrorMesh005","TranslateMirrorMesh005_1","TranslateMirrorMesh005_2","TranslateMirrorBase","Cylinder008","Cylinder008_1","Cylinder008_2","Cylinder008_3","Cylinder008_4","Cylinder008_5","TranslateMirrorMesh004","TranslateMirrorMesh004_1","BS_slimHolder001","BS_slimHolder","BaseMesh001","BaseMesh001_1","BaseMesh001_2","BaseMesh001_3","preload","VirtualLayer","colorManagement","softShadows","camera","fov","fallback","Environment","files","OrbitControls","Billboard","ReactDOM","render","createTheme","palette","mode","primary","light","main","dark","contrastText","PopUpContext","PopUpContextProvider","showPopUp","setShowPopUp","setText","setType","errmsg","newText","newType","autoHideDuration","reason","severity"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,iBAAmB,kCAAkC,YAAc,6BAA6B,eAAiB,gCAAgC,YAAc,6BAA6B,aAAe,gC,oBCA7ND,EAAOC,QAAU,CAAC,OAAS,yBAAyB,SAAW,2BAA2B,IAAM,wB,oBCAhGD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,SAAW,6BAA6B,UAAY,gC,oBCAlHD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,aAAe,6BAA6B,OAAS,uBAAuB,OAAS,yB,oBCAzKD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,YAAc,2BAA2B,WAAa,4B,kCCDlI,qGAoCeC,IAlBH,WAEV,OADAC,EAAQC,MAAQ,UAEd,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,e,iKCxBNC,EAAMC,EAAQ,KAEdC,EAAU,IAAIC,IAAQ,GAAI,CAAEC,aAAa,IACzCC,EAASH,EAAQG,OAAO,KAExBC,EAAgBC,0BAEb,SAASC,IACd,OAAOC,qBAAWH,GAYb,SAASI,EAAT,GAA8C,IAAbC,EAAY,EAAZA,SAAY,EAEhBC,mBAAS,SAFO,mBAE3CC,EAF2C,KAEhCC,EAFgC,OAIhBF,oBAAS,GAJO,mBAI3CG,EAJ2C,KAIhCC,EAJgC,OAMlBJ,mBAAS,IANS,mBAM3CK,EAN2C,KAMjCC,EANiC,OAQ5BN,mBAAS,IARmB,mBAQ3CO,EAR2C,KAQtCC,EARsC,KAU5CC,EAASC,cAEfC,qBAAU,WAER,IAAMC,EAAU,SAACC,GACfT,GAAa,GAEbK,EAAOK,OAAO,gCAAkCP,GAEhDE,EAAOM,UAAUtB,GACjBgB,EAAOH,YAAYD,IAIfW,EAAa,SAACH,GAClBT,GAAa,GACbK,EAAOK,OAAO,gCAOhB,OAJArB,EAAOwB,GAAG,UAAWL,GAErBnB,EAAOwB,GAAG,aAAcD,GAEhB,WACNvB,EAAOyB,mBAAmB,UAAWN,GACrCnB,EAAOyB,mBAAmB,aAAcF,OAM5C,IAAMG,EAAY,SAACC,EAAQf,GAEvBC,EADED,GAAyB,UAAbA,EACF,aAEAA,GAEdZ,EAAOuB,aACP1B,EAAU,IAAIC,IAAQ6B,EAAQ,CAAE5B,aAAa,IAC7CC,EAASH,EAAQG,OAAO,KACxBC,EAAgBC,0BAChBa,EAAOY,IA4BT,OACE,cAAC1B,EAAc2B,SAAf,CAAwBC,MAAO,CAAE7B,SAAQU,YAAWC,eAAcmB,iBAzB3C,SAAClB,EAAUmB,GAClC,GAAKrB,EAeHC,GAAa,GACbE,EAAY,IACZa,EAAU,IACV1B,EAAOgC,QACPhB,EAAOK,OAAO,sCAnBA,CAEd,IAAIY,EAAU,CAAEC,IAAKtB,GAEjBuB,EAAQxC,EAAIyC,KAAKH,EAASF,EAAK,CAAEM,OAAQ,CAAEC,IAAkB,UAAb1B,EAAuB,QAAU,YAGrFZ,EAAOuC,KAAO,CAAEJ,MAAOA,GAEvBnC,EAAOmB,UAEPnB,EAAOwC,KAAK,UAAW5B,GACvBI,EAAOK,OAAO,iCAYoEK,YAAWjB,eAAcG,WAAUJ,aAAvH,SACGF,M,oBCzGPhB,EAAOC,QAAU,CAAC,YAAc,mC,oBCAhCD,EAAOC,QAAU,CAAC,YAAc,yC,+ICC1BkD,EAAaC,IAAMxC,gBAElB,SAASe,IACd,OAAOb,qBAAWqC,GAYb,SAASE,EAAT,GAA2C,IAAbrC,EAAY,EAAZA,SAAY,EACGC,oBAAS,GADZ,mBACxCqC,EADwC,KACrBC,EADqB,OAELtC,mBAAS,IAAIuC,KAFR,mBAExCC,EAFwC,KAEzBC,EAFyB,OAGCzC,oBAAS,GAHV,mBAGxC0C,EAHwC,KAGtBC,EAHsB,OAIL3C,mBAAS,IAAIuC,KAJR,mBAIxCK,EAJwC,KAIzBC,EAJyB,OAKH7C,oBAAS,GALN,mBAKxC8C,EALwC,KAKxBC,EALwB,OAMX/C,oBAAS,GANE,mBAMxCgD,EANwC,KAM5BC,EAN4B,OAObjD,oBAAS,GAPI,mBAOxCkD,EAPwC,KAO7BC,EAP6B,OAQfnD,mBAAS,OARM,mBAQxCoD,EARwC,KAQ9BC,EAR8B,OASfrD,oBAAS,GATM,mBASxCsD,EATwC,KAS9BC,EAT8B,OAUjBvD,oBAAS,GAVQ,mBAUxCwD,EAVwC,KAU/BC,EAV+B,OAWjBzD,mBAAS,QAXQ,mBAWxC0D,EAXwC,KAW/BC,EAX+B,OAYvB3D,mBAAS,IAZc,mBAYxC4D,EAZwC,KAYlCC,GAZkC,QAanB7D,mBAAS,IAbU,qBAaxCP,GAbwC,MAahCsB,GAbgC,SAcff,mBAAS,IAdM,qBAcxCK,GAdwC,MAc9BC,GAd8B,MAiBzCwD,GAAqB,SAACC,GAErBnB,EAAcoB,IAAID,IAIrBlB,GAAiB,SAAAoB,GAAI,OAAI,IAAI1B,IAAI,YAAI0B,GAAMC,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,SAC7DK,GAAeL,IAJflB,GAAiB,SAAAoB,GAAI,OAAI,IAAI1B,IAAI0B,EAAKI,IAAIN,QAkBxCK,GAAiB,SAACL,GAAyB,IAAjBO,EAAgB,wDAC9C,IAEO9B,EAAcwB,IAAID,KAAmB,IAARO,EASvB9B,EAAcwB,IAAID,KAC3BtB,GAAiB,SAAAwB,GAAI,OAAI,IAAI1B,IAAI,YAAI0B,GAAMC,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,SAE7DtE,GAAOwC,KAAK,oBAAqB,CAC/BsC,UAAWR,EACXS,OAAQnE,OAbVoC,GAAiB,SAAAwB,GAAI,OAAI,IAAI1B,IAAI0B,EAAKI,IAAIN,OAE1CtE,GAAOwC,KAAK,mBAAoB,CAC9BsC,UAAWR,EACXS,OAAQnE,MAYZ,MAAOQ,MAuDX,OACE,cAACqB,EAAWb,SAAZ,CACEC,MAAO,CACL0B,aACAyB,iBAvDmB,WACvBxB,GAAeD,IAuDXN,mBACAgC,uBApDyB,WAC7B/B,GAAqBD,IAoDjBE,gBACAkB,sBACAF,OACA9C,OA9CS,SAAC6D,GACdd,IAAQ,SAAAI,GAAI,OAAKU,GAAL,mBAAaV,QA8CrBX,WACAsB,eArDiB,WACrBrB,GAAaD,IAqDTF,WACAyB,eA7CiB,SAACC,GACtBzB,EAAYyB,IA6CR5B,YACAC,eACAL,iBACAiC,qBAvCuB,WAC3BhC,GAAmBD,IAuCfkC,YAnCc,WAClB7B,GAAcD,IAmCV+B,UA/BY,WAChBxB,GAAYD,GACZM,GAAmB,aA8BfN,UACAhB,gBACAC,mBACA2B,kBACAV,UACAwB,cApDgB,SAACJ,GACrBnB,EAAWmB,IAoDPrF,UACAsB,aACAV,YACAC,eACA+B,oBACA8C,wBArC0B,SAACL,GAC/BxC,EAAqBwC,KAKrB,SAkCG/E,M,+NCtJDqF,EAAS,WACX,IAAM3E,EAASC,cACT2E,EAAYzF,cAEd0F,EAAwB,GACxBD,EAAUlF,YAAamF,EAAwB,SACnD,IAAIC,EAAkB,GAClB9E,EAAOuC,aAAcuC,EAAkB,SAC3C,IAAIC,EAAgB,GAChB/E,EAAO6C,WAAYkC,EAAgB,SACvC,IAAIC,EAAoB,GACpBhF,EAAO+C,UAAWiC,EAAoB,SAC1C,IAZiB,EAcyBzF,mBAAS,MAdlC,mBAcV0F,EAdU,KAcKC,EAdL,KAeXC,EAAoBC,QAAQH,GAfjB,EAiBK1F,mBAAS,MAjBd,mBAiBV8F,EAjBU,KAiBLC,EAjBK,KAkBXC,EAAUH,QAAQC,GAlBP,EAoBiB9F,mBAAS,MApB1B,mBAoBViG,EApBU,KAoBCC,EApBD,KAqBXC,EAAgBN,QAAQI,GAexBG,EAAqB,WACvBT,EAAiB,OAGfU,EAAY,WACdN,EAAO,OAGLO,EAAiB,WACnBJ,EAAa,OAGjB,OACI,qBAAKK,GAAG,SAASC,UAAWC,IAAOC,OAAnC,SACI,eAAC,IAAD,CAAeC,MAAOA,IAAtB,UACI,4CACA,sBAAKH,UAAWC,IAAOG,aAAvB,UACI,0CAEA,cAAC,IAAD,CAAYC,QA3BP,SAACC,GAClBf,EAAOe,EAAMC,gBA0BkCC,QAAQ,YAAYC,GAAI,CACvDC,aAAc,EACdC,OAAQ,OACRC,MAAO,OACPC,MAAO,QACP,SAAU,CACNC,QAAS,YACTD,MAAO,YAPf,SAUI,cAAC,IAAD,CAAME,KAAK,cAAcH,MAAM,KAAKD,OAAO,SAG/C,eAAC,IAAD,CACIZ,GAAG,uBACHiB,cAAe,CACX,kBAAmB,0BAEvBC,SAAU3B,EACV4B,KAAM1B,EACN2B,QAAStB,EAPb,UASI,cAAC,IAAD,CAAUQ,QAAS,WACfR,IACA5F,EAAOyE,cAAc,SACtB0C,eAAa,EAHhB,kBAIA,cAAC,IAAD,CAAUf,QAAS,WACfR,IACA5F,EAAOyE,cAAc,UACtB0C,eAAa,EAHhB,mBAIA,cAAC,IAAD,CAAUf,QAAS,WACfR,IACA5F,EAAOyE,cAAc,QACtB0C,eAAa,EAHhB,oBAMJ,cAAC,IAAD,CAAYf,QA3DJ,SAACC,GACrBZ,EAAaY,EAAMC,gBA0D+BC,QAAQ,YAAYC,GAAI,CAC1DC,aAAc,EACdC,OAAQ,OACRC,MAAO,OACPC,MAAO,QACP,SAAU,CACNC,QAAS,YACTD,MAAO,YAPf,SAUI,cAAC,IAAD,MAGJ,eAAC,IAAD,CACId,GAAG,uBACHiB,cAAe,CACX,kBAAmB,0BAEvBC,SAAUxB,EACVyB,KAAMvB,EACNwB,QAASrB,EAPb,UASI,cAAC,IAAD,CAAUO,QAAS,WACfP,IACA7F,EAAOoE,eAAe,OACvB+C,eAAa,EAHhB,gBAIA,cAAC,IAAD,CAAUf,QAAS,WACfP,IACA7F,EAAOoE,eAAe,QACvB+C,eAAa,EAHhB,iBAIA,cAAC,IAAD,CAAUf,QAAS,WACfP,IACA7F,EAAOoE,eAAe,UACvB+C,eAAa,EAHhB,gCAQR,qBAAKpB,UAAWC,IAAOoB,QAAvB,SACI,+BACI,cAAC,IAAD,CAAS1I,MAAQkG,EAAUlF,UAAa,aAAe,UAAvD,SACI,qBAAI0G,QAAS,WAASxB,EAAUlF,UAAakF,EAAU9D,mBAAqBd,EAAOuE,eAAnF,cAAwGK,EAAUlF,UAAa,cAAC,IAAD,CAAQ2H,KAAM,GAAIT,MAAO/B,IAA4B,cAAC,IAAD,CAASwC,KAAM,GAAIT,MAAO/B,IAA9M,SAGJ,cAAC,IAAD,CAASnG,MAAM,WAAf,SACI,oBAAI0H,QAASpG,EAAOgE,iBAApB,SAAsC,cAAC,IAAD,CAAyBqD,KAAM,GAAIT,MAAO9B,QAGpF,cAAC,IAAD,CAASpG,MAAM,SAAf,SACI,oBAAI0H,QAASpG,EAAOmE,eAApB,SAAoC,cAAC,IAAD,CAAQkD,KAAM,GAAIT,MAAO7B,QAGjE,cAAC,IAAD,CAASrG,MAAM,SAAf,SACI,oBAAI0H,QAASpG,EAAOwE,UAApB,SAA+B,cAAC,IAAD,CAAU6C,KAAM,GAAIT,MAAO5B,QAE9D,cAAC,IAAD,CAAStG,MAAM,cAAf,SACI,oBAAI0H,QAASpG,EAAOsE,qBAApB,SAA0C,cAAC,IAAD,CAAe+C,KAAM,GAAIT,MAvIjE,cA6Id,sBAAKb,UAAWC,IAAOsB,OAAvB,UACI,cAAC,IAAD,CAAYlB,QAlIR,SAACC,GACjBnB,EAAiBmB,EAAMC,gBAiIuBC,QAAQ,YAAYC,GAAI,CACtDC,aAAc,EACdC,OAAQ,OACRC,MAAO,OACPC,MAAO,QACP,SAAU,CACNC,QAAS,YACTD,MAAO,YAPf,SAUI,cAAC,IAAD,CAAuBA,MAAO,YAGlC,eAAC,IAAD,CACId,GAAG,uBACHiB,cAAe,CACX,kBAAmB,0BAEvBC,SAAU/B,EACVgC,KAAM9B,EACN+B,QAASvB,EAPb,UASI,eAAC,IAAD,CAAUS,QAAS,WACfT,IACCf,EAAUlF,UAAakF,EAAU9D,mBAAqBd,EAAOuE,eAC/D4C,eAAa,EAHhB,UAIMvC,EAAUlF,UAAa,cAAC,IAAD,CAAQ2H,KAAM,GAAIT,MAAO/B,EAAuB0C,MAAO,CAAEC,aAAc,UAAe,cAAC,IAAD,CAASH,KAAM,GAAIT,MAAO/B,EAAuB0C,MAAO,CAAEC,aAAc,UACrL5C,EAAUlF,UAAa,aAAe,aAE5C,eAAC,IAAD,CAAU0G,QAAS,WACfT,IACA3F,EAAOmE,kBACRgD,eAAa,EAHhB,UAII,cAAC,IAAD,CAAQE,KAAM,GAAIE,MAAO,CAAEC,aAAc,UAJ7C,YAOA,eAAC,IAAD,CAAUpB,QAAS,WACfT,IACA3F,EAAOwE,aACR2C,eAAa,EAHhB,UAII,cAAC,IAAD,CAAUE,KAAM,GAAIE,MAAO,CAAEC,aAAc,UAJ/C,SAOA,eAAC,IAAD,CAAUpB,QAAS,WACfT,IACA3F,EAAOsE,wBACR6C,eAAa,EAHhB,UAII,cAAC,IAAD,CAAeE,KAAM,GAAIE,MAAO,CAAEC,aAAc,UAJpD,sBAeTC,mBAAK9C,EAAQ+C,Y,iCCnO5B,6DAaA,MAAMC,EAAU,KACd,MAAOC,EAAaC,GAAkBtI,oBAAS,IACxCuI,EAAWC,GAAgBxI,mBAAS,IAErCS,EAASC,cAQf,OACE,sBAAK8F,UAAWC,IAAOgC,iBAAmB,IAAMF,EAAhD,UACE,qBAAK/B,UAAWC,IAAOiC,YAAvB,SAEGjI,EAAOmD,KAAK+E,KAAI,CAACjH,EAASkH,IACjB,iCAAmBlH,EAAQ,yBAAhBkH,OAGvB,qBAAKpC,UAAWC,IAAOoC,eAAvB,SACE,+BACE,cAAC,IAAD,CAAmBf,KAAM,GAAIjB,QAfV,KACzB2B,EAAaH,EAAc5B,IAAOqC,aAAerC,IAAOsC,aACxDT,GAAgBD,cAmBLH,mBAAKE,EAASD,Y,iCCzC7B,qJAkBA,MAAMa,EAAQ,KAEV,MAAMC,EAAmB,CAAC,CAAE9J,MAAO,yBAA2B,CAAEA,MAAO,iCAChE+J,EAAYC,GAAiBnJ,mBAAS,KACtCoJ,EAAYC,GAAiBrJ,mBAAS,KACtCK,EAAUC,GAAeN,mBAAS,IAEnCqF,EAAYzF,cACZa,EAASC,cAGT4I,EAAc,KAChB,GAAiB,KAAbjJ,EACA,IACIgF,EAAUlE,UAAUoI,OAAOL,GAAaK,OAAOlJ,IAC/CgF,EAAU9D,iBAAiBgI,OAAOlJ,GAAWkJ,OAAOH,IACpD3I,EAAOuE,cAEX,MAAOwE,MAKTC,EAAgB3C,IAClBxG,EAAYwG,EAAM4C,OAAOpI,OACzB6H,EAAcF,EAAiB,GAAG9J,QAIhCwK,EAAoB7C,IACtBuC,EAAcvC,EAAM4C,OAAOpI,QAI/B,OAAIb,EAAOyC,UAEH,eAAC,IAAD,CAAeyD,MAAOiD,IAAtB,UAEI,qBAAKpD,UAAWC,IAAOoD,cAGvB,sBAAKrD,UAAWC,IAAOqD,WAAvB,UACI,oBAAI3K,MAAM,WAAV,SAAqB,UACrB,qBAAKqH,UAAWC,IAAOhF,MAAvB,SACI,cAAC,IAAD,CAAYoF,QAAUhG,IAClBJ,EAAOuE,eADX,SAGI,cAAC,IAAD,CAA0B+E,SAAS,cAG3C,eAAC,IAAD,CACIC,WAAS,EACTC,UAAU,SACVC,eAAe,SACfC,WAAW,SAJf,UAMI,cAAC,IAAD,CACIC,WAAS,EACTpD,QAAQ,WACRqD,MAAM,YACN/I,MAAOjB,EACPiK,SAAUb,EACVc,WAAa1J,IAAsB,UAAVA,EAAEW,KAAmB8H,KAC9CtB,MAAO,CAAEwC,WAAY,KAAMpD,MAAO,QAASa,aAAc,OACzDuB,MAAoB,KAAbnJ,EACPoK,WAAyB,KAAbpK,EAAkB,uBAAyB,MAG3D,cAAC,IAAD,CACI2G,QAAQ,WACRqD,MAAM,eACN/I,MAAO8H,EACPkB,SAAUX,EACVY,WAAa1J,IAAsB,UAAVA,EAAEW,KAAmB8H,KAC9CtB,MAAO,CAAEwC,WAAY,KAAMpD,MAAO,QAASa,aAAc,OACzDuB,MAAsB,KAAfJ,EACPqB,WAA2B,KAAfrB,EAAoB,yBAA2B,SAGnE,cAAC,IAAD,CAAQtB,KAAK,QAAQ4C,KAAK,SAAS1D,QAAQ,YACvCH,QAASyC,EACTqB,QAAS,cAAC,IAAD,IACT3C,MAAO,CAAEZ,MAAO,MAAOD,OAAQ,OAHnC,SAIC,gBAKL,yBAGDe,mBAAKc,EAAOb,Y,mNC3FrByC,EAAO,WAAO,IAAD,EACe5K,oBAAS,GADxB,mBACV6K,EADU,KACAC,EADA,OAEiB9K,mBAAS,IAF1B,mBAEVuI,EAFU,KAECC,EAFD,OAGaxI,mBAAS,IAHtB,mBAGV+K,EAHU,KAGDC,EAHC,OAIOhL,mBAAS,IAJhB,mBAIViL,EAJU,KAIJC,EAJI,KAMX7F,EAAYzF,cACZa,EAASC,cAEfC,qBAAU,WAER,IAAMoK,EAAU,SAACrJ,GACfwJ,EAAQ,GAAD,mBAAKD,GAAL,CAAWvJ,MAKpB,OAFA2D,EAAU5F,OAAOwB,GAAG,UAAW8J,GAExB,WACL1F,EAAU5F,OAAOyB,mBAAmB,UAAW6J,MAEhD,CAAC1F,EAAW4F,IAGf,IAAME,EAAW,uCAAG,WAAOrE,GAAP,iBAAAsE,EAAA,sDAIlB,GAHAtE,EAAMuE,iBAGgB,MAAlBN,EAAQO,GAAG,GAGb,GAAgB,YAAZP,GAAqC,OAAZA,EAC3BtK,EAAOgE,mBACPyG,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEzG,OAAQ,OAAQuG,QAAS,iCAAkC1D,MAAO,mBAGnF,GAAgB,kBAAZ0D,GAA2C,OAAZA,EACtCtK,EAAO0E,yBAAyB1E,EAAO4B,mBAEvCgD,EAAU5F,OAAOwC,KAAK,qBAAsBxB,EAAO4B,mBACnD6I,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEzG,OAAQ,OAAQuG,QAAS,qCAAuCtK,EAAO4B,kBAAmBgF,MAAO,mBAGlH,GAAgB,UAAZ0D,GAAmC,WAAZA,EAE9B1F,EAAU5F,OAAOwC,KAAK,cAGtBoD,EAAU5F,OAAOwB,GAAG,cAAc,SAACS,GACjC,IAAI6J,EAAO,GACXC,QAAQ7G,IAAIjD,GACZ,IAAK,IAAI+J,EAAI,EAAGA,EAAI/J,EAAQgK,OAAQD,GAAK,EACvCF,GAAQ7J,EAAQ+J,GAAK,KAEvBF,EAAOA,EAAKI,MAAM,GAAI,GACtBT,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEzG,OAAQ,OAAQuG,QAAS,iCAAmCQ,EAAMlE,MAAO,sBAI5F,GAAgB,eAAZ0D,GAAwC,gBAAZA,EAEnC1F,EAAU5F,OAAOwC,KAAK,oBAGtBoD,EAAU5F,OAAOwB,GAAG,oBAAoB,SAACS,GAGvC,GAAuB,IAAnBA,EAAQgK,OACVR,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEzG,OAAQ,OAAQuG,QAAS,8CAA+C1D,MAAO,kBAGhG,CAGH,IAFA,IAAIuE,EAAY,GAEPH,EAAI,EAAGA,EAAI/J,EAAQgK,OAAQD,GAAK,EACvCG,GAAalK,EAAQ+J,GAAK,KAE5BG,EAAYA,EAAUD,MAAM,GAAI,GAEhCT,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEzG,OAAQ,OAAQuG,QAAS,qCAAuCa,EAAWvE,MAAO,uBAKvG,GAAgB,WAAZ0D,EAKP,IAJA1F,EAAU5F,OAAOwC,KAAK,UAAW,CAAEuC,OAAQ,OAAQuG,QAAS,0CAA2C1D,MAAO,YAExGwE,EAAa,GAEVJ,EAAI,EAAGA,EAAII,EAAWH,OAAQD,IACrCpG,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQa,EAAUhF,SAClBkE,UAAWsH,EAAWJ,GACtBK,OAAO,QAKQ,SAAZf,GACP1F,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQ,OACRD,UAAW,WACXwH,UAAW,KAGb1G,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQ,OACRD,UAAW,WACXyH,SAAU,IACV3E,MAAOhC,EAAUpF,YAGnBoF,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQ,OACRD,UAAW,WACX0H,SAAU,EACV5E,MAAOhC,EAAUpF,YAGnBoF,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQ,OACRD,UAAW,WACXyH,SAAU,KACV3E,MAAOhC,EAAUpF,YAGnBiL,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEzG,OAAQ,OAAQuG,QAAS,8CAA+C1D,MAAO,eAInG6D,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEzG,OAAQ,OAAQuG,QAAS,yBAA0B1D,MAAO,mBAKzE0D,EAAQW,OAAS,GAA2C,IAAtCX,EAAQmB,QAAQ,MAAO,IAAIR,QACxDrG,EAAU5F,OAAOwC,KAAK,UAAW,CAAEuC,OAAQa,EAAUhF,SAAU0K,QAASA,EAAS1D,MAAOhC,EAAUpF,YAEpG+K,EAAW,IAlHO,2CAAH,sDAgIjB,OAEE,cADA,CACA,OAAKxE,UAAWC,IAAO0F,cAAgB,IAAM5D,EAA7C,UACE,qBAAK/B,UAAWC,IAAO2F,SAAvB,SACGnB,EAAKtC,KAAI,SAACjH,EAASkH,GAClB,OACE,8BAEE,uBAAMZ,MAAO,CAAEX,MAAO3F,EAAQ2F,OAA9B,UAAuC,IAAE3F,EAAQ8C,OAAO,OAAQ,IAAC,+BAAQ9C,EAAQqJ,UACjF,yBAHMnC,QAQd,sBAAMpC,UAAWC,IAAO4F,QAAxB,SACE,cAAC,IAAD,CAAe1F,MAAOA,IAAtB,SACE,eAAC,IAAD,CAAaM,GAAI,CAAEuD,YAAa,EAAGpD,MAAO,EAAOkF,WAAY,GAAKtF,QAAQ,WAA1E,UACE,cAAC,IAAD,CAAYuF,QAAQ,8BAApB,SAAkD,cAClD,cAAC,IAAD,CACEhC,WAAY,SAAC1J,GAAsB,UAAVA,EAAEW,KAAmB2J,EAAYtK,IAC1DyJ,SAxBS,SAACxD,GACpBkE,EAAWlE,EAAM4C,OAAOpI,QAwBdA,MAAOyJ,EACPyB,aACE,cAAC,IAAD,CAAgBC,SAAS,MAAzB,SACE,eAAC,IAAD,CAAY5F,QAASsE,EAAauB,KAAK,MAAvC,UAA8C,IAAC,cAAC,IAAD,IAAU,SAG7DrC,MAAM,mBAOd,qBAAK7D,UAAWC,IAAOkG,YAAc,IAAMpE,EAA3C,SACE,+BACE,cAAC,IAAD,CAAUT,KAAM,GAAIjB,QA9CJ,WACtB2B,EAAaqC,EAAWpE,IAAOmG,UAAYnG,IAAOoG,UAClD/B,GAAaD,cAkDF3C,mBAAK0C,EAAMzC,Y,kKCrIX2E,EAxDK,SAACC,GAAW,IAAD,EACW/M,mBAAS+M,EAAMzI,KAD1B,mBACpB0I,EADoB,KACPC,EADO,KAGrBxM,EAASC,cACT2E,EAAYzF,cAGZ6J,EAAY,uCAAG,WAAO3C,GAAP,eAAAsE,EAAA,sDACjB6B,EAAenG,EAAM4C,OAAOpI,OAE5B+D,EAAU5F,OAAOwC,KAAK,WAAtB,GACIuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,WAFrB,cAGKmB,EAAMG,OAASpG,EAAM4C,OAAOpI,OAHjC,sBAIW+D,EAAUpF,WAJrB,IAOAoF,EAAU5F,OAAOwC,KAAK,SAAU,CAC5BkL,OAAQ,mBAAqB9H,EAAUhF,SACvCkE,UAAWwI,EAAMnB,YAGrBnL,EAAOK,OAAO,wBAA0BiM,EAAMnB,UAAY,OAASoB,GAflD,2CAAH,sDAkBlB,OACI,eAACI,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAW9G,GAAG,qCAAd,SAAoDwG,EAAM5N,QAC1D,cAACmO,EAAA,EAAD,CACIC,KAAG,EACHC,kBAAgB,qCAChBC,KAAK,0BACLnM,MAAOyL,EAAMzI,IACbgG,SAAUb,EALd,SAOKiE,OAAOC,KAAKZ,EAAMa,YAAYjF,KAAI,SAAArE,GAAG,OAClC,cAACuJ,EAAA,EAAD,CACIC,UAAWzI,EAAUlF,YAAa4M,EAAMgB,OACxC1D,MAAO0C,EAAMa,WAAWtJ,GACxBhD,MAAOgD,EACP0J,QAAS,cAACC,EAAA,EAAD,e,qDC0BlBC,EA9DI,SAACnB,GAAU,MAKY/M,oBAAS,GALrB,mBAKnBmO,EALmB,KAKNC,EALM,KAOpB3N,EAASC,cACT2E,EAAYzF,cA6BlB,OACI,cAACyO,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAOtE,UAAU,MAAME,WAAW,SAASlD,GAAI,CAAEuH,GAAI,GAArD,UACI,cAACC,EAAA,EAAD,UAAa1B,EAAM2B,OACnB,cAACC,EAAA,EAAD,CAAQC,QAAS7B,EAAM8B,aACnBvE,SAxBS,SAACxD,EAAOgI,GAAc,IAAD,EAC9CV,EAAeU,GAEfzJ,EAAU5F,OAAOwC,KAAK,WAAtB,GACIuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,WAFrB,cAGKmB,EAAMG,OAAS4B,GAHpB,sBAIWzJ,EAAUpF,WAJrB,IAOAoF,EAAU5F,OAAOwC,KAAK,SAAU,CAC5BkL,OAAQ,YAAc9H,EAAUhF,SAAS0O,UAAU,EAAG,IACtDxK,UAAWwI,EAAMnB,YAGrBnL,EAAOK,OAAO,sBAAwBiM,EAAMnB,UAAY,OAASuC,IAUjDa,WAAY,CAAE,aAAc,cAC5BlB,UAAWzI,EAAUlF,YAAa4M,EAAMgB,SAC5C,cAACU,EAAA,EAAD,UAAa1B,EAAMkC,gBC+BxBC,EAhFG,SAACnC,GAAW,IAAD,EACuB/M,oBAAS,GADhC,mBAClBmP,EADkB,KACDC,EADC,OAEmBpP,oBAAS,GAF5B,mBAElBqP,EAFkB,KAEHC,EAFG,OAGqBtP,mBAAS,QAH9B,mBAGlBuP,EAHkB,KAGDC,EAHC,OAIexP,oBAAS,GAJxB,mBAIlByP,EAJkB,KAIJC,EAJI,KAMnBrK,EAAYzF,cAyDlB,OA/CAe,qBAAU,WACN,IAAMwM,EAAS,SAACzL,GAERA,EAAQ6C,YAAcwI,EAAM4C,OAC5BL,EAAmB5N,EAAQyL,OAAOyC,MAE7BlO,EAAQ6C,YAAcwI,EAAM8C,SACjCT,EAAqB1N,EAAQyL,OAAOyC,MAE/BlO,EAAQ6C,YAAcwI,EAAMnB,YACjC8D,GAAgB,GACfhO,EAAQyL,OAAO2C,KAAQJ,GAAgB,GAASA,GAAgB,GACjEF,EAAmB9N,EAAQyL,OAAO4C,SA4B1C,OAtBA1K,EAAU5F,OAAOwC,KAAK,UAAW,CAC7BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjBoE,WAAW,IAGf3K,EAAU5F,OAAOwC,KAAK,UAAW,CAC7BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAM4C,OACjBK,WAAW,IAGf3K,EAAU5F,OAAOwC,KAAK,UAAW,CAC7BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAM8C,SACjBG,WAAW,IAGf3K,EAAU5F,OAAOwB,GAAG,SAAUkM,GAE9B9H,EAAU5F,OAAOwC,KAAK,YAAa8K,EAAMnB,WAElC,WACHvG,EAAU5F,OAAOyB,mBAAmB,SAAUiM,MAInD,CAAC9H,EAAU5F,SAGV,cAACwQ,EAAA,EAAD,CAAetJ,MAAOA,IAAtB,SACI,eAAC0H,EAAA,EAAD,CAAKpH,GAAI,CAAEiJ,GAAI,GAAf,UACI,cAAC,EAAD,CAAatE,UAAWmB,EAAMnB,UAAWmC,OAAQ0B,EAAc7B,WA1D/C,CACxBuC,KAAM,OACNC,SAAU,gBACVC,QAAS,UACTC,KAAM,UACNC,KAAM,aAqDoGjM,IAAKiL,EAAiBrC,OAAO,UAC/H,cAAC,EAAD,CAAQtB,UAAWmB,EAAM8C,SAAUhB,aAAcM,EAAiBpB,OAAQ0B,EAAcf,KAAK,gBAAgBO,MAAM,KAAK/B,OAAO,WAC/H,cAAC,EAAD,CAAQtB,UAAWmB,EAAM4C,OAAQd,aAAcQ,EAAetB,OAAQ0B,EAAcf,KAAK,cAAcO,MAAM,KAAK/B,OAAO,iB,oCChD1HsD,EA5BC,SAACzD,GACb,OACI,8BACI,sBAAKvG,UAAWC,IAAOgK,YAAazI,MAAO,CAAEb,OAAQ4F,EAAM5F,QAA3D,UACI,4BAAG,gJAGH,4BAAG,qDAGH,cAAC8I,EAAA,EAAD,CAAetJ,MAAOiD,IAAtB,SAEI,eAACyE,EAAA,EAAD,CAAKpH,GAAI,CAAE,WAAY,CAAEyJ,GAAI,EAAGlC,GAAI,IAApC,UAEI,cAACmC,EAAA,EAAD,CAAQjG,KAAK,SAAS1D,QAAQ,YAAYH,QAAS,WAAQ+J,OAAOlJ,KAAK,2CAA4C,kBAAnH,SAAuI,mBACvI,cAACiJ,EAAA,EAAD,CAAQjG,KAAK,SAAS1D,QAAQ,YAAYH,QAAS,WAAQ+J,OAAOlJ,KAAK,+CAAgD,kBAAvH,SAA2I,mCClBpJmJ,EAVY,SAAC9D,GAExB,IAAM+D,EAAe,CACjBC,KAAM,cAAC,EAAD,CAAW5J,OAAQ4F,EAAM5F,UAGnC,OACI,8BAAM2J,EAAa/D,EAAMnB,c,mECwBjC,MAAMoF,EAAUjE,IACd,MAAOgE,EAAME,GAAWjR,oBAAwB,IAAf+M,EAAMgE,OAChCG,EAAYC,GAAiBnR,mBAAS+M,EAAMmE,aAC5CE,EAAQC,GAAarR,mBAAS,qBAC9BsR,EAAQC,GAAavR,mBAAS,IAE/BqF,EAAYzF,cACZ4R,EAAWC,cACXhR,EAASC,cAGToQ,EAAe,CACnBY,KAAM,cAAC,IAAD,CAAWlL,UAAWC,IAAOc,KAAMO,KAAM,KAC/CiJ,KAAM,cAAC,IAAD,CAA4BvK,UAAWC,IAAOkL,UAAW7J,KAAM,KACrE8J,QAAS,cAAC,IAAD,CAAmBpL,UAAWC,IAAOkL,UAAW7J,KAAM,KAC/DqI,KAAM,cAAC,IAAD,CAAmB3J,UAAWC,IAAOc,KAAMO,KAAM,GAAIT,MAAO,aAGpE1G,qBAAU,KAEa,SAAjBoM,EAAMuE,OACRC,EAAU,QACgB,SAAjBxE,EAAMuE,OACfC,EAAU,aACgBM,IAAjB9E,EAAMuE,QACfC,EAAU,QAIZ,MAAMO,EAAUpQ,IACd,GAAqB,SAAjBqL,EAAMqE,QAAqBrE,EAAMgF,cAAcC,SAAStQ,EAAQ6C,WAAY,CAC9E8M,EAAU9H,OAAO7H,EAAQyL,SACzB,IAAI8E,EAAO,IAAIC,KACff,EAAc,CAACc,EAAKE,WAAYF,EAAKG,aAAcH,EAAKI,aAAcJ,EAAKK,SAAUL,EAAKM,eAKxFC,EAAa9Q,IACjB,GAAqB,SAAjBqL,EAAMqE,QAAqBrE,EAAMgF,cAAcC,SAAStQ,EAAQ6C,WAAY,CAC9E8M,EAAU9H,OAAO7H,EAAQyL,SACzB,IAAI8E,EAAO,IAAIC,KACff,EAAc,CAACc,EAAKE,WAAYF,EAAKG,aAAcH,EAAKI,aAAcJ,EAAKK,SAAUL,EAAKM,eAQ9F,OAJAlN,EAAU5F,OAAOwB,GAAG,SAAU6Q,GAE9BzM,EAAU5F,OAAOwB,GAAG,YAAauR,GAE1B,KACLnN,EAAU5F,OAAOyB,mBAAmB,SAAU4Q,GAC9CzM,EAAU5F,OAAOyB,mBAAmB,YAAasR,MAIlD,CAACnN,EAAU5F,SAuEd,OAEE,aADA,CACC,IAAD,CAAWgT,OAAO,oBAAlB,SACE,sBACEjM,UAAWC,IAAOmK,OAClB5I,MAAO,CAAE0K,IAAK3F,EAAM2F,IAAM,KAAMhE,KAAM3B,EAAM2B,KAAO,KAAMtH,MAAO2F,EAAM5F,OAAS,KAAMA,OAAQ4F,EAAM5F,OAAS,MAF9G,UAKE,sBAAKX,UAAWC,IAAOkM,aAAvB,UACE,sBACEnM,UAAU,mBACVwB,MAAO,CACL4K,QAAS,QACTxL,MAAO,oBACPyL,OAAQ,OACRC,MAAO,QANX,SASG/F,EAAMjL,SAGT,8BAEE,sBAAM+E,QAtEU,KACxBoK,GAASF,GAEQ,WAAbhE,EAAMxG,KAA2C,IAAxB9F,EAAOsS,cAClCtS,EAAOuS,gBAGQ,SAAbjG,EAAMxG,GACYgL,EAAT,SAAXD,EAA8B,OAAoB,QAE9BC,EAAT,SAAXD,EAA8B,UAAuB,SA4D/C,SACGR,EAAaQ,KAGhB,sBAAMzK,QA/FU,KACxBpG,EAAOqD,mBAAmBiJ,EAAMxG,IAEf,aAAbwG,EAAMxG,IACR9F,EAAOwE,YAGQ,SAAb8H,EAAMxG,IACR9F,EAAOsE,uBAGQ,YAAbgI,EAAMxG,IACR9F,EAAOwS,0BAGQ,WAAblG,EAAMxG,IACR9F,EAAOyS,0BA+ED,SAAkC,cAAC,IAAD,CAAsB1M,UAAWC,IAAOkL,UAAW7J,KAAM,aAK9FiJ,EACC,qBACEvK,UAAWC,IAAO0M,cAClBnL,MAAO,CACLb,OAAQ4F,EAAM5F,OACdC,MAAO2F,EAAM3F,MACbgM,WAAY,OAASrG,EAAMqG,WAAa,KAL5C,SAQGrG,EAAMhN,WAKT,qBACEyG,UAAWC,IAAO0M,cAClBnL,MAAO,CACLb,OAAQ4F,EAAM5F,OACdC,MAAO2F,EAAM3F,OAJjB,SAOE,cAAC,EAAD,CAAoBD,OAAQ4F,EAAM5F,OAAQyE,UAAWmB,EAAMxG,OAK7C,SAAjBwG,EAAMqE,OACL,sBAAK5K,UAAWC,IAAO4M,aAAvB,UACE,uBAAMxM,QA5FG,KACjB,IAAIyM,EAAU,IAAIpB,KAClB,IAAIqB,EAAMC,EAAQC,EAAS,EAC3B,IAAIC,EAAQ,GAEZJ,EAAU,CAACA,EAAQnB,WAAYmB,EAAQlB,aAAckB,EAAQjB,aAAciB,EAAQhB,SAAUgB,EAAQf,YAC/E,KAAlBrB,EAAW,GACbwC,EAAQ,2BACCJ,EAAQ,GAAKpC,EAAW,IACjCqC,EAAOD,EAAQ,GAAKpC,EAAW,GAC/BwC,EAAQ,4BAA8BH,EAAO,WACpCD,EAAQ,KAAOpC,EAAW,IAAMoC,EAAQ,KAAOpC,EAAW,IAAMoC,EAAQ,GAAKpC,EAAW,IACjGuC,EAASH,EAAQ,GAAKpC,EAAW,GACjCwC,EAAQ,kBAAoBD,EAAS,WAC5BH,EAAQ,KAAOpC,EAAW,IAAMoC,EAAQ,GAAKpC,EAAW,IACjEsC,EAASF,EAAQ,GAAKpC,EAAW,GACjCwC,EAAQ,4BAA8BF,EAAS,aAE/CE,EADSJ,EAAQ,GAAKpC,EAAW,IAAMoC,EAAQ,GAAKpC,EAAW,GACvD,qCAEA,2BAGVM,EAASmC,gBAAgBD,EAAO,QAEhCrO,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BsC,UAAWwI,EAAMgF,cAAc,GAC/B6B,SAAU,IACVvM,MAAOhC,EAAUpF,aAgEX,UAA2B,IAAC,cAAC,IAAD,CAAiB6H,KAAM,QACnD,gCAAQsJ,OAGV,8BAkBKlJ,qBAAK8I,EAAQ7I,WCxMb0L,EAvBiB,SAAC9G,GAE/B,OACE,cAAC,EAAD,CACExG,GAAIwG,EAAMxI,UACVwN,cAAe,CAAChF,EAAMxI,UAAWwI,EAAM+G,WAAY/G,EAAMgH,WAAYhH,EAAMiH,aAC3ElS,OAAQiL,EAAM5N,MACduT,IAAK3F,EAAM2F,IACXhE,KAAM3B,EAAM2B,KACZvH,OAAO,QACPC,MAAM,QAPR,SAUE,cAAC,EAAD,CACEwE,UAAWmB,EAAMxI,UACjB8L,QAAStD,EAAM+G,WACfnE,OAAQ5C,EAAMgH,WACdlE,SAAU9C,EAAMiH,iB,oCCwCTC,EAzDA,SAAClH,GACZ,IAAM1H,EAAYzF,cACZa,EAASC,cAyCf,OAvCAC,qBAAU,WACN,IACIuT,EACEC,EAAO,SAACzS,GACV,GAAIA,EAAQ6C,YAAcwI,EAAMnB,UAAW,CAGvC,IAFA,IAAIwI,EAAW,IAAIC,WAAW3S,EAAQyS,MAClCG,EAAS,GACJ7I,EAAI,EAAGA,EAAI2I,EAAS1I,OAAQD,IACjC6I,GAAU/K,OAAOgL,aAAaH,EAAS3I,IAE3C,IAAI+I,EAAe5D,OAAO6D,KAAKH,GAE3BI,EAAM,IAAIC,MACdD,EAAIE,OAAS,WACT,IAAIC,EAASC,SAASC,eAAehI,EAAMnB,WAE3CsI,EAAMW,EAAOG,WAAW,MACnB,EACA,EACA,IACA,IACLd,EAAIe,UAAUC,KAJT,EACA,EACA,IACA,MAGTR,EAAIS,IAAM,yBAA2BX,IAS7C,OAJA/T,EAAO2D,eAAe2I,EAAMnB,WAAW,GAEvCvG,EAAU5F,OAAOwB,GAAG,OAAQkT,GAErB,WACH9O,EAAU5F,OAAOyB,mBAAmB,OAAQiT,MAIjD,CAAC9O,EAAU5F,SAGV,qBAAK+G,UAAWC,IAAO2O,OAAvB,SACI,wBAAQ7O,GAAIwG,EAAMnB,UAAWxE,MAAO2F,EAAM3F,MAAOD,OAAQ4F,EAAM5F,OAAQa,MAAO+E,EAAM/E,W,kBCiEjFqN,MApGKtI,IAKlB,MAAOuI,EAAWC,GAAgBvV,mBAAS+M,EAAMyI,aAE3C/U,EAASC,cACT2E,EAAYzF,cAKZ6V,EAAQ,CACZ,CAAEnU,MAAOoU,SAAS3I,EAAM4I,KAAMtL,MAAO0C,EAAM4I,KAC3C,CAAErU,MAAO,EAAG+I,MAAO,KACnB,CAAE/I,MAAOoU,SAAS3I,EAAM6I,KAAMvL,MAAO0C,EAAM6I,MAYvCC,EAAuB,CAAC/O,EAAOgI,KACnCyG,EAAazG,GAEbzJ,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjB,CAACmB,EAAMG,QAAS4B,EAChBzH,MAAOhC,EAAUpF,YAGnBoF,EAAU5F,OAAOwC,KAAK,SAAU,CAC9BkL,OAAQ,YAAc9H,EAAUhF,SAAS0O,UAAU,EAAG,IACtDxK,UAAWwI,EAAMnB,YAGnBnL,EAAOK,OAAO,wBAA0BiM,EAAMnB,UAAY,OAAS0J,IAGrE,OAAIvI,EAAM+I,KAEN,eAACzH,EAAA,EAAD,CAAKpH,GAAI,CAAEG,MAAO,IAAK2O,EAAG,GAA1B,UACE,cAACtH,EAAA,EAAD,CAAYlI,GAAG,eAAeyP,cAAY,EAA1C,SACGjJ,EAAM5N,QAET,cAACoP,EAAA,EAAD,CAAO0H,QAAS,EAAGhM,UAAU,MAAMhD,GAAI,CAAEiP,GAAI,GAAK/L,WAAW,SAA7D,SACE,cAACgM,EAAA,EAAD,CAAQC,aAAW,cACjBC,kBAAkB,OAClBC,KAAM,EACNX,IAAK5I,EAAM4I,IACXC,IAAK7I,EAAM6I,IACXtU,MAAOyL,EAAMyI,YACbe,kBAAmBV,EACnBJ,MAAO1I,EAAM+I,KACbhI,UAAWzI,EAAUlF,YAAa4M,EAAMgB,cAO9C,eAACM,EAAA,EAAD,CAAKpH,GAAI,CAAEG,MAAO,IAAK2O,EAAG,GAA1B,UACE,cAACtH,EAAA,EAAD,CAAYlI,GAAG,eAAeyP,cAAY,EAA1C,SACGjJ,EAAM5N,QAET,cAACoP,EAAA,EAAD,CAAO0H,QAAS,EAAGhM,UAAU,MAAMhD,GAAI,CAAEiP,GAAI,GAAK/L,WAAW,SAA7D,SACE,cAACgM,EAAA,EAAD,CAAQC,aAAW,cACjBC,kBAAkB,OAClBC,KAAM,EACNX,IAAK5I,EAAM4I,IACXC,IAAK7I,EAAM6I,IACXtU,MAAOyL,EAAMyI,YACbe,kBAAmBV,EACnBJ,MAAOA,EACP3H,UAAWzI,EAAUlF,YAAa4M,EAAMgB,e,2BCnGpD,MAAMyI,GAAsBzJ,GAEpB,cAAC0J,EAAA,EAAD,IAAc1J,EAAd,SACKA,EAAK,WAwBH,SAAS2J,GAAa3J,GACjC,MAAM1H,EAAYzF,cACZa,EAASC,cAyBf,OACI,cAAC2N,EAAA,EAAD,CAAKpH,GAAI,CAAE8O,EAAG,EAAG3O,MAAO,KAAxB,SACI,eAACgG,EAAA,EAAD,CAAauJ,WAAS,EAAtB,UACI,cAACC,EAAA,EAAD,UAAc7J,EAAM5N,QACpB,cAAC0X,GAAA,EAAD,CACIxM,MAAO0C,EAAM5N,MACbmC,MAAOyL,EAAM+J,YACbxM,SAtBMxD,IAClBzB,EAAU5F,OAAOwC,KAAK,UAAW,CAC7BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjB,CAACmB,EAAMG,QAAS6J,MAAMjQ,EAAM4C,OAAOpI,OAASwF,EAAM4C,OAAOpI,MAAQ0V,OAAOlQ,EAAM4C,OAAOpI,SAGzF+D,EAAU5F,OAAOwC,KAAK,SAAU,CAC5BkL,OAAQ,YAAc9H,EAAUhF,SAAS0O,UAAU,EAAG,IACtDxK,UAAWwI,EAAMnB,YAGrBnL,EAAOK,OAAO,qBAAuBiM,EAAMnB,UAAY,SAAW9E,EAAM4C,OAAOpI,QAWnEwM,UAAWzI,EAAUlF,YAAa4M,EAAMgB,OAJ5C,SAKKL,OAAOC,KAAKZ,EAAMkK,MAAMtO,KAAK+B,GAC1B,cAAC8L,GAAD,CAAoBlV,MAAOoJ,EAA3B,SACKqC,EAAMkK,KAAKvM,cC/CxC,IA2FewM,GA3FY,SAACnK,GAAW,IAAD,EACI/M,oBAAS,GADb,mBAC3BmX,EAD2B,KACfC,EADe,OAEApX,oBAAS,GAFT,mBAE3B+N,EAF2B,KAEnB2B,EAFmB,OAGA1P,mBAAS,IAHT,mBAG3B+L,EAH2B,KAGhBsL,EAHgB,OAIFrX,mBAAS,GAJP,mBAI3BiM,EAJ2B,KAIjBqL,EAJiB,OAKFtX,mBAAS,GALP,mBAK3BgM,EAL2B,KAKjBuL,EALiB,KAO5BlS,EAAYzF,cAsDlB,OAlCAe,qBAAU,WAEDoM,EAAM6E,UACPkD,SAASC,eAAehI,EAAMnB,WAAW5D,MAAM0G,KAAO,UAG1D,IAAMvB,EAAS,SAACzL,GACRA,EAAQ6C,YAAcwI,EAAMnB,YAC5B8D,GAAgB,GAChB0H,EAAgB1V,EAAQyL,OAAOqK,MAC/BD,EAAY7V,EAAQyL,OAAOnB,UAC3BsL,EAAY5V,EAAQyL,OAAOlB,UAC3BoL,EAAa3V,EAAQyL,OAAOpB,aAepC,OAVA1G,EAAU5F,OAAOwC,KAAK,UAAW,CAC7BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjBoE,WAAW,IAGf3K,EAAU5F,OAAOwC,KAAK,YAAa8K,EAAMnB,WAEzCvG,EAAU5F,OAAOwB,GAAG,SAAUkM,GAEvB,WACH9H,EAAU5F,OAAOyB,mBAAmB,SAAUiM,MAInD,CAAC9H,EAAU5F,SAGV,cAACwQ,EAAA,EAAD,CAAetJ,MAAOA,IAAtB,SACI,sBAAKH,UAAWC,IAAOgR,SAAvB,UACI,cAACC,EAAA,EAAD,CAAY7Q,QA/CF,WAClBkG,EAAM4K,YAAY5K,EAAM6E,SAEpB7E,EAAM6E,QACNkD,SAASC,eAAehI,EAAMnB,WAAW5D,MAAM0G,KAAO,SAEtDoG,SAASC,eAAehI,EAAMnB,WAAW5D,MAAM0G,KAAO,UAyClD,SACI,cAAC,IAAD,CAAsBzH,GAAI,CAAE8C,SAAU,QAE1C,cAAC,EAAD,CAAQ6B,UAAWmB,EAAMnB,UAAWxE,MAAO,QAASD,OAAQ,UAC3D4F,EAAM6E,SAEH,sBAAKpL,UAAWC,IAAOgR,SAAvB,UACI,eAACpJ,EAAA,EAAD,CAAKpH,GAAI,CAAE8O,EAAG,EAAG3O,MAAO,KAAxB,UAAgC,IAAC,6BAAI,aAAa,OAClD,cAAC,GAAD,CAAQjI,MAAM,aAAayM,UAAWmB,EAAMnB,UAAWmC,OAAQA,EAAQb,OAAO,YAAY4J,YAAa/K,EAAWkL,KA/DnH,CACfW,EAAG,iBACHC,EAAG,gBACHC,EAAG,iBACHC,GAAI,oBA4DY,cAAC,EAAD,CAAQnM,UAAWmB,EAAMnB,UAAWiD,aAAcsI,EAAYpJ,OAAQA,EAAQW,KAAK,QAAQO,MAAM,OAAO/B,OAAO,SAC/G,cAAC,EAAD,CAAQ/N,MAAM,WAAWyM,UAAWmB,EAAMnB,UAAWmC,OAAQA,EAAQyH,YAAavJ,EAAU0J,KAAM,EAAGC,IAAK,EAAG1I,OAAO,aACpH,cAAC,EAAD,CAAQ/N,MAAM,WAAWyM,UAAWmB,EAAMnB,UAAWmC,OAAQA,EAAQyH,YAAaxJ,EAAU2J,IAAK,EAAGC,IAAK,KAAM1I,OAAO,sBCxD/H8K,GA9BM,SAACjL,GAAU,MAEA/M,oBAAS,GAFT,mBAEvB4R,EAFuB,KAEd+F,EAFc,KAG1BvQ,EAAQwJ,OAAOqH,WAQnB,OANIrG,EACFxK,EAAQ,SACEwK,IACVxK,EAAQ,SAIR,cAAC,EAAD,CACEb,GAAIwG,EAAMxG,GACVwL,cAAe,CAAChF,EAAMxG,IACtBzE,OAAQiL,EAAM5N,MACduT,IAAK3F,EAAM2F,IACXhE,KAAM3B,EAAM2B,KACZtH,MAAOA,EACPD,OAAQ,QAPV,SASE,cAAC,GAAD,CACEyE,UAAWmB,EAAMxG,GACjBa,MAAOA,EACPwK,QAASA,EACT+F,WAAYA,O,8DCULO,GAnCQ,SAACnL,GAgBpB,OACI,qBAAKvG,UAAWC,KAAO0R,KAAvB,SACI,sBAAK3R,UAAWC,KAAO2R,QAAvB,UACI,cAACzH,EAAA,EAAD,CAAQ1J,GAAI,CAAE8C,SAAU,GAAIS,YAAa,GAAI6N,WAAY,EAAGC,aAAc,IAAMC,UAAW,cAAC,KAAD,IAA3F,SAA6H,oBAC7H,sBAAK/R,UAAWC,KAAOoQ,OAAvB,UACI,cAAC,GAAD,CAAQ5P,GAAI,CAAEuR,OAAQ,KAAMF,cAAe,IAAMnZ,MAAM,oBAAoByM,UAAWmB,EAAMnB,UAAWmC,OAAQhB,EAAMgB,OAAQb,OAAO,cAAc4J,YAAa/J,EAAM0L,YAAaxB,KAnB1K,CACpByB,IAAK,IACLC,IAAK,IACLC,IAAM,IACNC,IAAM,OAgBM,cAAC,GAAD,CAAQ1Z,MAAM,kBAAkByM,UAAWmB,EAAMnB,UAAWmC,OAAQhB,EAAMgB,OAAQb,OAAO,aAAa4J,YAAa/J,EAAM+L,WAAY7B,KAZ9H,CACnB2B,IAAM,EACNG,IAAM,EACNC,IAAO,eCwIAC,GA9II,SAAClM,GAAW,IAAD,EACc/M,oBAAS,GADvB,mBACnByP,EADmB,KACLC,EADK,OAEY1P,oBAAS,GAFrB,mBAEnBkZ,EAFmB,KAENC,EAFM,OAGYnZ,mBAAS,KAHrB,mBAGnByY,EAHmB,KAGNW,EAHM,OAIUpZ,mBAAS,KAJnB,mBAInB8Y,EAJmB,KAIPO,EAJO,OAKUrZ,mBAAS,GALnB,mBAKnBsZ,EALmB,KAKPC,EALO,OAMFvZ,mBAAS,UANP,mBAMnBwZ,EANmB,KAMbC,EANa,KAQpBpU,EAAYzF,cACZa,EAASC,cAGTgZ,EAAgB,WAClB3M,EAAM4K,YAAY5K,EAAM6E,SAEpB7E,EAAM6E,SACNkD,SAASC,eAAe,aAAa/M,MAAM4K,QAAU,QACrDkC,SAASC,eAAe,QAAQ/M,MAAM4K,QAAU,SAEhDkC,SAASC,eAAe,aAAa/M,MAAM4K,QAAU,OACrDkC,SAASC,eAAe,QAAQ/M,MAAM4K,QAAU,UAsExD,OAlEAjS,qBAAU,WAEFoM,EAAM6E,SACNkD,SAASC,eAAe,aAAa/M,MAAM4K,QAAU,OACrDkC,SAASC,eAAe,QAAQ/M,MAAM4K,QAAU,UAEhDkC,SAASC,eAAe,aAAa/M,MAAM4K,QAAU,QACrDkC,SAASC,eAAe,QAAQ/M,MAAM4K,QAAU,QAGpD,IAAMzF,EAAS,SAACzL,GAERA,EAAQ6C,YAAcwI,EAAMnB,YAC5B8D,GAAgB,GAChByJ,EAAezX,EAAQyL,OAAOyC,MAC9B2J,EAAc7X,EAAQyL,OAAOwM,MAI7BjY,EAAQ6C,YAAcwI,EAAM6M,aAC5BR,EAAe1X,EAAQyL,OAAOsL,aAC9BY,EAAc3X,EAAQyL,OAAO2L,cAM/B3E,EAAO,SAACzS,GACV,GAAIA,EAAQ6C,YAAcwI,EAAM6M,WAAY,CACxC,IAAIC,EAASnY,EAAQyS,KAAKA,KAC1B,IAAM0F,EAASA,EAAOC,QAAQ,GAAK,SAAQ,MAAOjZ,GAAKgZ,EAAS,SAChEJ,EAAQI,KA2BhB,OAtBAxU,EAAU5F,OAAOwC,KAAK,UAAW,CAC7BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjBoE,WAAW,IAGf3K,EAAU5F,OAAOwC,KAAK,UAAW,CAC7BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAM6M,WACjB5J,WAAW,IAKfvP,EAAO2D,eAAe2I,EAAMnB,WAAW,GAEvCvG,EAAU5F,OAAOwC,KAAK,YAAa8K,EAAMnB,WAEzCvG,EAAU5F,OAAOwB,GAAG,SAAUkM,GAE9B9H,EAAU5F,OAAOwB,GAAG,OAAQkT,GAErB,WACH9O,EAAU5F,OAAOyB,mBAAmB,SAAUiM,GAC9C9H,EAAU5F,OAAOyB,mBAAmB,OAAQiT,MAIjD,CAAC9O,EAAU5F,SAGV,eAACwQ,EAAA,EAAD,CAAetJ,MAAOA,IAAtB,UAEI,sBAAKJ,GAAI,OAAQyB,MAAO,CAAE4K,QAAS,QAAnC,UACI,sBAAKpM,UAAWC,KAAO0R,KAAvB,UACI,cAAC1J,EAAA,EAAD,CAAYlI,GAAG,OAAOS,QAAQ,KAA9B,SAAoCwS,IACpC,cAAC9B,EAAA,EAAD,CAAY7Q,QAAS6S,EAArB,SACI,cAAC,IAAD,CAAsBzS,GAAI,CAAE8C,SAAU,WAG9C,sBAAKvD,UAAWC,KAAOsT,QAAvB,UACI,cAACpJ,EAAA,EAAD,CAAQ1J,GAAI,CAAE8C,SAAU,IAAMwO,UAAW,cAAC,KAAD,IAAzC,SAAoE,qBACpE,cAAC,EAAD,CAAQpZ,MAAM,cAAcyM,UAAWmB,EAAMnB,UAAWmC,OAAQ0B,EAAc+F,YAAa8D,EAAY3D,IAAK,EAAGC,IAAK,IAAK1I,OAAO,WAGpI,qBAAK1G,UAAWC,KAAOkI,OAAvB,SACI,cAAC,EAAD,CAAQ/C,UAAWmB,EAAMnB,UAAWmC,OAAQ0B,EAAcZ,aAAcqK,EAAac,MAAM,MAAMC,IAAI,KAAK/M,OAAO,aAErH,cAAC,GAAD,CAAgBa,QAAQ,EAAMnC,UAAWmB,EAAM6M,WAAYd,WAAYA,EAAYL,YAAaA,OAIpG,sBAAKlS,GAAI,YAAT,UACI,sBAAKC,UAAWC,KAAOyT,UAAvB,UACI,cAACzL,EAAA,EAAD,CAAYlI,GAAG,OAAOS,QAAQ,KAA9B,SAAoCwS,IACpC,cAAC9B,EAAA,EAAD,CAAY7Q,QAAS6S,EAArB,SACI,cAAC,IAAD,CAAsBzS,GAAI,CAAE8C,SAAU,WAI9C,sBAAKvD,UAAWC,KAAOsT,QAAvB,UACI,cAACpJ,EAAA,EAAD,CAAQ1J,GAAI,CAAE8C,SAAU,IAAMwO,UAAW,cAAC,KAAD,IAAzC,SAAoE,qBACpE,cAAC,EAAD,CAAQpZ,MAAM,cAAcyM,UAAWmB,EAAMnB,UAAWmC,OAAQ0B,EAAc+F,YAAa8D,EAAY3D,IAAK,EAAGC,IAAK,IAAK1I,OAAO,WAGpI,qBAAK1G,UAAWC,KAAO0T,WAAvB,SACI,cAAC,EAAD,CAAQvO,UAAWmB,EAAMnB,UAAWmC,OAAQ0B,EAAcZ,aAAcqK,EAAac,MAAM,MAAMC,IAAI,KAAK/M,OAAO,oBCxGtHkN,GA5BA,SAACrN,GACZ,IAAI3F,EAAQwJ,OAAOqH,WAQnB,OANIlL,EAAM6E,QACNxK,EAAQ,QACA2F,EAAM6E,UACdxK,EAAQ,SAIR,cAAC,EAAD,CACIb,GAAIwG,EAAMxG,GACVwL,cAAe,CAAChF,EAAMsN,gBAAiBtN,EAAMuN,qBAC7CxY,OAAQiL,EAAM5N,MACduT,IAAK3F,EAAM2F,IACXhE,KAAM3B,EAAM2B,KACZvH,OAAO,QACPC,MAAOA,EAPX,SASI,cAAC,GAAD,CACIwE,UAAWmB,EAAMsN,gBACjBT,WAAY7M,EAAMuN,oBAClB1I,QAAS7E,EAAM6E,QACf+F,WAAY5K,EAAM4K,gB,qBC6EnB4C,OAnGKxN,IAClB,MAAOyN,EAAiBC,GAAsBza,mBAAS,IAChDyP,EAAcC,GAAmB1P,oBAAS,IAC1C0a,EAAUC,GAAe3a,mBAAS,GACzC,IAAIiK,EAEJ,MAAMxJ,EAASC,cACT8Q,EAAWC,cACXpM,EAAYzF,cAElBe,qBAAU,KACR,MAAMwM,EAAUzL,IACVA,EAAQ6C,YAAcwI,EAAMnB,YAC9B8D,GAAgB,GAChBiL,EAAYjZ,EAAQyL,OAAOyN,UAC1BlZ,EAAQyL,OAAO2C,KAAQJ,GAAgB,GAASA,GAAgB,KAcrE,OAVArK,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjBoE,WAAW,IAGb3K,EAAU5F,OAAOwC,KAAK,YAAa8K,EAAMnB,WAEzCvG,EAAU5F,OAAOwB,GAAG,SAAUkM,GAEvB,KACL9H,EAAU5F,OAAOyB,mBAAmB,SAAUiM,MAK/C,CAAC9H,EAAU5F,SAEd,MAAMob,EAAgBpN,GAAS3G,IAC7BA,EAAMuE,iBACNpB,EAAY,EAMM,KAHEA,EAAV,SAATwD,GAAgC,EAAIuJ,OAAOwD,GAA+BxD,OAAOwD,KAIhFnV,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjBkP,KAAM7Q,EACN5C,MAAOhC,EAAUpF,YAGnBoF,EAAU5F,OAAOwC,KAAK,SAAU,CAC9BkL,OAAQ,YAAc9H,EAAUhF,SAAS0O,UAAU,EAAG,IACtDxK,UAAWwI,EAAMnB,aAGnB4F,EAASmC,gBAAgB,6CAA8C,WAEzElT,EAAOK,OAAO,iCAAmCiM,EAAMnB,UAAY,OAAS4O,EAAkB,YAWhG,OACE,uBAAMhU,UAAWC,KAAOsU,WAAY/S,MAAO,CAAE0K,IAAK3F,EAAM2F,IAAM,KAAMhE,KAAM3B,EAAM2B,KAAO,MAAvF,UACE,sBAAKlI,UAAWC,KAAOsU,WAAvB,UACE,+BAAO/D,OAAO0D,KACd,uBACEhQ,KAAK,SACLiL,IAAI,IACJC,IAAI,MACJtU,MAAOkZ,EACPlQ,SAhBuBxD,IAEzBA,EAAM4C,OAAOpI,OAAS,GACxBmZ,EAAmB3T,EAAM4C,OAAOpI,aAgBhC,wBAAQuF,QAASgU,EAAc,QAASrU,UAAWC,KAAOuU,SAAUlN,UAAWzI,EAAUlF,YAAasP,EAAtG,SACE,cAAC,IAAD,CAAqB3H,KAAM,OAE7B,wBAAQjB,QAASgU,EAAc,SAAUrU,UAAWC,KAAOwU,UAAWnN,UAAWzI,EAAUlF,YAAasP,EAAxG,SACE,cAAC,IAAD,CAAsB3H,KAAM,WC3GrB,OAA0B,2CCsC1BoT,GApBA,SAACnO,GACd,OACE,cAAC,EAAD,CACExG,GAAIwG,EAAMxI,UACVwN,cAAe,CAAChF,EAAMxI,WACtBzC,OAAQiL,EAAM5N,MACduT,IAAK3F,EAAM2F,IACXhE,KAAM3B,EAAM2B,KACZtH,MAAM,QACND,OAAO,QACPiM,WAAY+H,GARd,SAUE,cAAC,GAAD,CACEvP,UAAWmB,EAAMxI,UACjBmO,IAAI,KACJhE,KAAK,WCjCE,OAA0B,uCCyE1BR,GAxDI,SAACnB,GAAW,IAAD,EACY/M,oBAAS,GADrB,mBACrByP,EADqB,KACPC,EADO,OAEI1P,oBAAS,GAFb,mBAErBmX,EAFqB,KAETiE,EAFS,KAItB/V,EAAYzF,cA4BlB,OA1BAe,qBAAU,WACR,IAAMwM,EAAS,SAACzL,GACVA,EAAQ6C,YAAcwI,EAAMnB,YAC9B8D,GAAgB,GAChB0L,EAAU1Z,EAAQyL,OAAOyC,QAc7B,OAVAvK,EAAU5F,OAAOwC,KAAK,UAAW,CAC/BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjBoE,WAAW,IAGb3K,EAAU5F,OAAOwC,KAAK,YAAa8K,EAAMnB,WAEzCvG,EAAU5F,OAAOwB,GAAG,SAAUkM,GAEvB,WACL9H,EAAU5F,OAAOyB,mBAAmB,SAAUiM,MAI/C,CAAC9H,EAAU5F,SAIZ,cAACwQ,EAAA,EAAD,CAAetJ,MAAOA,IAAtB,SACE,qBAAKqB,MAAO,CACVyE,SAAU,WACVrF,MAAO,QACPD,OAAQ,OACRkU,OAAQ,oBACRnU,aAAc,OACdoU,UAAW,SACX5I,IAAK,OACLhE,KAAM,QARR,SAUE,cAACL,EAAA,EAAD,CAAKpH,GAAI,CAAEuH,GAAI,QAAf,SACE,cAAC,EAAD,CAAQ5C,UAAWmB,EAAMnB,UAAWmC,OAAQ0B,EAAcZ,aAAcsI,EAAYzI,KAAK,MAAMO,MAAM,KAAK/B,OAAO,kBC1B5GqO,GAnBD,SAACxO,GAEb,OACE,cAAC,EAAD,CACExG,GAAIwG,EAAMxG,GACVwL,cAAe,CAAChF,EAAMxI,WACtBzC,OAAQiL,EAAM5N,MACduT,IAAK3F,EAAM2F,IACXhE,KAAM3B,EAAM2B,KACZvH,OAAO,QACPC,MAAM,QACNgM,WAAYoI,GARd,SAUE,cAACC,GAAD,CACE7P,UAAWmB,EAAMxI,eC/BV,OAA0B,0CC+C1BmX,GA3BD,SAAC3O,GACb,OACE,eAAC,EAAD,CACExG,GAAIwG,EAAMxG,GACVwL,cAAe,CAAChF,EAAM4O,gBAAiB5O,EAAM6O,cAC7C9Z,OAAQiL,EAAM5N,MACduT,IAAK3F,EAAM2F,IACXhE,KAAM3B,EAAM2B,KACZvH,OAAO,QACPC,MAAM,QACNgM,WAAYyI,GARd,UAWE,cAAC,GAAD,CACEjQ,UAAWmB,EAAM6O,aACjBlJ,IAAI,KACJhE,KAAK,QAGP,cAAC,GAAD,CACE9C,UAAWmB,EAAM4O,gBACjBjJ,IAAI,KACJhE,KAAK,YC1CE,OAA0B,2CCuC1BoN,OArBA/O,GAEX,cAAC,EAAD,CACExG,GAAIwG,EAAMxI,UACVwN,cAAe,CAAChF,EAAMxI,WACtBzC,OAAQiL,EAAM5N,MACduT,IAAK3F,EAAM2F,IACXhE,KAAM3B,EAAM2B,KACZtH,MAAM,QACND,OAAO,QACPiM,WAAY2I,GARd,SAUE,cAAC,GAAD,CACEnQ,UAAWmB,EAAMxI,UACjBmO,IAAI,KACJhE,KAAK,UC8GEsN,GArIiB,SAACjP,GAC/B,IAAIqE,EAAS,kBAD4B,EAEXpR,oBAAS,GAFE,mBAElC4R,EAFkC,KAEzB+F,EAFyB,OAGC3X,oBAAS,GAHV,mBAGlCic,EAHkC,KAGnBC,EAHmB,KAKrC/U,EAASyJ,OAAOuL,YAChB/U,EAAQwJ,OAAOqH,WACfmE,EAAYhV,EAAQ,EACpBiV,EAAU9S,OAAOpC,EAAUA,EAAS,EAAI,KACxCmV,EAAgB/S,OAAOpC,EAAUA,EAAS,KAC1CoV,EAAYhT,OAAOpC,EAAUA,EAAS,MACtCqV,EAAWjT,OAAOnC,EAAqB,IAAZgV,GAC3BK,EAAalT,OAAOnC,EAAqB,IAAZgV,GAC7BM,EAAYnT,OAAOnC,EAAqB,IAAZgV,GAC5BO,EAAkBpT,OAAOnC,EAAqB,GAAZgV,GAClCQ,EAAUrT,OAAOnC,EAAqB,MAAZgV,GAE9B,OACE,gCAEGrP,EAAM8P,SAAS7Y,IAAI,YAClB,cAAC,GAAD,CACE7E,MAAM,mBACNoH,GAAI,UACJqV,aAAc,cACdD,gBAAiB,iBACjBmB,YAAa,EACbC,eAAgB,EAChB3L,OAAQA,EACRsB,IAAK2J,EACL3N,KAAM8N,IAITzP,EAAM8P,SAAS7Y,IAAI,aAClB,cAAC,GAAD,CACE7E,MAAM,wBACNoF,UAAW,WACX6M,OAAQA,EACRsJ,SAAU,EACVhI,IAAK6J,EACL7N,KAAM+N,IAIT1P,EAAM8P,SAAS7Y,IAAI,mBAClB,cAAC,GAAD,CACE7E,MAAM,6BACNoF,UAAW,iBACX6M,OAAQA,EACRsJ,SAAU,EACVhI,IAAK6J,EACL7N,KAAMgO,IAIT3P,EAAM8P,SAAS7Y,IAAI,oBAClB,cAAC,GAAD,CACE7E,MAAM,wBACNoF,UAAW,kBACX6M,OAAQA,EACRsJ,SAAU,EACVhI,IAAK4J,EACL5N,KAAM+N,IAIT1P,EAAM8P,SAAS7Y,IAAI,iBAClB,cAAC,GAAD,CACE7E,MAAM,kBACNoH,GAAI,eACJqV,aAAc,mBACdD,gBAAiB,sBACjBvK,OAAQA,EACRsB,IAAK6J,EACL7N,KAAMiO,IAIT5P,EAAM8P,SAAS7Y,IAAI,sBAClB,cAAC,GAAD,CACE7E,MAAM,eACNoH,GAAI,oBACJhC,UAAW,eACX6M,OAAQA,EACRsB,IAAK2J,EACL3N,KAAMgO,IAIT3P,EAAM8P,SAAS7Y,IAAI,WAClB,cAAC,GAAD,CACE7E,MAAM,SACNoH,GAAI,SACJ6K,OAAQA,EACRsB,IAAK4J,EACL5N,KAAMkO,EACNhL,QAASA,EACT+F,WAAaA,IAIhB5K,EAAM8P,SAAS7Y,IAAI,WAClB,cAAC,GAAD,CACE7E,MAAM,wBACNoH,GAAI,SACJ8T,gBAAiB,SACjBC,oBAAqB,aACrBlJ,OAAQA,EACRsB,IAAK4J,EACL5N,KAAMkO,EACNhL,QAASqK,EACTtE,WAAauE,IAKhBnP,EAAM8P,SAAS7Y,IAAI,wBAClB,cAAC,EAAD,CACE7E,MAAM,4BACNoF,UAAW,sBACXuP,WAAY,UACZC,WAAY,SACZC,YAAa,WACb5C,OAAQA,EACRsB,IAAK6J,EACL7N,KAAM0N,QC/EDY,OAxCgBjQ,IAC3B,MAAM1H,EAAYzF,cA4BlB,OA1BAe,qBAAU,KACNmU,SAASC,eAAehI,EAAMnB,WAAW5D,MAAMiV,UAAY,iBAE3D,MAAM9P,EAAUzL,IACRA,EAAQ6C,UAAcwI,EAAMnB,WAepC,OAVAvG,EAAU5F,OAAOwC,KAAK,UAAW,CAC7BuC,OAAQa,EAAUhF,SAClBkE,UAAWwI,EAAMnB,UACjBoE,WAAW,IAGf3K,EAAU5F,OAAOwC,KAAK,YAAa8K,EAAMnB,WAEzCvG,EAAU5F,OAAOwB,GAAG,SAAUkM,GAEvB,KACH9H,EAAU5F,OAAOyB,mBAAmB,SAAUiM,MAInD,CAAC9H,EAAU5F,SAGV,cAAC,EAAD,CAAQmM,UAAWmB,EAAMnB,UAAWxE,MAAO2F,EAAM3F,MAAOD,OAAQ4F,EAAM5F,OAAQa,MAAO,CAAEd,aAAc,MAAOgW,eAAgB,QAASxK,IAAK,OCAnIyK,GArCG,WACd,IAAI/V,EAAQwJ,OAAOqH,WACf9Q,EAAS,EAeb,OAbI,EAAIC,GAASA,EAAQ,KACrBA,EAAQ,QACRD,EAAS,SAEJ,IAAMC,GAASA,EAAQ,KAC5BA,EAAQ,QACRD,EAAS,UAETC,EAAQ,QACRD,EAAS,SAKT,cAAC,EAAD,CACIrF,OAAQ,yBACR4Q,IAAK,MACLhE,KAAM,MACNnI,GAAI,WACJwL,cAAe,CAAC,YAChB3K,MAAOA,EACPD,OAAQA,EACRiK,OAAQ,OACRE,OAAQ,OATZ,SAWI,cAAC,GAAD,CACI1F,UAAW,WACXxE,MAAOA,EACPD,OAAQA,O,qBC1CT,OAA0B,sCCyB1BiW,OAfW,IAGtB,sBAAK5W,UAAWC,KAAOgK,YAAazI,MAAO,CAAEqV,gBAAiB,QAAWC,GAAS,MAAlF,UACC,43BAGyB,mBAAGC,KAAK,6CAAR,SAAqD,aAAY,OAAI,mBAAGA,KAAK,qCAAR,SAA6C,gBAE1I,4BAAG,qDCmBMC,GA5BI,WACf,IAAIpW,EAAQwJ,OAAOqH,WACf9Q,EAAS,EAWb,OATI,EAAIC,GAASA,EAAQ,KACrBA,EAAQ,QACRD,EAAS,UAGTC,EAAQ,QACRD,EAAS,SAIT,cAAC,EAAD,CACIrF,OAAO,mBACPyE,GAAG,OACHmM,IAAI,MACJhE,KAAK,MACLtH,MAAOA,EACPD,OAAQA,EACRiK,OAAQ,OACRE,OAAQ,OARZ,SAUI,cAAC,GAAD,OCfNmM,GAAoB,WACxB,IAAMpY,EAAYzF,cACZ4R,EAAWC,cACXhR,EAASC,cA2Cf,OAzCAC,qBAAU,WAER,IAAMqB,EAAO,SAACqF,GACZmK,EAASmC,gBAAgB,yBAA0B,WACnDtO,EAAU5F,OAAOwC,KAAK,SAAUoD,EAAUhF,UAC1CgF,EAAUjF,cAAa,GACvBiF,EAAUnF,aAAamH,IAInBhF,EAAoB,SAACX,GACzBjB,EAAO0E,wBAAwBzD,IAI3Bgc,EAAa,WACjBrY,EAAUjF,cAAa,GACvBoR,EAASmC,gBAAgB,wCAAyC,YAcpE,OAXAtO,EAAU5F,OAAOwB,GAAG,aAAcyc,GAElCrY,EAAU5F,OAAOwB,GAAG,OAAQe,GAE5BqD,EAAU5F,OAAOwB,GAAG,oBAAqBoB,GAGpCgD,EAAU5F,OAAOU,WACpBqR,EAASmC,gBAAgB,wBAAyB,SAG7C,WACLtO,EAAU5F,OAAOyB,mBAAmB,oBAAqBmB,GACzDgD,EAAU5F,OAAOyB,mBAAmB,aAAcwc,GAClDrY,EAAU5F,OAAOyB,mBAAmB,OAAQc,MAK7C,CAACqD,EAAU5F,SAGZ,eAAC,WAAD,WACGgB,EAAOqC,gBAAkB,cAAC,GAAD,IACzBrC,EAAO+C,SAAW,cAAC,GAAD,IACnB,cAAC,GAAD,CACEma,aAAcld,EAAOqD,mBACrB+Y,SAAUpc,EAAOmC,oBAKVsF,mBAAKuV,GAAmBtV,Y,yHC5DvC,MAAMyV,EAAkB7Q,IACtB,MAAM8Q,EAAe,CACnBxW,MAAO,QACPD,MAAO,QACPD,OAAQ,OACRsF,SAAU,WACViC,KAAM3B,EAAMN,SAAStI,EAAI,KACzBuO,IAAK3F,EAAMN,SAASqR,EAAI,KACxBb,UAAW,sBAEb,OAAO,eAACc,EAAA,EAAD,CAAMtR,SAAUM,EAAMN,SAAUzE,MAAO6V,EAAcG,YAAa,CAAC,EAAG,IAAtE,UAEL,qBACEhW,MAAO,CACLb,OAAQ,QACRC,MAAO,MACP6W,WAAY,kBACZnL,MAAO,UAIX,sBAAK9K,MAAO,CAAE,WAAc,QAA5B,UACE,+BACE,4BAAI+E,EAAM5N,UAEZ,uBACC4N,EAAMmR,YACP,uBACCnR,EAAMI,cAYEjF,qBAAK0V,EAAgBzV,WC/C7B,SAASgW,EAAMpR,GACNqR,mBAAd,MACM,MAAEC,EAAF,UAASC,GAAcC,YAAQ,wBACrC,OACE,0BAAWxR,EAAOyR,QAAS,KAA3B,SACE,wBAAO/Q,KAAK,QAAZ,UACE,wBAAOA,KAAK,mBAAZ,UAGE,cAAC,IAAD,CACEhB,SAAU,EAAE,IAAM,KAAO,IACzBgS,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,CAAC,IAAM,IAAM,KAHtB,SAKE,sCACEC,UAAW,EACXC,UAAW,GACXC,aAAc,EACdC,UAAW,GACXC,mBAAoB,EACpBC,IAAK,IACLC,gBAAiB,GACjB5X,MAAO,UACP6X,iBAAkB,UAClBC,oBAAqB,MAIzB,cAAC,IAAD,CACE1S,SAAU,EAAE,IAAM,IAAM,KACxBgS,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,CAAC,GAAK,GAAK,MAHpB,SAKE,sCACEC,UAAW,EACXC,UAAW,GACXC,aAAc,EACdC,UAAW,GACXC,mBAAoB,EACpBC,IAAK,IACLC,gBAAiB,GACjB5X,MAAO,UACP6X,iBAAkB,UAClBC,oBAAqB,MAIzB,cAAC,IAAD,CACE1S,SAAU,CAAC,GAAK,IAAM,KACtBgS,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,CAAC,GAAK,GAAK,MAHpB,SAKE,sCACEC,UAAW,EACXC,UAAW,GACXC,aAAc,EACdC,UAAW,GACXC,mBAAoB,EACpBC,IAAK,IACLC,gBAAiB,GACjB5X,MAAO,UACP6X,iBAAkB,UAClBC,oBAAqB,MAMzB,cAAC,IAAD,CACE1S,SAAU,CAAC,GAAK,KAAO,KACvBgS,KAAM,CAAC,EAAG,EAAG,GACb/D,SAAU,CAAC,EAAG,EAAG0E,KAAKC,GAAK,GAC3BX,MAAO,CAAC,IAAM,IAAM,KAJtB,SAME,sCACEC,UAAW,EACXC,UAAW,GACXC,aAAc,EACdC,UAAW,GACXC,mBAAoB,EACpBC,IAAK,IACLC,gBAAiB,GACjB5X,MAAO,UACP6X,iBAAkB,UAClBC,oBAAqB,SAI3B,wBACE1R,KAAK,UACLhB,SAAU,CAAC,EAAE,EAAE,GACf6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,YALvB,UAQG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,EAAE,GAAK,EAAG,GAAItN,MAAM,mBAAmB+e,YAAY,gCAChG,sBACEzQ,KAAK,iBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMsB,eAAeD,SAC/BE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,WAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAEzD,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGrD,sBACEtS,KAAK,mBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM2B,iBAAiBN,SACjCE,SAAUtB,EAAU2B,aAGtB,sBACExS,KAAK,mBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM6B,iBAAiBR,SACjCE,SAAUtB,EAAU6B,YAIxB,wBACE1S,KAAK,SACLhB,SAAU,CAAC,EAAG,EAAG,GACjB6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,WALvB,UAQG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,EAAE,GAAK,GAAI,KAAMtN,MAAM,SAAS+e,YAAY,qCACzF,sBACEzQ,KAAK,YACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM+B,UAAUV,SAC1BE,SAAUtB,EAAU+B,aAGtB,sBACE5S,KAAK,cACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMiC,YAAYZ,SAC5BE,SAAUtB,EAAUuB,gBAGxB,wBACEpS,KAAK,QACLhB,SAAU,CAAC,EAAG,EAAG,GACjB6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,iBALvB,UAQG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,IAAK,GAAI,KAAOtN,MAAM,kBAAkB+e,YAAY,gCAClG,sBACEzQ,KAAK,YACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMkC,UAAUb,SAC1BE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,gBAChB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGrD,sBACEtS,KAAK,cACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMmC,YAAYd,SAC5BE,SAAUtB,EAAU2B,gBAIxB,uBACExS,KAAK,MACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMoC,IAAIf,SACpBE,SAAUtB,EAAUuB,WACpBP,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,sBARvB,UAWG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,IAAK,IAAM,IAAMtN,MAAM,eAAe+e,YAAY,0BAC/FnR,EAAM8P,SAAS7Y,IAAI,qBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,OAI7B,QAAnBhT,EAAM3J,UACP,kCACE,wBACIqK,KAAK,UACLhB,SAAU,CAAC,IAAM,GAAI,KACrB6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,wBALzB,UAQK5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAI,KAAOtN,MAAM,4BAA4B+e,YAAY,2BAC1G,sBACEzQ,KAAK,WACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMqC,SAAShB,SACzBE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,uBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGnD,sBACEtS,KAAK,aACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMsC,WAAWjB,SAC3BE,SAAUtB,EAAU2B,gBAGxB,cAAC,IAAD,CACExT,SAAU,CAAC,IAAM,KAAO,KACxBgS,KAAM,CAAC,EAAG,EAAG,GACb/D,SAAU,CAAC,GAAI0E,KAAKC,GAAK,EAAGD,KAAKC,GAAK,GACtCX,MAAO,CAAC,IAAM,IAAM,KAJtB,SAME,sCACEC,UAAW,EACXC,UAAW,GACXC,aAAc,EACdC,UAAW,GACXC,mBAAoB,EACpBC,IAAK,IACLC,gBAAiB,GACjB5X,MAAO,UACP6X,iBAAkB,UAClBC,oBAAqB,SAMT,OAAnBpS,EAAM3J,UACP,kCACE,sBACAqK,KAAK,YACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMuC,UAAUlB,SAC1BE,SAAUtB,EAAU/C,MALpB,SAOE,sCAAsBlU,MAAM,UAAUyY,aAAW,EAACC,QAAS,GAAKc,UAAQ,EAACC,kBAAmB,MAE9F,wBACErT,KAAK,MACLhB,SAAU,CAAC,IAAM,KAAO,KACxBiO,SAAU,CAAC0E,KAAKC,IAAK,KAAMD,KAAKC,IAChCX,MAAO,IACPY,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,wBAPvB,UAUG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAI,GAAItN,MAAM,4BAA4B+e,YAAY,2BACvG,sBACEzQ,KAAK,cACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM0C,YAAYrB,SAC5BE,SAAUtB,EAAU,oBAEtB,sBACE7Q,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM2C,cAActB,SAC9BE,SAAUtB,EAAU,kBALtB,SAOGvR,EAAM8P,SAAS7Y,IAAI,uBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,YAQnC,UAAnBhT,EAAM3J,UACP,kCACE,sBACEqK,KAAK,cACLiS,SAAUrB,EAAM4C,YAAYvB,SAC5BE,SAAUtB,EAAU/C,MACpB9O,SAAU,EAAE,IAAM,KAAO,KACzBiO,SAAU,CAAC,EAAG,GAAI0E,KAAKC,GAAK,GAC5BX,MAAO,IANT,SAQE,sCAAsBrX,MAAM,UAAUyY,aAAW,EAACC,QAAS,GAAKc,UAAQ,EAACC,kBAAmB,MAE9F,sBACErT,KAAK,YACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMuC,UAAUlB,SAC1BE,SAAUtB,EAAU/C,MALtB,SAOE,sCAAsBlU,MAAM,UAAUyY,aAAW,EAACC,QAAS,GAAKc,UAAQ,EAACC,kBAAmB,MAE9F,wBACErT,KAAK,UACLhB,SAAU,CAAC,EAAG,EAAG,GACjB6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,wBALvB,UAQG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAI,IAAMtN,MAAM,4BAA4B+e,YAAY,2BACzG,sBACEzQ,KAAK,WACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMqC,SAAShB,SACzBE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,uBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGnD,sBACEtS,KAAK,aACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMsC,WAAWjB,SAC3BE,SAAUtB,EAAU2B,aAEtB,cAAC,IAAD,CACExT,SAAU,CAAC,EAAG,KAAO,KACrBgS,KAAM,CAAC,EAAG,EAAG,GACb/D,SAAU,CAAC,GAAI0E,KAAKC,GAAK,EAAGD,KAAKC,GAAK,GACtCX,MAAO,CAAC,IAAM,IAAM,KAJtB,SAME,sCACEC,UAAW,EACXC,UAAW,GACXC,aAAc,EACdC,UAAW,GACXC,mBAAoB,EACpBC,IAAK,IACLC,gBAAiB,GACjB5X,MAAO,UACP6X,iBAAkB,UAClBC,oBAAqB,SAI3B,wBACE1R,KAAK,MACLhB,SAAU,CAAC,IAAM,KAAO,KACxBiO,SAAU,CAAC0E,KAAKC,IAAK,KAAMD,KAAKC,IAChCX,MAAO,IACPY,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,wBAPvB,UAUG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAI,GAAItN,MAAM,4BAA4B+e,YAAY,2BACvG,sBACEzQ,KAAK,cACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM0C,YAAYrB,SAC5BE,SAAUtB,EAAU,oBAEtB,sBACE7Q,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM2C,cAActB,SAC9BE,SAAUtB,EAAU,kBALtB,SAOGvR,EAAM8P,SAAS7Y,IAAI,uBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,YAOrC,SAAlBhT,EAAMrJ,SACR,yBAGoB,UAAlBqJ,EAAMrJ,SACN,kCACE,sBACE+J,KAAK,gBACLiS,SAAUrB,EAAM6C,cAAcxB,SAC9BE,SAAUtB,EAAU6C,SACpB1U,SAAU,EAAE,GAAK,KAAO,KACxBiO,SAAU,EAAE0E,KAAKC,GAAK,EAAGD,KAAKC,GAAK,EAAG,GACtCX,MAAO,IANT,SAQE,sCAAsBrX,MAAM,UAAUyY,aAAW,EAACC,QAAS,GAAKc,UAAQ,EAACC,kBAAmB,MAE9F,wBACErT,KAAK,UACLhB,SAAU,CAAC,IAAM,GAAI,KACrB6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,wBALvB,UAQG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAI,IAAMtN,MAAM,4BAA4B+e,YAAY,2BACzG,sBACEzQ,KAAK,WACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMqC,SAAShB,SACzBE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,uBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGnD,sBACEtS,KAAK,aACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMsC,WAAWjB,SAC3BE,SAAUtB,EAAU2B,gBAGxB,wBACExS,KAAK,MACLhB,SAAU,CAAC,EAAG,KAAO,KACrBiO,SAAU,CAAC0E,KAAKC,IAAK,KAAMD,KAAKC,IAChCX,MAAO,IACPY,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,wBAPvB,UAUG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAI,GAAItN,MAAM,4BAA4B+e,YAAY,2BACvG,sBACEzQ,KAAK,cACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM0C,YAAYrB,SAC5BE,SAAUtB,EAAU,oBAEtB,sBACE7Q,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM2C,cAActB,SAC9BE,SAAUtB,EAAU,kBALtB,SAOGvR,EAAM8P,SAAS7Y,IAAI,uBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,SAIrD,cAAC,IAAD,CACAtT,SAAU,CAAC,IAAM,KAAO,KACxBgS,KAAM,CAAC,EAAG,EAAG,GACb/D,SAAU,CAAC,GAAI0E,KAAKC,GAAK,EAAGD,KAAKC,GAAK,GACtCX,MAAO,CAAC,IAAM,IAAM,KAJpB,SAMA,sCACEC,UAAW,EACXC,UAAW,GACXC,aAAc,EACdC,UAAW,GACXC,mBAAoB,EACpBC,IAAK,IACLC,gBAAiB,GACjB5X,MAAO,UACP6X,iBAAkB,UAClBC,oBAAqB,SAMP,QAAlBpS,EAAMrJ,SACN,kCACE,sBACE+J,KAAK,cACLiS,SAAUrB,EAAM+C,YAAY1B,SAC5BE,SAAUtB,EAAU+C,OACpB5U,SAAU,EAAE,GAAK,KAAO,KACxBiO,SAAU,EAAE0E,KAAKC,GAAK,EAAGD,KAAKC,GAAK,EAAG,GACtCX,MAAO,IANT,SAQE,sCAAsBrX,MAAM,UAAUyY,aAAW,EAACC,QAAS,GAAKc,UAAQ,EAACC,kBAAmB,MAE9F,wBACErT,KAAK,UACLhB,SAAU,CAAC,IAAM,GAAI,KACrB6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,wBALvB,UAQG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,KAAM,IAAMtN,MAAM,4BAA4B+e,YAAY,2BAC3G,sBACEzQ,KAAK,WACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMqC,SAAShB,SACzBE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,uBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGnD,sBACEtS,KAAK,aACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMsC,WAAWjB,SAC3BE,SAAUtB,EAAU2B,gBAGxB,wBACExS,KAAK,MACLhB,SAAU,CAAC,EAAG,KAAO,KACrBiO,SAAU,CAAC0E,KAAKC,IAAK,KAAMD,KAAKC,IAChCX,MAAO,IACPY,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,wBAPvB,UAUG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAI,GAAItN,MAAM,4BAA4B+e,YAAY,2BACvG,sBACEzQ,KAAK,cACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM0C,YAAYrB,SAC5BE,SAAUtB,EAAU,oBAEtB,sBACE7Q,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM2C,cAActB,SAC9BE,SAAUtB,EAAU,kBALtB,SAOGvR,EAAM8P,SAAS7Y,IAAI,uBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,SAIrD,cAAC,IAAD,CACAtT,SAAU,CAAC,IAAM,KAAO,KACxBgS,KAAM,CAAC,EAAG,EAAG,GACb/D,SAAU,CAAC,GAAI0E,KAAKC,GAAK,EAAGD,KAAKC,GAAK,GACtCX,MAAO,CAAC,IAAM,IAAM,KAJpB,SAMA,sCACEC,UAAW,EACXC,UAAW,GACXC,aAAc,EACdC,UAAW,GACXC,mBAAoB,EACpBC,IAAK,IACLC,gBAAiB,GACjB5X,MAAO,UACP6X,iBAAkB,UAClBC,oBAAqB,SAO3B,wBACE1R,KAAK,kBACLhB,SAAU,EAAE,KAAM,IAAM,KACxB6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,aALvB,UAQG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAK,GAAItN,MAAM,wBAAwB+e,YAAY,8BACpG,sBACEzQ,KAAK,yBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMiD,uBAAuB5B,SACvCE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,YAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGnD,sBACEtS,KAAK,2BACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMkD,yBAAyB7B,SACzCE,SAAUtB,EAAU2B,aAEtB,sBACExS,KAAK,2BACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMmD,yBAAyB9B,SACzCE,SAAUtB,EAAU6B,YAIxB,sBACE1S,KAAK,sBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMoD,oBAAoB/B,SACpCE,SAAUtB,EAAUuB,WACpBpT,SAAU,EAAE,KAAM,KAAO,OAG3B,wBACEgB,KAAK,gBACLhB,SAAU,EAAE,IAAK,KAAO,KACxBiO,SAAU,CAAC,GAAI0E,KAAKC,GAAK,EAAG,GAC5BC,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,WANvB,UASG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAK,GAAItN,MAAM,wBAAwB+e,YAAY,sCACpG,sBACEzQ,KAAK,cACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMqD,YAAYhC,SAC5BE,SAAUtB,EAAU,gBALtB,SAOGvR,EAAM8P,SAAS7Y,IAAI,UAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGnD,sBACEtS,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMsD,cAAcjC,SAC9BE,SAAUtB,EAAU,kBALtB,SAOGvR,EAAM8P,SAAS7Y,IAAI,UAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGnD,sBACEtS,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMuD,cAAclC,SAC9BE,SAAUtB,EAAU,oBAEtB,sBACE7Q,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMwD,cAAcnC,SAC9BE,SAAUtB,EAAU,aAEtB,sBACE7Q,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMyD,cAAcpC,SAC9BE,SAAUtB,EAAU,gBAEtB,sBACE7Q,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM0D,cAAcrC,SAC9BE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,UAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,SAKrD,wBACEtS,KAAK,sBACLhB,SAAU,EAAE,KAAM,KAAO,MACzB6S,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,oBALvB,UAQG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAK,GAAItN,MAAM,wBAAwB+e,YAAY,0BACpG,sBACEzQ,KAAK,yBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM2D,uBAAuBtC,SACvCE,SAAUtB,EAAUuB,WALtB,SAOG9S,EAAM8P,SAAS7Y,IAAI,mBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAGnD,sBACEtS,KAAK,2BACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM4D,yBAAyBvC,SACzCE,SAAUtB,EAAU2B,gBAIxB,wBACExS,KAAK,cACLhB,SAAU,EAAE,IAAM,EAAG,KACrBiO,SAAU,CAAC,GAAI,KAAM,GACrB4E,cAAgBze,IACdA,EAAE0e,kBACFxS,EAAM4Q,aAAa,mBANvB,UASG5Q,EAAMzJ,UAAY,cAAC,EAAD,CAAgBmJ,SAAU,CAAC,EAAG,GAAK,GAAItN,MAAM,6BAA6B+e,YAAY,0BACzG,sBACEzQ,KAAK,iBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM,kBAAkBqB,SAClCE,SAAUtB,EAAU,kBALtB,SAOGvR,EAAM8P,SAAS7Y,IAAI,kBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAInD,sBACEtS,KAAK,mBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM,oBAAoBqB,SACpCE,SAAUtB,EAAU,kBALtB,SAOGvR,EAAM8P,SAAS7Y,IAAI,kBAClB,sCAAsBqD,MAAM,UAAUyY,aAAW,EAACC,QAAS,KAE3D,sCAAsB1Y,MAAM,UAAU0Y,QAAS,MAInD,sBACEtS,KAAK,mBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM,oBAAoBqB,SACpCE,SAAUtB,EAAU,uBAIxB,sBACE7Q,KAAK,mBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM6D,iBAAiBxC,SACjCE,SAAUtB,EAAUuB,aAGtB,sBACEpS,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM8D,cAAczC,SAC9BE,SAAUtB,EAAUuB,WACpBpT,SAAU,CAAC,IAAM,GAAI,KACrBiO,SAAU,EAAE0E,KAAKC,GAAI,KAAOD,KAAKC,MAKnC,sBACE5R,KAAK,cACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAM+D,YAAY1C,SAC5BE,SAAUtB,EAAUuB,aAGtB,sBACEpS,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMgE,cAAc3C,SAC9BE,SAAUtB,EAAU2B,aAGtB,sBACExS,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMiE,cAAc5C,SAC9BE,SAAUtB,EAAU,oBAGtB,sBACE7Q,KAAK,gBACL+R,YAAU,EACVC,eAAa,EACbC,SAAUrB,EAAMkE,cAAc7C,SAC9BE,SAAUtB,EAAU,yBAO9BC,IAAQiE,QAAQ,kBACDta,qBAAKiW,EAAOhW,W,gBC7wBZsa,IArEM,WACnB,IAAMhiB,EAASC,cACT2E,EAAYzF,cAElB,OAAIa,EAAOiC,iBAIP,aADA,CACC,IAAD,CACEsF,MAAO,CACLyE,SAAU,WACV2G,WAAY,+BACZhM,MAAO,OACPD,OAAQ,QAGVub,iBAAe,EACfC,aAAW,EAEXC,OAAQ,CAAEnW,SAAU,CAAC,EAAG,EAAG,GAAIoW,IAAK,IAXtC,SAcE,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,cAACC,EAAA,EAAD,CAAaC,MAAM,yBAEnB,cAACC,EAAA,EAAD,CAAejgB,WAAYvC,EAAOuC,aAElC,cAAC,EAAD,CACE2a,aAAcld,EAAOqD,mBACrB+Y,SAAUpc,EAAOmC,cACjBU,SAAU7C,EAAO6C,SACjBF,SAAU3C,EAAO2C,SACjB3D,OAAQ4F,EAAU5F,cAOxB,cAAC,IAAD,CACEuI,MAAO,CACLyE,SAAU,WACV2G,WAAY,+BACZhM,MAAO,OACPD,OAAQ,QAEVub,iBAAe,EACfE,OAAQ,CAAEnW,SAAU,CAAC,EAAG,EAAG,GAAIoW,IAAK,IARtC,SAUE,eAAC,WAAD,CAAUC,SAAU,KAApB,UAEE,cAACC,EAAA,EAAD,CAAaC,MAAM,yBAGnB,cAACE,EAAA,EAAD,W,iCCxEV,4DAaAC,IAASC,OACP,mCACE,cAAC,IAAD,MAEFtO,SAASC,eAAe,U,sSCjB1B,iFASO,MAAMpO,EAAQ0c,YAAY,CAC7BC,QAAS,CACLC,KAAM,OACNC,QAAS,CACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,cAabha,EAAayZ,YAAY,CAClCC,QAAS,CACLC,KAAM,OACNC,QAAS,CACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,SAGtB3N,QAAS,K,mBCtCblX,EAAOC,QAAU,CAAC,KAAO,yBAAyB,OAAS,2BAA2B,QAAU,4BAA4B,QAAU,4BAA4B,OAAS,2BAA2B,UAAY,8BAA8B,WAAa,iC,mBCA7PD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,6BAA6B,aAAe,6BAA6B,KAAO,qBAAqB,UAAY,4B,wJCG5K6kB,EAAelkB,0BAGd,SAAS8R,IACZ,OAAO5R,qBAAWgkB,GAaf,SAASC,EAAT,GAA6C,IAAb/jB,EAAY,EAAZA,SAAY,EACbC,oBAAS,GADI,mBACxC+jB,EADwC,KAC7BC,EAD6B,OAEvBhkB,mBAAS,IAFc,mBAExC8V,EAFwC,KAElCmO,EAFkC,OAGvBjkB,mBAAS,QAHc,mBAGxC0K,EAHwC,KAGlCwZ,EAHkC,KAKzC7e,EAAYzF,cAGlByF,EAAU5F,OAAOwB,GAAG,SAAS,SAAAuI,GACzBwa,GAAa,GACbC,EAAQza,EAAM2a,QACdD,EAAQ,YAIZ7e,EAAU5F,OAAOwB,GAAG,eAAe,SAACS,GAChCiS,EAAgBjS,EAAU,8BAA+B,WAI7D,IAAMiS,EAAkB,SAACyQ,EAASC,GAC9BJ,EAAQG,GACRF,EAAQG,GACRL,GAAcD,IAYlB,OACI,eAACF,EAAaxiB,SAAd,CACIC,MAAO,CACHyiB,YACApQ,mBAHR,UAMI,cAAC,IAAD,CAAUjM,KAAMqc,EAAWO,iBAAkB,IAAM3c,QAfvC,SAACb,EAAOyd,GACT,cAAXA,GAGJP,GAAa,IAWT,SACI,qBAAMhc,MAAO,CAAEyE,SAAU,QAASiG,IAAK,QAASzD,MAAO,QAAvD,SACI,cAAC,IAAD,CAAOjI,QAAQ,SAASwd,SAAU9Z,EAAM/C,QAAS,WAAQqc,GAAa,IAAtE,SAAiFlO,QAGxF/V,O,mBCnEbhB,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,SAAW,uBAAuB,QAAU,sBAAsB,YAAc,0BAA0B,SAAW,uBAAuB,UAAY,wBAAwB,YAAc,6B","file":"static/js/main.ac4737eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"consoleContainer\":\"Console_consoleContainer__36s7p\",\"consoleMain\":\"Console_consoleMain__1WTYq\",\"consoleHandler\":\"Console_consoleHandler__1cLkH\",\"openConsole\":\"Console_openConsole__2HPtm\",\"closeConsole\":\"Console_closeConsole__2OG3V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"Settings_Canvas__3PUPd\",\"Settings\":\"Settings_Settings__vSiuu\",\"Cam\":\"Settings_Cam__1Pqxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rotaryCtrl\":\"RotaryCtrl_rotaryCtrl__5PhHk\",\"CtrlLeft\":\"RotaryCtrl_CtrlLeft__22lvT\",\"CtrlRight\":\"RotaryCtrl_CtrlRight__3xHkb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBar_navbar__3PxRA\",\"navMenu\":\"NavBar_navMenu__pAShU\",\"navMenuLaser\":\"NavBar_navMenuLaser__2I-gB\",\"navRow\":\"NavBar_navRow__3fRgQ\",\"mobile\":\"NavBar_mobile__2AMvC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__34vH2\",\"close\":\"Login_close__2BLw6\",\"popupWindow\":\"Login_popupWindow__1PvlF\",\"popupInner\":\"Login_popupInner__378L2\"};","import ExperimentUILayer from \"./components/UI/experimentUI/ExperimentUILayer\";\r\nimport VirtualLayer from \"./components/UI/experimentUI/VirtualLayer\";\r\nimport { SocketContextProvider } from \"./services/SocketContext\";\r\nimport { PopUpContextProvider } from \"./services/PopUpContext\";\r\nimport { AppContextProvider } from \"./services/AppContext\";\r\nimport NavBar from \"./components/UI/experimentUI/NavBar\";\r\nimport Console from \"./components/Console/Console\";\r\nimport Login from \"./components/Login/Login\";\r\nimport Chat from \"./components/Chat/Chat\";\r\n\r\n/**\r\n * Assembly of the React components \r\n * \r\n * @description Within this class, all React components are imported and merged into one component. The resulting React component is then \r\n * imported into index.js, where the rendering of the web application is handled.\r\n * \r\n * @returns {React.ReactElement} App, including all the created React components\r\n */\r\nconst App = () => {\r\n  process.title = 'XRTLApp';\r\n  return (\r\n    <AppContextProvider>\r\n      <SocketContextProvider>\r\n        <VirtualLayer />\r\n        <PopUpContextProvider>\r\n          <ExperimentUILayer />\r\n          <Console />\r\n          <Chat />\r\n          <NavBar />\r\n          <Login />\r\n        </PopUpContextProvider>\r\n      </SocketContextProvider>\r\n    </AppContextProvider>\r\n  );\r\n};\r\n\r\nexport default App;","import { useState, useContext, useEffect, createContext } from \"react\";\r\nimport { useAppContext } from \"./AppContext\";\r\nimport { Manager } from \"socket.io-client\";\r\n\r\n// To create the JSON Web Token\r\nvar jwt = require('jsonwebtoken');\r\n//Manager is used because due to its ability to reconnect if the connection to the sever was disrupted\r\nvar manager = new Manager(\"\", { autoConnect: false });\r\nvar socket = manager.socket(\"/\");\r\n\r\nvar SocketContext = createContext();\r\n\r\nexport function useSocketContext() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\n/**\r\n * SocketContext\r\n * \r\n * @description This ContextProvider holds the connection to the server in the variable socket. After \r\n * successfull establishing a connection to the server, the socket variable can be used to recieve events from the server \r\n * or send events to it, if imported, within a React component.  \r\n * \r\n * @returns {React.Context} Socket context\r\n */\r\nexport function SocketContextProvider({ children }) {\r\n  // Color in used within the chat and in which the LED rings flashes, when adjusted\r\n  const [fontColor, setFontColor] = useState('white');\r\n  // Holds the information if connection to the server was sucessfull\r\n  const [connected, setConnected] = useState(false);\r\n  // Contains the username set during the login process\r\n  const [username, setUsername] = useState('');\r\n  // Contains the server adress set during in the login component\r\n  const [URL, setURL] = useState('');\r\n\r\n  const appCtx = useAppContext();\r\n\r\n  useEffect(() => {\r\n    // If connection was successfull, than this event is recieved\r\n    const connect = (e) => {\r\n      setConnected(true);\r\n\r\n      appCtx.addLog(\"Server : Client connected to \" + URL);\r\n      // to set globally these information\r\n      appCtx.setSocket(socket);\r\n      appCtx.setUsername(username);\r\n    }\r\n\r\n    // If connection was disconnected\r\n    const disconnect = (e) => {\r\n      setConnected(false)\r\n      appCtx.addLog(\"Server : Client disconnect.\")\r\n    }\r\n\r\n    socket.on('connect', connect);\r\n\r\n    socket.on('disconnect', disconnect)\r\n\r\n    return (() => {\r\n      socket.removeAllListeners('connect', connect)\r\n      socket.removeAllListeners('disconnect', disconnect)\r\n    })\r\n  })\r\n\r\n  // During the login process is this function called, to set globally the server adress to connect to and\r\n  // the username of the web application client\r\n  const setNewURL = (newURL, username) => {\r\n    if (username && username === 'admin') {\r\n      setUsername('Supervisor')\r\n    } else {\r\n      setUsername(username);\r\n    }\r\n    socket.disconnect();\r\n    manager = new Manager(newURL, { autoConnect: false });\r\n    socket = manager.socket(\"/\");\r\n    SocketContext = createContext();\r\n    setURL(newURL);\r\n  }\r\n\r\n  // Establishs a connetion to a server or disconnects from it\r\n  const toggleConnection = (username, key) => {\r\n    if (!connected) {\r\n      // Creation of the JSON Web Token payload\r\n      var payload = { sub: username }\r\n      // Encryption of the JSON Web Token \r\n      var token = jwt.sign(payload, key, { header: { kid: username === 'admin' ? 'admin' : 'client' } });\r\n\r\n      // Insertion of the token into the socket \r\n      socket.auth = { token: token }\r\n      // Trying th establish a connection to the serveradress \r\n      socket.connect();\r\n      // To inform the other users of the web application, that a new client connected to the server\r\n      socket.emit('newUser', username)\r\n      appCtx.addLog(\"Client connected by choice.\")\r\n    } else {\r\n      //Disconnects from the server\r\n      setConnected(false)\r\n      setUsername(\"\");\r\n      setNewURL(\"\");\r\n      socket.close();\r\n      appCtx.addLog(\"Client disconnected by choice.\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SocketContext.Provider value={{ socket, connected, setConnected, toggleConnection, setNewURL, setFontColor, username, fontColor }}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapper\":\"Description_mainWrapper__6Kii3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapper\":\"InfoWindowContent_mainWrapper__1KSQz\"};","import React, { useState, useContext } from \"react\";\r\n\r\nconst AppContext = React.createContext()\r\n\r\nexport function useAppContext() {\r\n  return useContext(AppContext);\r\n}\r\n\r\n/**\r\n * AppContext\r\n * \r\n * @description This React component is the highest according to the hiearchie. It can be imported within every React component \r\n * and contains the globally most important variables. For example for the display of the component windows,\r\n * all the function are andles of the navigation bar etc. \r\n * \r\n * @returns {React.Context} App context\r\n */\r\nexport function AppContextProvider({ children }) {\r\n  const [underConstruction, setUnderConstruction] = useState(false);\r\n  const [roomComponent, setRoomComponent] = useState(new Set());\r\n  const [showVirtualLayer, setShowVirtualLayer] = useState(true);\r\n  const [selectedComps, setSelectedComps] = useState(new Set());\r\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\r\n  const [autoRotate, setAutoRotate] = useState(false);\r\n  const [showLogin, setShowLogin] = useState(false);\r\n  const [showBeam, setShowBeam] = useState('off');\r\n  const [showTags, setShowTags] = useState(true);\r\n  const [showCam, setShowCam] = useState(false);\r\n  const [showLED, setShowLED] = useState('none');\r\n  const [logs, setLogs] = useState([]);\r\n  const [socket, setSocket] = useState('');\r\n  const [username, setUsername] = useState('');\r\n\r\n  // Contains all the controlIds of the component windows, which are currently open\r\n  const toggleSelectedComp = (compId) => {\r\n    //Adds controlId to set, when a component window is opened\r\n    if (!selectedComps.has(compId)) {\r\n      setSelectedComps(prev => new Set(prev.add(compId)));\r\n      // Removes controlId of a window, whenever it is closed\r\n    } else {\r\n      setSelectedComps(prev => new Set([...prev].filter(x => x !== compId)));\r\n      toogleRoomComp(compId);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Data recieving controlIds set\r\n   * \r\n   * @description This function adds or removes the controlIds of a data recieving window, if it is openns or closed.\r\n   * controlId is added, when this function is called within a React component after the import of this ContextProvider\r\n   * and is removed, wheather the toggleSelectedComp function is called.\r\n   * \r\n   * @param {string} compId - controlId  \r\n   * @param {boolean} val - prevents the mutiple calling of this function\r\n   */\r\n  const toogleRoomComp = (compId, val = false) => {\r\n    try {\r\n      // Adds a new controlId to the set and sends join stream room events\r\n      if (!roomComponent.has(compId) && val !== false) {\r\n        setRoomComponent(prev => new Set(prev.add(compId)));\r\n\r\n        socket.emit('join stream room', {\r\n          controlId: compId,\r\n          userId: username\r\n        });\r\n\r\n        // Removes controlId from the set and sends leave stream room events\r\n      } else if (roomComponent.has(compId)) {\r\n        setRoomComponent(prev => new Set([...prev].filter(x => x !== compId)));\r\n\r\n        socket.emit(\"leave stream room\", {\r\n          controlId: compId,\r\n          userId: username\r\n        });\r\n      }\r\n    } catch (e) { }\r\n  }\r\n\r\n  // Controls the 3D experiment ambient rotation\r\n  const toggleAutoRotate = () => {\r\n    setAutoRotate(!autoRotate);\r\n  };\r\n\r\n  // Switches between the 2D (OverviewCam) and 3D (experiment visualisation) VirtualLayer\r\n  const toggleShowVirtualLayer = () => {\r\n    setShowVirtualLayer(!showVirtualLayer);\r\n  };\r\n\r\n  // Operats the display of the labels and descriptions of the experiment components\r\n  const toggleShowTags = () => {\r\n    setShowTags(!showTags)\r\n  }\r\n\r\n  // Adds a new log entry to the existing log\r\n  const addLog = (log) => {\r\n    setLogs(prev => [log, ...prev])\r\n  };\r\n\r\n  // For displaying the beam path within the 3D visualisation\r\n  const toggleShowBeam = (newVal) => {\r\n    setShowBeam(newVal);\r\n  }\r\n\r\n  // For displaying the beam path of the white and red within the 3D visualisation\r\n  const toggleShowLED = (newVal) => {\r\n    setShowLED(newVal);\r\n  }\r\n\r\n  // Handles the display of the Information window\r\n  const toggleShowInfoWindow = () => {\r\n    setShowInfoWindow(!showInfoWindow);\r\n  }\r\n\r\n  // Handles the display of the Login window\r\n  const toggleLogin = () => {\r\n    setShowLogin(!showLogin);\r\n  }\r\n\r\n  // Handles the display of the OverviewCam window\r\n  const toggleCam = () => {\r\n    setShowCam(!showCam);\r\n    toggleSelectedComp('Overview')\r\n  }\r\n\r\n  // Displays the underConstruction information in the navigation bar\r\n  const toggleunderConstruction = (newVal) => {\r\n    setUnderConstruction(newVal)\r\n  }\r\n\r\n  // Contains all variables, which can be accessed within a React component, if this ContextProvider is imported\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        autoRotate,\r\n        toggleAutoRotate,\r\n        showVirtualLayer,\r\n        toggleShowVirtualLayer,\r\n        selectedComps,\r\n        toggleSelectedComp,\r\n        logs,\r\n        addLog,\r\n        showTags,\r\n        toggleShowTags,\r\n        showBeam,\r\n        toggleShowBeam,\r\n        showLogin,\r\n        setShowLogin,\r\n        showInfoWindow,\r\n        toggleShowInfoWindow,\r\n        toggleLogin,\r\n        toggleCam,\r\n        showCam,\r\n        roomComponent,\r\n        setRoomComponent,\r\n        toogleRoomComp,\r\n        showLED,\r\n        toggleShowLED,\r\n        socket,\r\n        setSocket,\r\n        username,\r\n        setUsername,\r\n        underConstruction,\r\n        toggleunderConstruction,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n","import { MdOutlineScreenRotation, MdInfoOutline } from 'react-icons/md';\r\nimport { MenuItem, Menu, ThemeProvider, IconButton, Tooltip } from '@mui/material';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport { useSocketContext } from '../../../services/SocketContext'\r\nimport { useAppContext } from '../../../services/AppContext'\r\nimport { ImEnter, ImExit } from 'react-icons/im'\r\nimport { GiLaserWarning } from 'react-icons/gi'\r\nimport styles from '../CSS/NavBar.module.css'\r\nimport { theme } from './../templates/Theme'\r\nimport { BsCamera } from 'react-icons/bs'\r\nimport { FaTags } from 'react-icons/fa';\r\nimport { memo, useState } from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport { isEqual } from 'lodash';\r\n\r\nconst NavBar = () => {\r\n    const appCtx = useAppContext();\r\n    const socketCtx = useSocketContext();\r\n\r\n    let connectionStatusColor = '';\r\n    if (socketCtx.connected) { connectionStatusColor = 'white' }\r\n    let autoRotateColor = '';\r\n    if (appCtx.autoRotate) { autoRotateColor = 'white' }\r\n    let showTagsColor = '';\r\n    if (appCtx.showTags) { showTagsColor = 'white' }\r\n    let cameraStatusColor = '';\r\n    if (appCtx.showCam) { cameraStatusColor = 'white' }\r\n    let showInfoWindowColor = '';\r\n\r\n    const [mobileVersion, setMobileVersion] = useState(null);\r\n    const openMobileVersion = Boolean(mobileVersion);\r\n\r\n    const [led, setLED] = useState(null);\r\n    const openLED = Boolean(led)\r\n\r\n    const [laserBeam, setLaserBeam] = useState(null);\r\n    const openLaserBeam = Boolean(laserBeam)\r\n\r\n\r\n    const handleClick = (event) => {\r\n        setMobileVersion(event.currentTarget);\r\n    };\r\n\r\n    const handleClick2 = (event) => {\r\n        setLED(event.currentTarget);\r\n    };\r\n\r\n    const handleLaserBeam = (event) => {\r\n        setLaserBeam(event.currentTarget);\r\n    };\r\n\r\n    const closeMobileVersion = () => {\r\n        setMobileVersion(null);\r\n    };\r\n\r\n    const handleLED = () => {\r\n        setLED(null);\r\n    };\r\n\r\n    const closeLaserBeam = () => {\r\n        setLaserBeam(null);\r\n    };\r\n\r\n    return (\r\n        <div id='navbar' className={styles.navbar} >\r\n            <ThemeProvider theme={theme} >\r\n                <h1>XR TwinLab</h1>\r\n                <div className={styles.navMenuLaser}>\r\n                    <h3>Overlay:</h3>\r\n\r\n                    <IconButton onClick={handleClick2} variant=\"contained\" sx={{\r\n                        borderRadius: 1,\r\n                        height: '33px',\r\n                        width: '30px',\r\n                        color: 'black',\r\n                        ':hover': {\r\n                            bgcolor: 'darkgreen',\r\n                            color: '#00ffa8',\r\n                        },\r\n                    }}>\r\n                        <Icon icon=\"mdi:led-off\" width=\"70\" height=\"70\" />\r\n                    </IconButton>\r\n\r\n                    <Menu\r\n                        id=\"demo-customized-menu\"\r\n                        MenuListProps={{\r\n                            'aria-labelledby': 'demo-customized-button',\r\n                        }}\r\n                        anchorEl={led}\r\n                        open={openLED}\r\n                        onClose={handleLED}\r\n                    >\r\n                        <MenuItem onClick={() => {\r\n                            handleLED();\r\n                            appCtx.toggleShowLED('none');\r\n                        }} disableRipple >None</MenuItem>\r\n                        <MenuItem onClick={() => {\r\n                            handleLED();\r\n                            appCtx.toggleShowLED('white');\r\n                        }} disableRipple>White</MenuItem>\r\n                        <MenuItem onClick={() => {\r\n                            handleLED();\r\n                            appCtx.toggleShowLED('red');\r\n                        }} disableRipple>Red</MenuItem>\r\n                    </Menu>\r\n\r\n                    <IconButton onClick={handleLaserBeam} variant=\"contained\" sx={{\r\n                        borderRadius: 1,\r\n                        height: '33px',\r\n                        width: '30px',\r\n                        color: 'black',\r\n                        ':hover': {\r\n                            bgcolor: 'darkgreen',\r\n                            color: '#00ffa8',\r\n                        },\r\n                    }}>\r\n                        <GiLaserWarning />\r\n                    </IconButton>\r\n\r\n                    <Menu\r\n                        id=\"demo-customized-menu\"\r\n                        MenuListProps={{\r\n                            'aria-labelledby': 'demo-customized-button',\r\n                        }}\r\n                        anchorEl={laserBeam}\r\n                        open={openLaserBeam}\r\n                        onClose={closeLaserBeam}\r\n                    >\r\n                        <MenuItem onClick={() => {\r\n                            closeLaserBeam();\r\n                            appCtx.toggleShowBeam('on');\r\n                        }} disableRipple >On</MenuItem>\r\n                        <MenuItem onClick={() => {\r\n                            closeLaserBeam();\r\n                            appCtx.toggleShowBeam('off');\r\n                        }} disableRipple>Off</MenuItem>\r\n                        <MenuItem onClick={() => {\r\n                            closeLaserBeam();\r\n                            appCtx.toggleShowBeam('split');\r\n                        }} disableRipple>Beamsplitter</MenuItem>\r\n                    </Menu>\r\n\r\n\r\n                </div>\r\n                <div className={styles.navMenu}>\r\n                    <ul>\r\n                        <Tooltip title={(socketCtx.connected) ? 'Disconnect' : 'Connect'}>\r\n                            <li onClick={() => { (socketCtx.connected) ? socketCtx.toggleConnection() : appCtx.toggleLogin(); }}> {(socketCtx.connected) ? <ImExit size={25} color={connectionStatusColor} /> : <ImEnter size={25} color={connectionStatusColor} />} </li>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title='Rotation'>\r\n                            <li onClick={appCtx.toggleAutoRotate}><MdOutlineScreenRotation size={26} color={autoRotateColor} /></li>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title='Labels'>\r\n                            <li onClick={appCtx.toggleShowTags}><FaTags size={25} color={showTagsColor} /></li>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title='Webcam'>\r\n                            <li onClick={appCtx.toggleCam}><BsCamera size={26} color={cameraStatusColor} /></li>\r\n                        </Tooltip>\r\n                        <Tooltip title='Information'>\r\n                            <li onClick={appCtx.toggleShowInfoWindow}><MdInfoOutline size={26} color={showInfoWindowColor} /></li>\r\n                        </Tooltip>\r\n\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className={styles.mobile}>\r\n                    <IconButton onClick={handleClick} variant=\"contained\" sx={{\r\n                        borderRadius: 1,\r\n                        height: '33px',\r\n                        width: '30px',\r\n                        color: 'black',\r\n                        ':hover': {\r\n                            bgcolor: 'darkgreen',\r\n                            color: '#00ffa8',\r\n                        },\r\n                    }}>\r\n                        <KeyboardArrowDownIcon color={'white'} />\r\n                    </IconButton>\r\n\r\n                    <Menu\r\n                        id=\"demo-customized-menu\"\r\n                        MenuListProps={{\r\n                            'aria-labelledby': 'demo-customized-button',\r\n                        }}\r\n                        anchorEl={mobileVersion}\r\n                        open={openMobileVersion}\r\n                        onClose={closeMobileVersion}\r\n                    >\r\n                        <MenuItem onClick={() => {\r\n                            closeMobileVersion();\r\n                            (socketCtx.connected) ? socketCtx.toggleConnection() : appCtx.toggleLogin();\r\n                        }} disableRipple>\r\n                            {(socketCtx.connected) ? <ImExit size={25} color={connectionStatusColor} style={{ paddingRight: '20px' }} /> : <ImEnter size={25} color={connectionStatusColor} style={{ paddingRight: '20px' }} />}\r\n                            {(socketCtx.connected) ? 'Disconnect' : 'Connect'}\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => {\r\n                            closeMobileVersion();\r\n                            appCtx.toggleShowTags();\r\n                        }} disableRipple>\r\n                            <FaTags size={25} style={{ paddingRight: '20px' }} />\r\n                            Labels\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => {\r\n                            closeMobileVersion();\r\n                            appCtx.toggleCam();\r\n                        }} disableRipple>\r\n                            <BsCamera size={26} style={{ paddingRight: '20px' }} />\r\n                            Cam\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => {\r\n                            closeMobileVersion();\r\n                            appCtx.toggleShowInfoWindow();\r\n                        }} disableRipple>\r\n                            <MdInfoOutline size={26} style={{ paddingRight: '20px' }} />\r\n                            Info\r\n                        </MenuItem>\r\n\r\n\r\n                    </Menu>\r\n                </div>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\nexport default memo(NavBar, isEqual)\r\n","import { useAppContext } from '../../services/AppContext';\r\nimport { RiTerminalBoxFill } from 'react-icons/ri';\r\nimport styles from './CSS/Console.module.css';\r\nimport { useState, memo } from 'react';\r\nimport { isEqual } from 'lodash';\r\n\r\n/**\r\n * Console component \r\n * \r\n * @description This React component contains the console, the handling of collapsing/expanding it and the display of the log, i.e. the content of this component.\r\n * \r\n * @returns {React.ReactElement} Console component  \r\n */\r\nconst Console = () => {\r\n  const [showConsole, setShowConsole] = useState(false);\r\n  const [animation, setAnimation] = useState('');\r\n\r\n  const appCtx = useAppContext();\r\n\r\n  //Function handles the folding/unfolding of the console\r\n  const showConsoleHandler = () => {\r\n    setAnimation(showConsole ? styles.closeConsole : styles.openConsole)\r\n    setShowConsole(!showConsole)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.consoleContainer + ' ' + animation}>\r\n      <div className={styles.consoleMain}>\r\n        {/* Log representation */}\r\n        {appCtx.logs.map((payload, index) => {\r\n          return (<span key={index}>{payload}<br /></span>)\r\n        })}\r\n      </div>\r\n      <div className={styles.consoleHandler}>\r\n        <span>\r\n          <RiTerminalBoxFill size={35} onClick={showConsoleHandler} />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default memo(Console, isEqual);","import { TextField, ThemeProvider, Button, IconButton, Grid } from '@mui/material';\r\nimport HighlightOffOutlinedIcon from '@mui/icons-material/HighlightOffOutlined';\r\nimport { themeLogin } from '../../components/UI/templates/Theme';\r\nimport { useSocketContext } from '../../services/SocketContext';\r\nimport { useAppContext } from '../../services/AppContext';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport React, { useState, memo } from 'react';\r\nimport styles from './CSS/Login.module.css';\r\nimport { isEqual } from 'lodash';\r\n\r\n/**\r\n * Login component \r\n * \r\n * @description This React component contains the login overlay, which prevents the navigation bar and components from being clicked. \r\n * Furthermore, this component handles the forwarding of the entered access code and user name to the SocketContext. \r\n * \r\n * @returns {React.ReactElement} Login component  \r\n */\r\nconst Login = () => {\r\n    // List of addresses to which a connection can be established, for quick change if work is to be done locally.\r\n    const connectionOption = [{ title: 'http://localhost:3000' }, { title: 'https://xrtl-ao.uni-jena.de' }]\r\n    const [connection, setConnection] = useState('');\r\n    const [accessCode, setAccessCode] = useState('');\r\n    const [username, setUsername] = useState('');\r\n\r\n    const socketCtx = useSocketContext();\r\n    const appCtx = useAppContext();\r\n\r\n    //Forwarding the entered user name and access code to the SocketContext\r\n    const handleLogin = () => {\r\n        if (username !== '') {\r\n            try {\r\n                socketCtx.setNewURL(String(connection), String(username));\r\n                socketCtx.toggleConnection(String(username), String(accessCode));\r\n                appCtx.toggleLogin();\r\n            }\r\n            catch (error) { }\r\n        }\r\n    }\r\n\r\n    // Handling the entry of the user name\r\n    const handleChange = (event) => {\r\n        setUsername(event.target.value);\r\n        setConnection(connectionOption[1].title)\r\n    };\r\n\r\n    // Handling of the access code entry\r\n    const handleAccessCode = (event) => {\r\n        setAccessCode(event.target.value);\r\n    };\r\n\r\n\r\n    if (appCtx.showLogin) {\r\n        return (\r\n            <ThemeProvider theme={themeLogin}>\r\n                {/* Overlay so that NavBar and components cannot be clicked on */}\r\n                <div className={styles.popupWindow}>\r\n                </div>\r\n                {/* Login window with input fields */}\r\n                <div className={styles.popupInner} >\r\n                    <h3 title='settings'>Login</h3>\r\n                    <div className={styles.close}>\r\n                        <IconButton onClick={(e) => {\r\n                            appCtx.toggleLogin();\r\n                        }} >\r\n                            <HighlightOffOutlinedIcon fontSize='large' />\r\n                        </IconButton>\r\n                    </div>\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justifyContent=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <TextField\r\n                            autoFocus\r\n                            variant='outlined'\r\n                            label='Username '\r\n                            value={username}\r\n                            onChange={handleChange}\r\n                            onKeyPress={(e) => { if (e.key === 'Enter') { handleLogin(); } }}\r\n                            style={{ marginLeft: '0%', width: '200px', paddingRight: '25%' }}\r\n                            error={username === ''}\r\n                            helperText={username === '' ? 'Enter your username!' : ' '}\r\n                        />\r\n\r\n                        <TextField\r\n                            variant='outlined'\r\n                            label='Access code '\r\n                            value={accessCode}\r\n                            onChange={handleAccessCode}\r\n                            onKeyPress={(e) => { if (e.key === 'Enter') { handleLogin(); } }}\r\n                            style={{ marginLeft: '0%', width: '200px', paddingRight: '25%' }}\r\n                            error={accessCode === ''}\r\n                            helperText={accessCode === '' ? 'Enter the access code!' : ' '}\r\n                        />\r\n                    </Grid>\r\n                    <Button size='small' type='submit' variant='contained'\r\n                        onClick={handleLogin}\r\n                        endIcon={<SendIcon />}\r\n                        style={{ width: '20%', height: '15%' }}\r\n                    >Login</Button>\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    } else {\r\n        return (<div></div>)\r\n    }\r\n}\r\nexport default memo(Login, isEqual);","import { ThemeProvider, InputAdornment, IconButton, FormControl, InputLabel, OutlinedInput } from '@mui/material';\r\nimport { useSocketContext } from '../../services/SocketContext';\r\nimport { theme } from '../../components/UI/templates/Theme';\r\nimport { useAppContext } from '../../services/AppContext';\r\nimport { useEffect, useState, memo } from 'react';\r\nimport styles from './CSS/Chat.module.css';\r\nimport { ImBubble } from 'react-icons/im';\r\nimport { MdSend } from 'react-icons/md';\r\nimport { isEqual } from 'lodash';\r\n\r\n/**\r\n * Chat component \r\n * \r\n * @description This React component contains the chat, the collapse/expand handling, the sending of the messages to the other web application clients \r\n * via the server and finally the display of the messages.\r\n * \r\n * @returns {React.ReactElement} Chat component  \r\n */\r\nconst Chat = () => {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [animation, setAnimation] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [chat, setChat] = useState([]);\r\n\r\n  const socketCtx = useSocketContext();\r\n  const appCtx = useAppContext();\r\n\r\n  useEffect(() => {\r\n    //When new messages are received, the chat is simply extended to include them.\r\n    const message = (payload) => {\r\n      setChat([...chat, payload]);\r\n    }\r\n\r\n    socketCtx.socket.on('message', message);\r\n\r\n    return () => {\r\n      socketCtx.socket.removeAllListeners('message', message);\r\n    }\r\n  }, [socketCtx, chat])\r\n\r\n  //Handling of sending chat messages\r\n  const sendMessage = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // Case 1: A command has been entered\r\n    if (message.at(0) === '!') {\r\n\r\n      // De-/activate the ambient rotation of the experiment \r\n      if (message === '!rotate' || message === '!r') {\r\n        appCtx.toggleAutoRotate();\r\n        setChat([...chat, { userId: 'XRTL', message: 'Rotation command was sent ... ', color: '#FF7373' }]);\r\n      }\r\n      // De-/activation of the \"under construction\" message\r\n      else if (message === '!construction' || message === '!c') {\r\n        appCtx.toggleunderConstruction(!appCtx.underConstruction);\r\n        // Forward the change to the server, which sends it to the other web clients.\r\n        socketCtx.socket.emit('underConstruction', !appCtx.underConstruction)\r\n        setChat([...chat, { userId: 'XRTL', message: 'Under construction is now set to ' + !appCtx.underConstruction, color: '#FF7373' }]);\r\n      }\r\n      //Display all user names that are connected to the server via the web application\r\n      else if (message === '!user' || message === '!users') {\r\n        //Request to the server \r\n        socketCtx.socket.emit('updateUser')\r\n\r\n        //Response from the server and formatting of the message, which then finally appears as a chat message within the chat.\r\n        socketCtx.socket.on('updateUser', (payload) => {\r\n          var user = ''\r\n          console.log(payload)\r\n          for (var i = 1; i < payload.length; i += 2) {\r\n            user += payload[i] + ', '\r\n          }\r\n          user = user.slice(0, -2)\r\n          setChat([...chat, { userId: 'XRTL', message: 'List of all connected user/s: ' + user, color: '#FF7373' }]);\r\n        })\r\n      }\r\n      //Display all controlIds of the components that are connected to the server\r\n      else if (message === '!component' || message === '!components') {\r\n        //Request to the server\r\n        socketCtx.socket.emit(\"updateComponents\");\r\n\r\n        //Response from the server and formatting of the message, which then finally appears as a chat message within the chat.\r\n        socketCtx.socket.on('updateComponents', (payload) => {\r\n\r\n          // Case 1: no component is connected to the server\r\n          if (payload.length === 0) {\r\n            setChat([...chat, { userId: 'XRTL', message: 'No components are connected to the server! ', color: '#FF7373' }])\r\n          }\r\n          // Case 2: At least one component is connected to the server.\r\n          else {\r\n            var component = ''\r\n\r\n            for (var i = 1; i < payload.length; i += 2) {\r\n              component += payload[i] + ', '\r\n            }\r\n            component = component.slice(0, -2)\r\n\r\n            setChat([...chat, { userId: 'XRTL', message: 'List of all connected components: ' + component, color: '#FF7373' }]);\r\n          }\r\n        })\r\n      }\r\n      // Resetting selected components to their \"factory settings\"\r\n      else if (message === '!reset') {\r\n        socketCtx.socket.emit('message', { userId: 'XRTL', message: 'Attention the reset command was emited!', color: '#FF7373' });\r\n\r\n        const controlIds = []\r\n\r\n        for (var i = 0; i < controlIds.length; i++) {\r\n          socketCtx.socket.emit('command', {\r\n            userId: socketCtx.username,\r\n            controlId: controlIds[i],\r\n            reset: true\r\n          })\r\n        }\r\n      }\r\n      // Adjusting the settings of the Overview camera to the optimal settings\r\n      else if (message === '!cam') {\r\n        socketCtx.socket.emit(\"command\", {\r\n          userId: 'XRTL',\r\n          controlId: 'overview',\r\n          frameSize: 10\r\n        })\r\n\r\n        socketCtx.socket.emit(\"command\", {\r\n          userId: 'XRTL',\r\n          controlId: 'overview',\r\n          exposure: 800,\r\n          color: socketCtx.fontColor,\r\n        })\r\n\r\n        socketCtx.socket.emit(\"command\", {\r\n          userId: 'XRTL',\r\n          controlId: 'overview',\r\n          contrast: 1,\r\n          color: socketCtx.fontColor,\r\n        })\r\n\r\n        socketCtx.socket.emit(\"command\", {\r\n          userId: 'XRTL',\r\n          controlId: 'overview',\r\n          exposure: 1200,\r\n          color: socketCtx.fontColor,\r\n        })\r\n\r\n        setChat([...chat, { userId: 'XRTL', message: 'The highest camera settings have been made!', color: '#FF7373' }]);\r\n      }\r\n      // Output of an error message if command does not exist or is written incorrectly \r\n      else {\r\n        setChat([...chat, { userId: 'XRTL', message: \"Command doesn't exists\", color: '#FF7373' }]);\r\n      }\r\n\r\n    }\r\n    // Case 2: Sending a chat message to all web clients\r\n    else if (message.length > 0 && message.replace(/\\s/g, '').length !== 0) {\r\n      socketCtx.socket.emit('message', { userId: socketCtx.username, message: message, color: socketCtx.fontColor });\r\n    }\r\n    setMessage('');\r\n  }\r\n\r\n  // Handling of the folding in/out of the chat\r\n  const showChatHandler = () => {\r\n    setAnimation(showChat ? styles.closeChat : styles.openChat);\r\n    setShowChat(!showChat);\r\n  }\r\n\r\n  // Handling of the message\r\n  const handleChange = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    // Chat container\r\n    <div className={styles.chatContainer + ' ' + animation}>\r\n      <div className={styles.chatMain}>\r\n        {chat.map((payload, index) => {\r\n          return (\r\n            <b key={index} >\r\n              {/* Formatting of the received message from the server to username: message */}\r\n              <span style={{ color: payload.color }}> {payload.userId}:</span> <span >{payload.message}</span>\r\n              <br />\r\n            </b>\r\n          )\r\n        })}\r\n      </div>\r\n      <form className={styles.msgForm}>\r\n        <ThemeProvider theme={theme}>\r\n          <FormControl sx={{ marginLeft: -4, width: 3 / 3, paddingTop: 1 }} variant=\"outlined\">\r\n            <InputLabel htmlFor=\"outlined-adornment-password\">Message  </InputLabel>\r\n            <OutlinedInput\r\n              onKeyPress={(e) => { if (e.key === 'Enter') { sendMessage(e); } }}\r\n              onChange={handleChange}\r\n              value={message}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton onClick={sendMessage} edge=\"end\" > <MdSend /> </IconButton>\r\n                </InputAdornment>\r\n              }\r\n              label=\"Message\"\r\n            />\r\n          </FormControl>\r\n        </ThemeProvider>\r\n      </form>\r\n\r\n      {/* Chat icon */}\r\n      <div className={styles.chatHandler + ' ' + animation}>\r\n        <span>\r\n          <ImBubble size={35} onClick={showChatHandler} />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default memo(Chat, isEqual);","import { FormControl, RadioGroup, FormControlLabel, Radio, FormLabel } from \"@mui/material\";\r\nimport { useSocketContext } from \"../../../services/SocketContext\";\r\nimport { useAppContext } from \"../../../services/AppContext\";\r\nimport propTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\n\r\n/**\r\n * Radio button component\r\n * \r\n * @description Radio buttons are used to make a specific selection from several options. This requires a dictionary with the text to be specified as the value and the key to be sent to the server. \r\n * Furthermore, of course, the controlId, the server command.\r\n * \r\n * @param {string} component - general controlId of the component\r\n * @param {number} val -  value of the set radio button \r\n * @param {dictionary} dictionary - Dictionary with the keys and corresponding values as content for the radio button/s\r\n * @param {boolean} online - connection status to the component\r\n * @param {string} option - command for the server\r\n * \r\n * @returns {React.ReactElement} styled radiobutton with the specified props\r\n * \r\n * @example \r\n */\r\nconst RadioButton = (props) => {\r\n    const [radioButton, setRadioButton] = useState(props.val);\r\n\r\n    const appCtx = useAppContext();\r\n    const socketCtx = useSocketContext();\r\n\r\n    // Handles the clicking on a radio button and the associated sending of a server command as well as the changing of the selected radio button\r\n    const handleChange = async (event) => {\r\n        setRadioButton(event.target.value)\r\n\r\n        socketCtx.socket.emit(\"command\", {\r\n            userId: socketCtx.username,\r\n            controlId: props.component,\r\n            [props.option]: event.target.value,\r\n            color: socketCtx.fontColor,\r\n        })\r\n\r\n        socketCtx.socket.emit(\"footer\", {\r\n            status: \"Last change by: \" + socketCtx.username,\r\n            controlId: props.component\r\n        })\r\n\r\n        appCtx.addLog(\"User set position on \" + props.component + \" to \" + radioButton)\r\n    }\r\n\r\n    return (\r\n        <FormControl>\r\n            <FormLabel id=\"demo-row-radio-buttons-group-label\">{props.title}</FormLabel>\r\n            <RadioGroup\r\n                row\r\n                aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n                name=\"row-radio-buttons-group\"\r\n                value={props.val}\r\n                onChange={handleChange}\r\n            >\r\n                {Object.keys(props.dictionary).map(val =>\r\n                    <FormControlLabel\r\n                        disabled={(socketCtx.connected && props.online) ? false : true}\r\n                        label={props.dictionary[val]}\r\n                        value={val}\r\n                        control={<Radio />}\r\n                    />\r\n                )}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nRadioButton.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    dictionary: propTypes.array.isRequired,\r\n    online: propTypes.bool.isRequired,\r\n    option: propTypes.string.isRequired,\r\n    val: propTypes.oneOf([propTypes.string, propTypes.number]).isRequired\r\n}\r\n\r\nexport default RadioButton;","import { Switch, Box, Typography, FormGroup, Stack } from '@mui/material';\r\nimport { useSocketContext } from \"../../../services/SocketContext\";\r\nimport { useAppContext } from \"../../../services/AppContext\";\r\nimport propTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\n\r\n/**\r\n * Switch Component\r\n * \r\n * @description This component returns a styled switch. The left/beginning and right/end text of the switch can be set. In addition, the controlId, the status \r\n * (of the component and the online status), and the command for the server must be specified.\r\n * \r\n * @param {string} component - controlId \r\n * @param {string} left -  text at the left/beginning\r\n * @param {string} right -text at the right/end\r\n * @param {boolean} switchStatus - Status of the switch from the status request \r\n * @param {boolean} online - connection status to the component\r\n * @param {string} option - command for the server\r\n * \r\n * @returns {React.ReactElement} styled switch with the specified props \r\n * \r\n * @example <Switch component={'TestSwitch'} online={true} switchStatus={false} option=\"switch\" />\r\n * @example <Switch component={'TestSwitch2'} online={true} switchStatus={false} left='Off' right='On' option=\"switch\" />\r\n * @example <Switch component={'TestSwitch3'} online={false} switchStatus={true} left='Front' right='Back' option=\"status\" />\r\n */\r\n\r\nconst SwitchCtrl = (props) => {\r\n    /**\r\n     * @param {bool} switchValue - Indicates the status of the switch\r\n     * @function setSwitchValue - Assigning a new value\r\n     */\r\n    const [switchValue, setSwitchValue] = useState(false);\r\n\r\n    const appCtx = useAppContext();\r\n    const socketCtx = useSocketContext();\r\n\r\n    /**\r\n     * Handles the onclick event on the switch\r\n     * \r\n     * @description Clicking on the button overwrites it with the new value. This is then sent to the server with a \"command\" command. Emitting footer \r\n     * then updates the footer of the window \r\n     * \r\n     * @param {*} event - Clicking event\r\n     * @param {boolean} newValue - Value with which switchValue is to be overwritten\r\n     */\r\n    const handleSettingChanges = (event, newValue) => {\r\n        setSwitchValue(newValue);\r\n\r\n        socketCtx.socket.emit(\"command\", {\r\n            userId: socketCtx.username,\r\n            controlId: props.component,\r\n            [props.option]: newValue,\r\n            color: socketCtx.fontColor,\r\n        })\r\n\r\n        socketCtx.socket.emit(\"footer\", {\r\n            status: 'Used by: ' + socketCtx.username.substring(0, 17),\r\n            controlId: props.component\r\n        })\r\n\r\n        appCtx.addLog(\"User set switch on \" + props.component + \" to \" + switchValue)\r\n    }\r\n\r\n    return (\r\n        <Box >\r\n            <FormGroup>\r\n                <Stack direction=\"row\" alignItems=\"center\" sx={{ ml: 2 }}>\r\n                    <Typography>{props.left}</Typography>\r\n                    <Switch checked={props.switchStatus}\r\n                        onChange={handleSettingChanges}\r\n                        inputProps={{ 'aria-label': 'controlled' }}\r\n                        disabled={(socketCtx.connected && props.online) ? false : true} />\r\n                    <Typography>{props.right}</Typography>\r\n                </Stack>\r\n            </FormGroup>\r\n        </Box>\r\n    )\r\n}\r\n\r\nSwitchCtrl.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    left: propTypes.string,\r\n    right: propTypes.string,\r\n    switchStatus: propTypes.bool.isRequired,\r\n    online: propTypes.bool.isRequired,\r\n    option: propTypes.string.isRequired\r\n}\r\n\r\nexport default SwitchCtrl;","import { useSocketContext } from \"../../../services/SocketContext.js\";\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport RadioButton from '../templates/RadioButton.js';\r\nimport { theme } from '../templates/Theme.js';\r\nimport { useState, useEffect } from \"react\";\r\nimport Switch from '../templates/Switch.js';\r\nimport Box from '@mui/material/Box';\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * Control of the pinhole, the beam splitter, the white and red LED\r\n * \r\n * @description This React component returns the content for the Muiltctrl window. Four controlIds are required for this, firstly to control the pinhole \r\n * aperture, the beam splitter and secondly the controlId for the red and white LEDs. The LEDs can be switched on and off separately from each other. \r\n * Depending on which radio button is clicked within the window, it is then moved into the beam path or, in the case of the pinhole, inserted into the beam path. \r\n * \r\n * @param {string} component - To control \r\n * @param {string} pinhole - To control the pinhole\r\n * @param {string} redLED - To control the red lED\r\n * @param {string} whiteLED - To control the white lED\r\n * \r\n * @returns {React.ReactElement} Multi control in form of radiobuttons\r\n */\r\nconst MultiCtrl = (props) => {\r\n    const [switchWhiteIsOn, setSwitchWhiteStatus] = useState(false);\r\n    const [switchRedIsOn, setSwitchRedStatus] = useState(false);\r\n    const [selectionStatus, setSelectionStatus] = useState('none');\r\n    const [onlineStatus, setOnlineStatus] = useState(false);\r\n\r\n    const socketCtx = useSocketContext();\r\n\r\n    let radioButtonDictionary = {\r\n        none: 'None',\r\n        splitter: 'Beam splitter',\r\n        pinhole: 'Pinhole',\r\n        rled: 'Red LED',\r\n        wled: 'White LED'\r\n    }\r\n\r\n    useEffect(() => {\r\n        const status = (payload) => {\r\n            // To set the correct status of the individual components\r\n            if (payload.controlId === props.redLED) {\r\n                setSwitchRedStatus(payload.status.isOn);\r\n            }\r\n            else if (payload.controlId === props.whiteLED) {\r\n                setSwitchWhiteStatus(payload.status.isOn);\r\n            }\r\n            else if (payload.controlId === props.component) {\r\n                setOnlineStatus(true);\r\n                (payload.status.busy) ? setOnlineStatus(false) : setOnlineStatus(true);\r\n                setSelectionStatus(payload.status.state)\r\n            }\r\n            //console.log(\"Status of settings:   \", payload)\r\n        }\r\n\r\n        // Sending server commands to request the status of all components\r\n        socketCtx.socket.emit(\"command\", {\r\n            userId: socketCtx.username,\r\n            controlId: props.component,\r\n            getStatus: true\r\n        })\r\n\r\n        socketCtx.socket.emit(\"command\", {\r\n            userId: socketCtx.username,\r\n            controlId: props.redLED,\r\n            getStatus: true\r\n        })\r\n\r\n        socketCtx.socket.emit(\"command\", {\r\n            userId: socketCtx.username,\r\n            controlId: props.whiteLED,\r\n            getStatus: true\r\n        })\r\n\r\n        socketCtx.socket.on('status', status);\r\n\r\n        socketCtx.socket.emit('getFooter', props.component)\r\n\r\n        return () => {\r\n            socketCtx.socket.removeAllListeners('status', status)\r\n        }\r\n        //Comment needed to prevent a warning\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps      \r\n    }, [socketCtx.socket]);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Box sx={{ mx: 1 }}>\r\n                <RadioButton component={props.component} online={onlineStatus} dictionary={radioButtonDictionary} val={selectionStatus} option=\"state\" />\r\n                <Switch component={props.whiteLED} switchStatus={switchWhiteIsOn} online={onlineStatus} left='LED white Off' right='On' option='switch' />\r\n                <Switch component={props.redLED} switchStatus={switchRedIsOn} online={onlineStatus} left='LED red Off' right='On' option='switch' />\r\n            </Box>\r\n        </ThemeProvider>\r\n    )\r\n}\r\nMultiCtrl.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    pinhole: propTypes.string.isRequired,\r\n    redLED: propTypes.string.isRequired,\r\n    whiteLED: propTypes.string.isRequired,\r\n}\r\n\r\nexport default MultiCtrl;\r\n","import { themeLogin } from '../../UI/templates/Theme';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport styles from './CSS/Description.module.css';\r\nimport { Button, Box } from '@mui/material';\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * Imprint text\r\n * \r\n * @description Within this file is the text for the imprint, which can be found within the information window under the § symbol.\r\n * \r\n * @param {string} height - For scaling the content (is specified in pixels)\r\n * \r\n * @returns {React.ReactElement} Imprint text and buttons for redirection to websites.  \r\n */\r\nconst Imprint = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.mainWrapper} style={{ height: props.height }} >\r\n                <p>\r\n                    The editorial responsibility for this application lies with the Executive Office of the Abbe Center of Photonics and it's representative/s.\r\n                </p>\r\n                <p>\r\n                    For further information please follow the links:\r\n                </p>\r\n                <ThemeProvider theme={themeLogin}>\r\n\r\n                    <Box sx={{ '& button': { mr: 5, ml: 3 } }}>\r\n\r\n                        <Button type='submit' variant='contained' onClick={() => { window.open(\"https://www.asp.uni-jena.de/legal-notice\", 'resizable=yes') }}> Legal Notice </Button>\r\n                        <Button type='submit' variant='contained' onClick={() => { window.open(\"https://www.uni-jena.de/en/privacy-statement\", 'resizable=yes') }}> Privacy Statement </Button>\r\n                    </Box>\r\n                </ThemeProvider>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nImprint.propTypes = {\r\n    height: propTypes.string.isRequired,\r\n}\r\n\r\nexport default Imprint;","import Impressum from './LegalNotice'\r\n\r\nconst DescriptionHandler = (props) => {\r\n\r\n    const renderOption = {\r\n        info: <Impressum height={props.height} />\r\n    }\r\n\r\n    return (\r\n        <div>{renderOption[props.component]}</div>\r\n    )\r\n}\r\nexport default DescriptionHandler;\r\n","import { IoInformationCircleOutline, IoCloseCircleOutline, IoSettingsOutline } from 'react-icons/io5' //IoReloadOutline\r\nimport DescriptionHandler from '../../experiment/ComponentDescription/DescriptionHandler'\r\nimport { useSocketContext } from '../../../services/SocketContext';\r\nimport { usePopUpContext } from '../../../services/PopUpContext';\r\nimport { useAppContext } from '../../../services/AppContext';\r\nimport { MdOutlineUpdate } from 'react-icons/md'; //MdOutlineCircle\r\nimport styles from '../CSS/Window.module.css';\r\nimport { ImSection } from 'react-icons/im';\r\nimport Draggable from 'react-draggable';\r\nimport { memo, useEffect } from 'react';\r\nimport { isEqual } from 'lodash';\r\nimport { useState } from 'react';\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * Window component\r\n * \r\n * @description This Recat component takes parameters for the design of the component window and then returns it as a React component to be rendered. \r\n * The top and left parameters are used for positioning, and the width and height variables \r\n * are used to define the size of the component window. The id and the componentenList contain important controlIds of the component, which is \r\n * important for the communication with the microcontroller. Outline images can be optionally displayed by passing the file path.\r\n * \r\n * @param {string} id - controlId \r\n * @param {array} componentList - List containing the general controlId or all controlIds of the stepper motors\r\n * @param {string} header - Text within the topper\r\n * @param {number} top - Positioning at height\r\n * @param {number} left - Positioning at width\r\n * @param {string} width - Width of the window\r\n * @param {string} height - Height of the window\r\n * @param {string} background - File path of the image that is displayed within the window\r\n *  \r\n * @returns {React.ReactElement} Component window \r\n */\r\nconst Window = (props) => {\r\n  const [info, setInfo] = useState(props.info === false ? false : true);\r\n  const [lastChange, setLastChange] = useState(props.lastChange);\r\n  const [footer, setFooter] = useState('Initializing... ');\r\n  const [topper, setTopper] = useState('')\r\n\r\n  const socketCtx = useSocketContext();\r\n  const popupCtx = usePopUpContext();\r\n  const appCtx = useAppContext();\r\n\r\n  // Additional icon to be rendered next to the close icon\r\n  const renderOption = {\r\n    para: <ImSection className={styles.icon} size={24} />, // Legal Notice \r\n    info: <IoInformationCircleOutline className={styles.iconClose} size={30} />, // Information\r\n    setting: <IoSettingsOutline className={styles.iconClose} size={30} />, // Setting\r\n    none: <IoSettingsOutline className={styles.icon} size={25} color={'#01bd7d'} />, // None\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Processing of the transferred topper variable\r\n    if (props.topper === 'none') {\r\n      setTopper('none')\r\n    } else if (props.topper === 'para') {\r\n      setTopper('para')\r\n    } else if (props.topper === undefined) {\r\n      setTopper('info')\r\n    }\r\n\r\n    // Handles the updating of the footer after the component has been adjusted\r\n    const Footer = (payload) => {\r\n      if (props.footer !== 'none' && props.componentList.includes(payload.controlId)) {\r\n        setFooter(String(payload.status))\r\n        var time = new Date();\r\n        setLastChange([time.getHours(), time.getMinutes(), time.getSeconds(), time.getDay(), time.getMonth()])\r\n      }\r\n    }\r\n\r\n    // Handles the setting of the footer after the component window has been opened\r\n    const getFooter = (payload) => {\r\n      if (props.footer !== 'none' && props.componentList.includes(payload.controlId)) {\r\n        setFooter(String(payload.status))\r\n        var time = new Date();\r\n        setLastChange([time.getHours(), time.getMinutes(), time.getSeconds(), time.getDay(), time.getMonth()])\r\n      }\r\n    }\r\n\r\n    socketCtx.socket.on('footer', Footer)\r\n\r\n    socketCtx.socket.on('getFooter', getFooter);\r\n\r\n    return () => {\r\n      socketCtx.socket.removeAllListeners('footer', Footer)\r\n      socketCtx.socket.removeAllListeners('getFooter', getFooter)\r\n    }\r\n    //Comment needed to prevent a warning\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [socketCtx.socket])\r\n\r\n  // Handles the closing of the component window  \r\n  const handleCloseWindow = () => {\r\n    appCtx.toggleSelectedComp(props.id)\r\n\r\n    if (props.id === \"overview\") {\r\n      appCtx.toggleCam();\r\n    }\r\n\r\n    if (props.id === \"info\") {\r\n      appCtx.toggleShowInfoWindow();\r\n    }\r\n\r\n    if (props.id === \"welcome\") {\r\n      appCtx.toggleShowWelcomeWindow();\r\n    }\r\n\r\n    if (props.id === \"manual\") {\r\n      appCtx.toggleShowManualWindow();\r\n    }\r\n  }\r\n\r\n  // Handles the change of the icon next to the Close icon when it is clicked.\r\n  const handleInformation = () => {\r\n    setInfo(!info)\r\n\r\n    if (props.id === 'screen' && appCtx.smallSetting === true) {\r\n      appCtx.smallSettings()\r\n    }\r\n\r\n    if (props.id === 'info') {\r\n      topper === 'para' ? setTopper('info') : setTopper('para');\r\n    } else {\r\n      topper === 'info' ? setTopper('setting') : setTopper('info')\r\n    }\r\n  }\r\n\r\n  // Handles the display of the information when the component was last adjusted & and to identify the component via the Overview Cam\r\n  const handleInfo = () => {\r\n    var timeNow = new Date();\r\n    let difH, difMin, difSec = 0;\r\n    var alert = '';\r\n\r\n    timeNow = [timeNow.getHours(), timeNow.getMinutes(), timeNow.getSeconds(), timeNow.getDay(), timeNow.getMonth()]\r\n    if (lastChange[0] === '') {\r\n      alert = 'No last change detected!'\r\n    } else if (timeNow[0] > lastChange[0]) {\r\n      difH = timeNow[0] - lastChange[0];\r\n      alert = 'Last change is more than ' + difH + ' h ago!'\r\n    } else if (timeNow[0] === lastChange[0] && timeNow[1] === lastChange[1] && timeNow[2] > lastChange[2]) {\r\n      difSec = timeNow[2] - lastChange[2]\r\n      alert = 'Last change is ' + difSec + ' s ago!'\r\n    } else if (timeNow[0] === lastChange[0] && timeNow[1] > lastChange[1]) {\r\n      difMin = timeNow[1] - lastChange[1]\r\n      alert = 'Last change is more than ' + difMin + ' min ago!'\r\n    } else if (timeNow[3] > lastChange[3] || timeNow[4] > lastChange[4]) {\r\n      alert = 'Last change is more than 24 h ago!'\r\n    } else {\r\n      alert = 'No last change detected!'\r\n    }\r\n\r\n    popupCtx.toggleShowPopUp(alert, 'info');\r\n\r\n    socketCtx.socket.emit(\"command\", {\r\n      controlId: props.componentList[0],\r\n      identify: 3000,\r\n      color: socketCtx.fontColor,\r\n    })\r\n  }\r\n\r\n  return (\r\n    /* Ensures the free movement of the component windows */\r\n    <Draggable handle='.draggableHandler'>\r\n      <div\r\n        className={styles.window}\r\n        style={{ top: props.top + 'px', left: props.left + 'px', width: props.height + 'px', height: props.height + 'px' }}\r\n      >\r\n        {/* Styling of the topper of the component window */}\r\n        <div className={styles.windowHeader}>\r\n          <span\r\n            className='draggableHandler' //FIXME draggable doesnt seem to work with inline JSX classes. \r\n            style={{\r\n              display: 'block',\r\n              width: 'calc(100% - 70px)',\r\n              cursor: 'move',\r\n              float: 'left'\r\n            }}\r\n          >\r\n            {props.header}\r\n          </span>\r\n\r\n          <p>\r\n            {/* No Icon or icon next to the close icon */}\r\n            <span onClick={handleInformation}>\r\n              {renderOption[topper]}\r\n            </span>\r\n            {/* Close icon and the onclick-event handling */}\r\n            <span onClick={handleCloseWindow}><IoCloseCircleOutline className={styles.iconClose} size={30} /></span>\r\n          </p>\r\n        </div>\r\n\r\n        {/* Display of the control elements or the descriptive text */}\r\n        {info ?\r\n          <div\r\n            className={styles.windowContent}\r\n            style={{\r\n              height: props.height,\r\n              width: props.width,\r\n              background: 'url(' + props.background + ')',\r\n            }}\r\n          >\r\n            {props.children}\r\n          </div>\r\n\r\n          :\r\n\r\n          <div\r\n            className={styles.windowContent}\r\n            style={{\r\n              height: props.height,\r\n              width: props.width,\r\n            }}\r\n          >\r\n            <DescriptionHandler height={props.height} component={props.id} />\r\n          </div>\r\n        }\r\n\r\n        {/* Display of the footer depending on the parameter footers */}\r\n        {props.footer !== 'none' ?\r\n          <div className={styles.windowFooter}>\r\n            <span onClick={handleInfo}> <MdOutlineUpdate size={25} /></span>\r\n            <label>{footer}</label>\r\n          </div>\r\n          :\r\n          <div />\r\n        }\r\n      </div>\r\n    </Draggable>\r\n  )\r\n}\r\n\r\nWindow.propTypes = {\r\n  id: propTypes.string.isRequired,\r\n  componentList: propTypes.array.isRequired,\r\n  header: propTypes.string.isRequired,\r\n  top: propTypes.oneOfType([propTypes.string, propTypes.number,]).isRequired,\r\n  left: propTypes.oneOfType([propTypes.string, propTypes.number,]).isRequired,\r\n  width: propTypes.string.isRequired,\r\n  height: propTypes.string.isRequired,\r\n  background: propTypes.string\r\n}\r\n\r\nexport default memo(Window, isEqual);","import MultiCtrl from \"../UI/CtrlUnits/MultiCtrl\";\r\nimport Window from \"../UI/experimentUI/Window\";\r\n\r\n/**\r\n * MultiComponentSelection window\r\n * \r\n * @description  This React component returns a window with the content for the MultiComponentSelection component window.\r\n *  \r\n * @param {string} id - controlId of the entire component\r\n * @param {string} controlId - controlId for the React app to know, which window should be open/closed\r\n * @param {string} controlId2 - controlId to control the pinhole\r\n * @param {string} controlIdLED - controlId to control the red lED\r\n * @param {string} controlIdLED2 - controlId to control the white lED\r\n * @param {string} title - For setting the title within the window\r\n * @param {number} height - For the positioning of the window \r\n * @param {number} left - For the positioning of the window \r\n * \r\n * @returns {React.ReactElement} MultiComponentSelection component window\r\n */\r\nconst MultiComponentSelection = (props) => {\r\n\r\n  return (\r\n    <Window\r\n      id={props.controlId}\r\n      componentList={[props.controlId, props.controlId2, props.controlLED, props.controlLED2]}\r\n      header={props.title}\r\n      top={props.top}\r\n      left={props.left}\r\n      height=\"190px\"\r\n      width=\"360px\"\r\n\r\n    >\r\n      <MultiCtrl\r\n        component={props.controlId}\r\n        pinhole={props.controlId2}\r\n        redLED={props.controlLED}\r\n        whiteLED={props.controlLED2}\r\n      />\r\n    </Window>\r\n  );\r\n};\r\n\r\nexport default MultiComponentSelection;\r\n","import { useSocketContext } from '../../../services/SocketContext';\r\nimport { useAppContext } from '../../../services/AppContext';\r\nimport styles from '../CSS/Settings.module.css';\r\nimport propTypes from \"prop-types\";\r\nimport { useEffect } from 'react';\r\n\r\n/**\r\n * ESPCam canvas component\r\n * \r\n * @description This component returns a canvas with the camera stream of an ESPCam. For this, the height and width \r\n * must be specified. In addition, changes to the styling can be transferred.\r\n * \r\n * @param {string} component - controlId \r\n * @param {string} width - Sets the width of the canvas in pixels\r\n * @param {string} height - Sets the height of the canvas in pixels\r\n * @param {string} style - additional styling of the canvas\r\n * \r\n * @returns {React.ReactElement} styled canvas with ESPCam stream\r\n */\r\nconst ESPCam = (props) => {\r\n    const socketCtx = useSocketContext();\r\n    const appCtx = useAppContext();\r\n\r\n    useEffect(() => {\r\n        var x1, x2, y1, y2;\r\n        var ctx;\r\n        const data = (payload) => {\r\n            if (payload.controlId === props.component) {\r\n                var uint8Arr = new Uint8Array(payload.data);\r\n                var binary = '';\r\n                for (var i = 0; i < uint8Arr.length; i++) {\r\n                    binary += String.fromCharCode(uint8Arr[i]);\r\n                }\r\n                var base64String = window.btoa(binary);\r\n\r\n                var img = new Image();\r\n                img.onload = function () {\r\n                    var canvas = document.getElementById(props.component);\r\n\r\n                    ctx = canvas.getContext('2d');\r\n                    x1 = 0;\r\n                    y1 = 0;\r\n                    x2 = 600;\r\n                    y2 = 400;\r\n                    ctx.drawImage(this, x1, y1, x2, y2);\r\n                };\r\n                img.src = 'data:image/jpg;base64,' + base64String;\r\n            }\r\n        }\r\n        // A room is created for the component, into which the clients are then added when they open the corresponding window. By creating the room, the traffic caused by sending the \r\n        // stream should be reduced, as only the clients who really need the stream receive it.\r\n        appCtx.toogleRoomComp(props.component, true);\r\n\r\n        socketCtx.socket.on('data', data);\r\n\r\n        return () => {\r\n            socketCtx.socket.removeAllListeners('data', data)\r\n        }\r\n        //Comment needed to prevent a warning\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [socketCtx.socket]);\r\n\r\n    return (\r\n        <div className={styles.Canvas}>\r\n            <canvas id={props.component} width={props.width} height={props.height} style={props.style} />\r\n        </div>\r\n    )\r\n}\r\n\r\nESPCam.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    width: propTypes.string.isRequired,\r\n    height: propTypes.string.isRequired,\r\n    style: propTypes.object\r\n}\r\n\r\nexport default ESPCam;","import { useSocketContext } from \"../../../services/SocketContext\";\r\nimport { Box, Stack, Typography, Slider } from \"@mui/material\";\r\nimport { useAppContext } from \"../../../services/AppContext\";\r\nimport propTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\n\r\n/**\r\n * Slider component\r\n * \r\n * @description Used to create a slider with a specified start and end point. In addition, the controlId, the status (of the component and the online status) \r\n * and the command for the server must be specified. The title can but does not have to be given. To display text under the slider instead of numbers, this \r\n * can be passed to the slider within the tag text in the form of an array. \r\n * \r\n * @param {string} component - controlId \r\n * @param {string} title - title \r\n * @param {number} min -  text at the left/beginning\r\n * @param {number} max - text at the right/end\r\n * @param {array} text - contains an array with numbers as keys and strings as values (for displaying text under the slider instead of numbers)\r\n * @param {number} sliderValue - Status of the slider from the status request \r\n * @param {boolean} online - connection status to the component\r\n * @param {string} option - command for the server\r\n * \r\n * @returns {React.ReactElement} styled slider with the specified props\r\n * \r\n * @example <Slider title='Contrast' component={'cam'} online={true} sliderValue={0} min={-2} max={2} option='contrast' />\r\n * @example <Slider title='Exposure' component={'cam'} online={false} sliderValue={-2} min={0} max={1200} option='exposure' />\r\n * @example <Slider component={'cam'} online={false} sliderValue={-2} min={0} max={10} text={[{ value: 0, label: 'a' }, { value: 5, label: 'b' }, { value: 10, label: 'c' }]} option='exposure' />\r\n */\r\n\r\nconst SliderCtrl = (props) => {\r\n  /**\r\n * @param {number} sliderPos - Indicates the status of the slider\r\n * @function setSliderPos - Assigning a new value\r\n */\r\n  const [sliderPos, setSliderPos] = useState(props.sliderValue);\r\n\r\n  const appCtx = useAppContext();\r\n  const socketCtx = useSocketContext();\r\n\r\n  /**\r\n   * Definition of the start, middle and end point\r\n   */\r\n  const marks = [\r\n    { value: parseInt(props.min), label: props.min, },\r\n    { value: 0, label: '0', },\r\n    { value: parseInt(props.max), label: props.max, },\r\n  ]\r\n\r\n  /**\r\n   * Handles the onclick event on the slider\r\n   * \r\n   * @description When one clicks on the slider, the sliderValue is overwritten with the new value. This change is then sent to the server with a \"command\" command. \r\n   * Emitting footer then updates the footer of the window \r\n   * \r\n   * @param {*} event - onClick event\r\n   * @param {number} newValue - Value with which selectValue is to be overwritten\r\n   */\r\n  const handleSettingChanges = (event, newValue) => {\r\n    setSliderPos(newValue)\r\n\r\n    socketCtx.socket.emit(\"command\", {\r\n      userId: socketCtx.username,\r\n      controlId: props.component,\r\n      [props.option]: newValue,\r\n      color: socketCtx.fontColor,\r\n    })\r\n\r\n    socketCtx.socket.emit(\"footer\", {\r\n      status: 'Used by: ' + socketCtx.username.substring(0, 17),\r\n      controlId: props.component\r\n    })\r\n\r\n    appCtx.addLog(\"User set position on \" + props.component + \" to \" + sliderPos)\r\n  }\r\n\r\n  if (props.text) {\r\n    return (\r\n      <Box sx={{ width: 250, m: 2 }}>\r\n        <Typography id=\"input-slider\" gutterBottom>\r\n          {props.title}\r\n        </Typography>\r\n        <Stack spacing={2} direction=\"row\" sx={{ mb: 1 }} alignItems=\"center\">\r\n          <Slider aria-label=\"Temperature\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={1}\r\n            min={props.min}\r\n            max={props.max}\r\n            value={props.sliderValue}\r\n            onChangeCommitted={handleSettingChanges}\r\n            marks={props.text}\r\n            disabled={(socketCtx.connected && props.online) ? false : true}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n    )\r\n  } else {\r\n    return (\r\n      <Box sx={{ width: 250, m: 2 }}>\r\n        <Typography id=\"input-slider\" gutterBottom>\r\n          {props.title}\r\n        </Typography>\r\n        <Stack spacing={2} direction=\"row\" sx={{ mb: 1 }} alignItems=\"center\">\r\n          <Slider aria-label=\"Temperature\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={1}\r\n            min={props.min}\r\n            max={props.max}\r\n            value={props.sliderValue}\r\n            onChangeCommitted={handleSettingChanges}\r\n            marks={marks}\r\n            disabled={(socketCtx.connected && props.online) ? false : true}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nSliderCtrl.propTypes = {\r\n  component: propTypes.string.isRequired,\r\n  title: propTypes.string,\r\n  min: propTypes.number.isRequired,\r\n  max: propTypes.number.isRequired,\r\n  text: propTypes.array,\r\n  sliderValue: propTypes.bool.isRequired,\r\n  online: propTypes.bool.isRequired,\r\n  option: propTypes.string.isRequired\r\n}\r\n\r\nexport default SliderCtrl;","import { MenuItem, Select, FormControl, Box, InputLabel } from '@mui/material';\r\nimport { useSocketContext } from \"../../../services/SocketContext\";\r\nimport { useAppContext } from \"../../../services/AppContext\";\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * Gets the objects that have the assigned properties. A MenuItem is then created for each object with the corresponding text and value.\r\n * \r\n * @param {*} props - Select items to be created \r\n * @returns {React.ReactElement}  <MenuItem value={value}> text <MenuItem/> \r\n */\r\nconst TypeSelectMenuItem = (props) => {\r\n    return (\r\n        <MenuItem {...props}>\r\n            {props[\"children\"]}\r\n        </MenuItem>\r\n    );\r\n};\r\n\r\n/**\r\n * Select component\r\n * \r\n * @description Select is used to choose from a list of options. For this, the controlId, the status (of the component and the online status), \r\n * the list of options and the command for the server must be specified. The title can, but does not have to be specified. \r\n * \r\n * @param {string} component - controlId \r\n * @param {string} title -  title\r\n * @param {string} list - Dictionary with the keys and corresponding values as content for the select.\r\n * @param {boolean} switchStatus - Status of the select from the status query \r\n * @param {boolean} online - connection status to the component\r\n * @param {string} option - command for the server\r\n * \r\n * @returns {React.ReactElement} styled select with the specified props\r\n * \r\n * @example <Select title='Resolution' component={'Select'} online={true} option='frameSize' selectValue={1} list={{1: 'a', 2: 'b', 3: 'c'}} />\r\n * @example <Select title='Resolution' component={'Select2'} online={true} option='frameSize' selectValue={'a'} list={{a: 1, b: 2, c: 4} />\r\n * @example <Select component={'Select3'} online={true} option='frameSize' selectValue={3} list={{1: 'a', b: 2, 3: 'c'}} />\r\n */\r\nexport default function CustomSelect(props) {\r\n    const socketCtx = useSocketContext();\r\n    const appCtx = useAppContext();\r\n\r\n    /**\r\n     * Handles the onclick event on a select option \r\n     * \r\n     * @description When a select element is clicked, SelectValue is overwritten with the new value. This change is then sent to the server with a \"command\" command. \r\n     * Emitting footer then updates the footer of the window. \r\n     * \r\n     * @param {*} event - clicking event (contains the new value)\r\n    */\r\n    const handleChange = (event) => {\r\n        socketCtx.socket.emit(\"command\", {\r\n            userId: socketCtx.username,\r\n            controlId: props.component,\r\n            [props.option]: isNaN(event.target.value) ? event.target.value : Number(event.target.value)\r\n        })\r\n\r\n        socketCtx.socket.emit(\"footer\", {\r\n            status: 'Used by: ' + socketCtx.username.substring(0, 17),\r\n            controlId: props.component\r\n        })\r\n\r\n        appCtx.addLog(\"User set selected \" + props.component + \" with \" + event.target.value)\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ m: 2, width: 250 }}>\r\n            <FormControl fullWidth>\r\n                <InputLabel >{props.title}</InputLabel>\r\n                <Select\r\n                    label={props.title}\r\n                    value={props.selectValue}\r\n                    onChange={handleChange}\r\n                    disabled={(socketCtx.connected && props.online) ? false : true} >\r\n                    {Object.keys(props.list).map((type) => (\r\n                        <TypeSelectMenuItem value={type}>\r\n                            {props.list[type]}\r\n                        </TypeSelectMenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </Box>\r\n    );\r\n}\r\n\r\nCustomSelect.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    title: propTypes.string,\r\n    list: propTypes.array.isRequired,\r\n    selectValue: propTypes.oneOf([propTypes.string, propTypes.number]).isRequired,\r\n    online: propTypes.bool.isRequired,\r\n    option: propTypes.string.isRequired\r\n}","import SettingsOutlinedIcon from '@mui/icons-material/SettingsOutlined';\r\nimport { useSocketContext } from '../../../services/SocketContext';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport ESPCam from '../templates/ESPCam';\r\nimport styles from '../CSS/Settings.module.css'\r\nimport { theme } from '../templates/Theme.js';\r\nimport { useState, useEffect } from 'react';\r\nimport { IconButton } from '@mui/material';\r\nimport Slider from '../templates/Slider';\r\nimport Switch from '../templates/Switch';\r\nimport Select from '../templates/Select';\r\nimport Box from '@mui/material/Box';\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * ESPCam component with settings\r\n * \r\n * @description This component returns a canvas with the camera stream of an ESPCam and the corresponding setting options. For this, the height and width of the window must be transferred \r\n * and the controlId with which the ESP is to be addressed. In addition, the variables setting and setSetting must be passed. These handle the change of the window size when folding \r\n * and unfolding the settings.\r\n * \r\n * @param {string} component - controlId \r\n * @param {string} width - Transfers the width to ESPCam class \r\n * @param {string} height - Transfer the height to ESPCam class \r\n * @param {boolean} setting - If true, then setting options are hidden, if false then they are displayed and the component window is larger.\r\n * @param {func} setSetting - To change the setting variable value \r\n * \r\n * @returns {React.ReactElement} styled canvas with ESPCam stream and setting options\r\n */\r\nconst ESPCamPlusSettings = (props) => {\r\n    const [switchIsOn, setSwitchStatus] = useState(false);\r\n    const [online, setOnlineStatus] = useState(false);\r\n    const [frameSize, setFrameSize] = useState(10);\r\n    const [contrast, setContrast] = useState(0);\r\n    const [exposure, setExposure] = useState(0);\r\n\r\n    const socketCtx = useSocketContext();\r\n\r\n    const resolution = {\r\n        5: 'QVGA (320x240)',\r\n        8: 'VGA (640x480)',\r\n        9: 'SVGA (800x600)',\r\n        10: 'XGA (1024x768)',\r\n    }\r\n\r\n    // Handles the change of the window size when clicking on the setting icon\r\n    const hiddenSetting = () => {\r\n        props.setSetting(!props.setting)\r\n\r\n        if (props.setting) {\r\n            document.getElementById(props.component).style.left = '-325px'\r\n        } else {\r\n            document.getElementById(props.component).style.left = '-655px'\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Handles the window size when opening the component window.\r\n        if (!props.setting) {\r\n            document.getElementById(props.component).style.left = '-325px'\r\n        }\r\n\r\n        const status = (payload) => {\r\n            if (payload.controlId === props.component) {\r\n                setOnlineStatus(true)\r\n                setSwitchStatus(payload.status.gray)\r\n                setExposure(payload.status.exposure)\r\n                setContrast(payload.status.contrast)\r\n                setFrameSize(payload.status.frameSize)\r\n                //console.log('Status of settings:   ', payload)\r\n            }\r\n        }\r\n\r\n        socketCtx.socket.emit('command', {\r\n            userId: socketCtx.username,\r\n            controlId: props.component,\r\n            getStatus: true\r\n        })\r\n\r\n        socketCtx.socket.emit('getFooter', props.component)\r\n\r\n        socketCtx.socket.on('status', status);\r\n\r\n        return () => {\r\n            socketCtx.socket.removeAllListeners('status', status)\r\n        }\r\n        //Comment needed to prevent a warning\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [socketCtx.socket]);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div className={styles.Settings}>\r\n                <IconButton onClick={hiddenSetting}  >\r\n                    <SettingsOutlinedIcon sx={{ fontSize: 35 }} />\r\n                </IconButton>\r\n                <ESPCam component={props.component} width={'600px'} height={'400px'} />\r\n                {props.setting &&\r\n\r\n                    <div className={styles.Settings}>\r\n                        <Box sx={{ m: 2, width: 250 }} > <h1>Settings</h1> </Box>\r\n                        <Select title='Resolution' component={props.component} online={online} option='frameSize' selectValue={frameSize} list={resolution} />\r\n                        <Switch component={props.component} switchStatus={switchIsOn} online={online} left='Color' right='Gray' option='gray' />\r\n                        <Slider title='Contrast' component={props.component} online={online} sliderValue={contrast} min={-2} max={2} option='contrast' />\r\n                        <Slider title='Exposure' component={props.component} online={online} sliderValue={exposure} min={0} max={1200} option='exposure' />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nESPCamPlusSettings.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    width: propTypes.string.isRequired,\r\n    setting: propTypes.bool.isRequired,\r\n    setSetting: propTypes.func.isRequired\r\n}\r\n\r\nexport default ESPCamPlusSettings;","import Settings from '../UI/CtrlUnits/ESPCamPlusSettings';\r\nimport Window from '../UI/experimentUI/Window';\r\nimport { useState } from 'react';\r\n\r\n/**\r\n * ESPCam component window\r\n * \r\n * @description This React component returns a window with the ESPCam stream and the settings for it.\r\n * \r\n * @param {string} controlId - controlId\r\n * @param {string} title - For setting the title within the window\r\n * @param {number} top - For the positioning of the window \r\n * @param {number} left - For the positioning of the window \r\n * @param {boolean} setting - If the variable is set to true, the settings are displayed within the ESPCam window; if false, they are hidden.\r\n * @param {function} setSettings(newVal) - Function to change the value of the settings varibale\r\n * \r\n * @returns {React.ReactElement} ESPCam component window\r\n */\r\nconst ESPCamStream = (props) => {\r\n  // Handles changing the width of the component window when the settings are to be shown or hidden\r\n  const [setting, setSetting] = useState(false)\r\n  var width = window.innerWidth\r\n\r\n  if (setting) {\r\n    width = '1000px';\r\n  } else if (!setting) {\r\n    width = '670px';\r\n  }\r\n\r\n  return (\r\n    <Window\r\n      id={props.id}\r\n      componentList={[props.id]}\r\n      header={props.title}\r\n      top={props.top}\r\n      left={props.left}\r\n      width={width}\r\n      height={'430px'}\r\n    >\r\n      <Settings\r\n        component={props.id}\r\n        width={width}\r\n        setting={setting}\r\n        setSetting={setSetting}\r\n      />\r\n    </Window>\r\n  );\r\n};\r\nexport default ESPCamStream;","import DeviceThermostatOutlinedIcon from '@mui/icons-material/DeviceThermostatOutlined';\r\nimport styles from '../CSS/HeaterCtrl.module.css';\r\nimport { Button } from '@mui/material';\r\nimport propTypes from \"prop-types\";\r\nimport Select from './Select';\r\n\r\n/**\r\n * Heater settings\r\n * \r\n * @description This Recat component returns the setting options of the thermistor. To do this, the selection options for the drop-down menus \r\n * must be transferred in the form of lists.\r\n * \r\n * @param {string} component - controlId of the thermistor\r\n * @param {number} updateTime -  Set update time\r\n * @param {number} averageTime - Set average time\r\n * \r\n * @returns {React.ReactElement} styled thermistor settings with the specified props\r\n */\r\nconst HeaterSettings = (props) => {\r\n    // List contains all possible selection options for the drop-down menu for setting the average time \r\n    const averageTimeList = {\r\n        100: 100,\r\n        500: 500,\r\n        1000: 1000,\r\n        2000: 2000\r\n    }\r\n\r\n    // List contains all possible selection options for the drop-down menu for setting the update time \r\n    const updateTimeList = {\r\n        1000: 1,\r\n        5000: 5,\r\n        10000: 10\r\n    }\r\n\r\n    return (\r\n        <div className={styles.Temp}>\r\n            <div className={styles.Canvas2}>\r\n                <Button sx={{ fontSize: 17, marginLeft: -34, marginTop: -4, marginBottom: 10 }} startIcon={<DeviceThermostatOutlinedIcon />}>Gauge settings </Button>\r\n                <div className={styles.Select}>\r\n                    <Select sx={{ zIndex: 1500, marginBottom: -10 }} title='Average time (ms)' component={props.component} online={props.online} option='averageTime' selectValue={props.averageTime} list={averageTimeList} />\r\n                    <Select title='Update time (s)' component={props.component} online={props.online} option='updateTime' selectValue={props.updateTime} list={updateTimeList} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nHeaterSettings.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    updateTime: propTypes.number.isRequired,\r\n    averageTime: propTypes.number.isRequired,\r\n    online: propTypes.bool.isRequired\r\n}\r\nexport default HeaterSettings;","import { ThemeProvider, Button, IconButton, Typography } from '@mui/material';\r\nimport MicrowaveOutlinedIcon from '@mui/icons-material/MicrowaveOutlined';\r\nimport SettingsOutlinedIcon from '@mui/icons-material/SettingsOutlined';\r\nimport { useSocketContext } from '../../../services/SocketContext';\r\nimport { useAppContext } from '../../../services/AppContext';\r\nimport HeaterSettings from '../templates/HeaterSettings';\r\nimport styles from '../CSS/HeaterCtrl.module.css';\r\nimport { theme } from '../templates/Theme.js';\r\nimport { useState, useEffect } from 'react';\r\nimport Slider from '../templates/Slider';\r\nimport Switch from '../templates/Switch';\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * HeaterCtrl component\r\n * \r\n * @description The React component contains the currently transmitted temperature of the heater as well as various setting options, both for the heater and for the thermistor.\r\n * \r\n * @param {string} component - controlId of the heater\r\n * @param {string} componentT - controlId of the thermistor\r\n * @param {boolean} setting - If true, then setting options are hidden, if false then they are displayed and the component window is larger.\r\n * @param {func} setSetting - To change the setting variable value \r\n * \r\n * @returns {React.ReactElement} HeaterCtrl control element\r\n */\r\nconst HeaterCtrl = (props) => {\r\n    const [onlineStatus, setOnlineStatus] = useState(false);\r\n    const [powerSwitch, setPowerSwitch] = useState(false);\r\n    const [averageTime, setAverageTime] = useState(100);\r\n    const [updateTime, setUpdateTime] = useState(1000);\r\n    const [powerValue, setPowerValue] = useState(0);\r\n    const [temp, setTemp] = useState('-°C');\r\n\r\n    const socketCtx = useSocketContext();\r\n    const appCtx = useAppContext();\r\n\r\n    // Handles the change of the window size when clicking on the setting icon\r\n    const hiddenSetting = () => {\r\n        props.setSetting(!props.setting)\r\n\r\n        if (props.setting) {\r\n            document.getElementById('smallTemp').style.display = 'block'\r\n            document.getElementById('temp').style.display = 'none'\r\n        } else {\r\n            document.getElementById('smallTemp').style.display = 'none'\r\n            document.getElementById('temp').style.display = 'block'\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Handles the window size when opening the component window.\r\n        if (props.setting) {\r\n            document.getElementById('smallTemp').style.display = 'none'\r\n            document.getElementById('temp').style.display = 'block'\r\n        } else {\r\n            document.getElementById('smallTemp').style.display = 'block'\r\n            document.getElementById('temp').style.display = 'none'\r\n        }\r\n\r\n        const status = (payload) => {\r\n            // Setting the status depending on the different controlIds.\r\n            if (payload.controlId === props.component) {\r\n                setOnlineStatus(true)\r\n                setPowerSwitch(payload.status.isOn)\r\n                setPowerValue(payload.status.pwm)\r\n                // console.log(\"Status  \", payload)\r\n            }\r\n\r\n            if (payload.controlId === props.componentT) {\r\n                setAverageTime(payload.status.averageTime);\r\n                setUpdateTime(payload.status.updateTime);\r\n                // console.log(\"Status  Thermistor\", payload)\r\n            }\r\n        }\r\n\r\n        // When the temperature is received in the form of the data event, it is shortened by decimal places and displayed in the component window.\r\n        const data = (payload) => {\r\n            if (payload.controlId === props.componentT) {\r\n                var string = payload.data.data;\r\n                try { string = string.toFixed(1) + \" °C\" } catch (e) { string = '-°C' }\r\n                setTemp(string);\r\n            }\r\n        }\r\n\r\n        // Sending server commands to request the status of all components\r\n        socketCtx.socket.emit('command', {\r\n            userId: socketCtx.username,\r\n            controlId: props.component,\r\n            getStatus: true\r\n        })\r\n\r\n        socketCtx.socket.emit('command', {\r\n            userId: socketCtx.username,\r\n            controlId: props.componentT,\r\n            getStatus: true\r\n        })\r\n\r\n        // A room is created for the component, into which the clients are then added when they open the corresponding window. By creating the room, the traffic caused by sending the \r\n        // stream should be reduced, as only the clients who really need the stream receive it.\r\n        appCtx.toogleRoomComp(props.component, true);\r\n\r\n        socketCtx.socket.emit('getFooter', props.component)\r\n\r\n        socketCtx.socket.on('status', status);\r\n\r\n        socketCtx.socket.on('data', data);\r\n\r\n        return () => {\r\n            socketCtx.socket.removeAllListeners('status', status)\r\n            socketCtx.socket.removeAllListeners('data', data)\r\n        }\r\n        //Comment needed to prevent a warning\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [socketCtx.socket]);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            {/* Full size window */}\r\n            <div id={'temp'} style={{ display: 'none' }}>\r\n                <div className={styles.Temp}>\r\n                    <Typography id='temp' variant='h2'>{temp}</Typography>\r\n                    <IconButton onClick={hiddenSetting}  >\r\n                        <SettingsOutlinedIcon sx={{ fontSize: 35 }} />\r\n                    </IconButton>\r\n                </div>\r\n                <div className={styles.Canvas1}>\r\n                    <Button sx={{ fontSize: 17 }} startIcon={<MicrowaveOutlinedIcon />}>Heater settings </Button>\r\n                    <Slider title='PowerSwitch' component={props.component} online={onlineStatus} sliderValue={powerValue} min={0} max={255} option='pwm' />\r\n                </div>\r\n\r\n                <div className={styles.Switch} >\r\n                    <Switch component={props.component} online={onlineStatus} switchStatus={powerSwitch} start='Off' end='On' option='switch' />\r\n                </div>\r\n                <HeaterSettings online={true} component={props.componentT} updateTime={updateTime} averageTime={averageTime} />\r\n            </div>\r\n\r\n            {/* Small format window */}\r\n            <div id={'smallTemp'} >\r\n                <div className={styles.TempSmall}>\r\n                    <Typography id='temp' variant='h2'>{temp}</Typography>\r\n                    <IconButton onClick={hiddenSetting}  >\r\n                        <SettingsOutlinedIcon sx={{ fontSize: 35 }} />\r\n                    </IconButton>\r\n                </div>\r\n\r\n                <div className={styles.Canvas1}>\r\n                    <Button sx={{ fontSize: 17 }} startIcon={<MicrowaveOutlinedIcon />}>Heater settings </Button>\r\n                    <Slider title='PowerSwitch' component={props.component} online={onlineStatus} sliderValue={powerValue} min={0} max={255} option='pwm' />\r\n                </div>\r\n\r\n                <div className={styles.SwitchTemp} >\r\n                    <Switch component={props.component} online={onlineStatus} switchStatus={powerSwitch} start='Off' end='On' option='switch' />\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nHeaterCtrl.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    componentT: propTypes.string.isRequired,\r\n    setting: propTypes.bool.isRequired,\r\n    setSetting: propTypes.func.isRequired\r\n}\r\n\r\nexport default HeaterCtrl;\r\n","import HeaterCtrl from '../UI/CtrlUnits/HeaterCtrl';\r\nimport Window from '../UI/experimentUI/Window';\r\n\r\n/**\r\n * Heater component window\r\n * \r\n * @description  This React component returns a window with the content for the heater component window.\r\n *  \r\n * @param {string} id - controlId of the entire component\r\n * @param {string} controlIdHeater - controlId for the relais to turn on/off the heater\r\n * @param {string} controlIdT - controlId for the termistor\r\n * @param {string} title - For setting the title within the window\r\n * @param {boolean} setting - If the variable is set to true, the more heater settings are displayed within the Heater window; if false, they are hidden.\r\n * @param {function} setSettings(newVal) - Function to change the value of the settings varibale\r\n * @param {number} top - For the positioning of the window \r\n * @param {number} left - For the positioning of the window \r\n * \r\n * @returns {React.ReactElement} Heater component window\r\n */\r\nconst Heater = (props) => {\r\n    var width = window.innerWidth\r\n\r\n    if (props.setting) {\r\n        width = '673px'\r\n    } else if (!props.setting) {\r\n        width = '350px'\r\n    }\r\n\r\n    return (\r\n        <Window\r\n            id={props.id}\r\n            componentList={[props.controlIdHeater, props.controlIdThermistor]}\r\n            header={props.title}\r\n            top={props.top}\r\n            left={props.left}\r\n            height='340px'\r\n            width={width}\r\n        >\r\n            <HeaterCtrl\r\n                component={props.controlIdHeater}\r\n                componentT={props.controlIdThermistor}\r\n                setting={props.setting}\r\n                setSetting={props.setSetting}\r\n            />\r\n        </Window>\r\n    )\r\n}\r\nexport default Heater;","import { MdOutlineRotateRight, MdOutlineRotateLeft } from 'react-icons/md';\r\nimport { useSocketContext } from '../../../services/SocketContext';\r\nimport { useAppContext } from '../../../services/AppContext';\r\nimport { usePopUpContext } from \"../../../services/PopUpContext\";\r\nimport styles from '../CSS/RotaryCtrl.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * RotaryCtrl component\r\n * \r\n * @description This React component returns the control RotaryCtrl, which consists of two buttons. The class must be given the controlId of the component, \r\n * as well as top and left for the positioning of the entire element.\r\n * \r\n * @param {string} component - controlId \r\n * @param {string} top - Height positioning of the component inside the window \r\n * @param {string} left - Positioning from the left edge of the component\r\n * \r\n * @returns {React.ReactElement} RotaryCtrl control element\r\n */\r\nconst RotaryCtrl = (props) => {\r\n  const [enteredRotation, setEnteredRotation] = useState(0);\r\n  const [onlineStatus, setOnlineStatus] = useState(false);\r\n  const [rotation, setRotation] = useState(0);\r\n  var direction;\r\n\r\n  const appCtx = useAppContext();\r\n  const popupCtx = usePopUpContext();\r\n  const socketCtx = useSocketContext();\r\n\r\n  useEffect(() => {\r\n    const status = (payload) => {\r\n      if (payload.controlId === props.component) {\r\n        setOnlineStatus(true)\r\n        setRotation(payload.status.absolute);\r\n        (payload.status.busy) ? setOnlineStatus(false) : setOnlineStatus(true);\r\n      }\r\n    }\r\n\r\n    socketCtx.socket.emit('command', {\r\n      userId: socketCtx.username,\r\n      controlId: props.component,\r\n      getStatus: true\r\n    });\r\n\r\n    socketCtx.socket.emit('getFooter', props.component);\r\n\r\n    socketCtx.socket.on('status', status);\r\n\r\n    return () => {\r\n      socketCtx.socket.removeAllListeners('status', status)\r\n\r\n    }\r\n    //Comment needed to prevent a warning\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [socketCtx.socket]);\r\n\r\n  const rotCW_Handler = name => (event) => {\r\n    event.preventDefault();\r\n    direction = 0;\r\n\r\n    // Differentiation whether left or right button was clicked and therefore a negative or positive number must be sent to the server\r\n    (name === 'left') ? direction = -1 * Number(enteredRotation) : direction = Number(enteredRotation);\r\n\r\n    // Prevents sending 0 to the server and displays a popup message instead\r\n    if (direction !== 0) {\r\n      socketCtx.socket.emit('command', {\r\n        userId: socketCtx.username,\r\n        controlId: props.component,\r\n        move: direction,\r\n        color: socketCtx.fontColor,\r\n      });\r\n\r\n      socketCtx.socket.emit('footer', {\r\n        status: 'Used by: ' + socketCtx.username.substring(0, 17),\r\n        controlId: props.component\r\n      });\r\n    } else {\r\n      popupCtx.toggleShowPopUp('Only values greater than 0 can be entered!', 'warning');\r\n    }\r\n    appCtx.addLog('User initiated CW rotation on ' + props.component + ' by ' + enteredRotation + ' steps.');\r\n  };\r\n\r\n  // Handles the entered number\r\n  const changeRotationHandler = (event) => {\r\n    // Prevents the input of negative numbers\r\n    if (event.target.value > -1) {\r\n      setEnteredRotation(event.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={styles.rotaryCtrl} style={{ top: props.top + 'px', left: props.left + 'px' }}>\r\n      <div className={styles.rotaryCtrl}>\r\n        <span>{Number(rotation)}</span>\r\n        <input\r\n          type='number'\r\n          min='0'\r\n          max='100'\r\n          value={enteredRotation}\r\n          onChange={changeRotationHandler}\r\n        />\r\n      </div>\r\n      <button onClick={rotCW_Handler('left')} className={styles.CtrlLeft} disabled={(socketCtx.connected && onlineStatus) ? false : true}>\r\n        <MdOutlineRotateLeft size={28} />\r\n      </button>\r\n      <button onClick={rotCW_Handler('right')} className={styles.CtrlRight} disabled={(socketCtx.connected && onlineStatus) ? false : true}>\r\n        <MdOutlineRotateRight size={28} />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nRotaryCtrl.propTypes = {\r\n  component: propTypes.string.isRequired,\r\n  top: propTypes.string.isRequired,\r\n  left: propTypes.string.isRequired,\r\n}\r\n\r\nexport default RotaryCtrl;","export default __webpack_public_path__ + \"static/media/rotary_outline.c6f9b7e7.png\";","import RotaryCtrl from '../UI/CtrlUnits/RotaryCtrl';\r\nimport Rotary_bg from './media/rotary_outline.png';\r\nimport Window from '../UI/experimentUI/Window';\r\n\r\n/**\r\n * Rotary component window\r\n * \r\n * @description This react component returns a window with the content for the rotary component window.\r\n *  \r\n * @param {string} controlId - controlId\r\n * @param {string} controlIdTop - controlId for the stepper motor \r\n * @param {number} rotation - Initialisation value for the control element\r\n * @param {string} title - For setting the title within the window\r\n * @param {number} top - For the positioning of the window \r\n * @param {number} left - For the positioning of the window \r\n * \r\n * @returns {React.ReactElement} Rotary component window\r\n */\r\nconst Rotary = (props) => {\r\n  return (\r\n    <Window\r\n      id={props.controlId}\r\n      componentList={[props.controlId]}\r\n      header={props.title}\r\n      top={props.top}\r\n      left={props.left}\r\n      width='250px'\r\n      height='235px'\r\n      background={Rotary_bg}\r\n    >\r\n      <RotaryCtrl\r\n        component={props.controlId}\r\n        top='10'\r\n        left='160'\r\n      />\r\n    </Window>\r\n  );\r\n};\r\nexport default Rotary;","export default __webpack_public_path__ + \"static/media/PS_outline.8e83270a.png\";","import { useSocketContext } from \"../../../services/SocketContext\";\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport { useState, useEffect } from \"react\";\r\nimport { theme } from '../templates/Theme.js';\r\nimport Switch from '../templates/Switch';\r\nimport { Box } from '@mui/material';\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * SwitchCtrl component\r\n * \r\n * @description This React component returns a switch with Off on the left and On on the right. This component only needs the contorlId.\r\n * \r\n * @param {string} component - controlId \r\n * \r\n * @returns {React.ReactElement} SwitchCtrl control element\r\n */\r\nconst SwitchCtrl = (props) => {\r\n  const [onlineStatus, setOnlineStatus] = useState(false);\r\n  const [switchIsOn, setSwitch] = useState(false);\r\n  \r\n  const socketCtx = useSocketContext();\r\n\r\n  useEffect(() => {\r\n    const status = (payload) => {\r\n      if (payload.controlId === props.component) {\r\n        setOnlineStatus(true)\r\n        setSwitch(payload.status.isOn)\r\n      }\r\n    }\r\n\r\n    socketCtx.socket.emit(\"command\", {\r\n      userId: socketCtx.username,\r\n      controlId: props.component,\r\n      getStatus: true\r\n    })\r\n\r\n    socketCtx.socket.emit('getFooter', props.component)\r\n\r\n    socketCtx.socket.on(\"status\", status);\r\n\r\n    return () => {\r\n      socketCtx.socket.removeAllListeners('status', status)\r\n    }\r\n    //Comment needed to prevent a warning\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [socketCtx.socket])\r\n\r\n\r\n  return (\r\n    <ThemeProvider theme={theme} >\r\n      <div style={{\r\n        position: 'absolute',\r\n        width: '120px',\r\n        height: '40px',\r\n        border: '2px solid #00ffa8',\r\n        borderRadius: '50px',\r\n        textAlign: 'center',\r\n        top: '40px',\r\n        left: '10px'\r\n      }}>\r\n        <Box sx={{ ml: '-4px' }} >\r\n          <Switch component={props.component} online={onlineStatus} switchStatus={switchIsOn} left='Off' right='On' option=\"switch\" />\r\n        </Box>\r\n      </div>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nSwitchCtrl.propTypes = {\r\n  component: propTypes.string.isRequired,\r\n}\r\n\r\nexport default SwitchCtrl","import PS_Background from './media/PS_outline.png';\r\nimport LaserCtrl from '../UI/CtrlUnits/LaserCtrl';\r\nimport Window from '../UI/experimentUI/Window';\r\n\r\n/**\r\n * Laser power supply component window\r\n * \r\n * @description  This React component returns a window with the content for the Laser power supply component window.\r\n *  \r\n * @param {string} id - controlId of the entire component (same as for the laser alignment)\r\n * @param {string} controlId - controlId for the relais\r\n * @param {string} title - For setting the title within the window\r\n * @param {number} top - For the positioning of the window \r\n * @param {number} left - For the positioning of the window \r\n * \r\n * @returns {React.ReactElement} Laser power supply component window\r\n */\r\nconst Laser = (props) => {\r\n\r\n  return (\r\n    <Window\r\n      id={props.id}\r\n      componentList={[props.controlId]}\r\n      header={props.title}\r\n      top={props.top}\r\n      left={props.left}\r\n      height='240px'\r\n      width='250px'\r\n      background={PS_Background}\r\n    >\r\n      <LaserCtrl\r\n        component={props.controlId}\r\n      />\r\n    </Window>\r\n  )\r\n}\r\nexport default Laser;","export default __webpack_public_path__ + \"static/media/km100_outline.5cffd463.png\";","import KM100_Background from './media/km100_outline.png'\r\nimport RotaryCtrl from '../UI/CtrlUnits/RotaryCtrl';\r\nimport Window from '../UI/experimentUI/Window';\r\n\r\n/**\r\n * KM100 component window\r\n * \r\n * @description  This React component returns a window with the content for the KM100 component window.\r\n *  \r\n * @param {string} id - controlId of the entire component\r\n * @param {string} controlIdTop - controlId for the upper stepper motor \r\n * @param {string} controlIdBottom - controlId for the lower stepper motor\r\n * @param {number} rotationTop - Initialisation value for upper control element\r\n * @param {number} rotationBottom - Initialisation value for lower control element\r\n * @param {string} title - For setting the title within the window\r\n * @param {number} top - For the positioning of the window \r\n * @param {number} left - For the positioning of the window \r\n * \r\n * @returns {React.ReactElement} KM100 component window\r\n */\r\nconst KM100 = (props) => {\r\n  return (\r\n    <Window\r\n      id={props.id}\r\n      componentList={[props.controlIdBottom, props.controlIdTop]}\r\n      header={props.title}\r\n      top={props.top}\r\n      left={props.left}\r\n      height='240px'\r\n      width='250px'\r\n      background={KM100_Background}\r\n\r\n    >\r\n      <RotaryCtrl\r\n        component={props.controlIdTop}\r\n        top='20'\r\n        left='160'\r\n      />\r\n      \r\n      <RotaryCtrl\r\n        component={props.controlIdBottom}\r\n        top='50'\r\n        left='160'\r\n      />\r\n    </Window>\r\n  );\r\n};\r\nexport default KM100;","export default __webpack_public_path__ + \"static/media/linear_outline.7ac97702.png\";","import RotaryCtrl from '../UI/CtrlUnits/RotaryCtrl';\r\nimport SM1ZP_bg from './media/linear_outline.png';\r\nimport Window from '../UI/experimentUI/Window';\r\n\r\n/**\r\n * SM1ZP component window\r\n * \r\n * @description This react component returns a window with the content for the SM1ZP component window.\r\n *  \r\n * @param {string} controlId - controlId\r\n * @param {string} controlIdTop - controlId for the stepper motor \r\n * @param {number} rotation - Initialisation value for the control element\r\n * @param {string} title - For setting the title within the window\r\n * @param {number} top - For the positioning of the window \r\n * @param {number} left - For the positioning of the window \r\n * \r\n * @returns {React.ReactElement} SM1ZP component window\r\n */\r\nconst SM1ZP = (props) => {\r\n  return (\r\n    <Window\r\n      id={props.controlId}\r\n      componentList={[props.controlId]}\r\n      header={props.title}\r\n      top={props.top}\r\n      left={props.left}\r\n      width='250px'\r\n      height='235px'\r\n      background={SM1ZP_bg}\r\n    >\r\n      <RotaryCtrl\r\n        component={props.controlId}\r\n        top='35'\r\n        left='160'\r\n      />\r\n    </Window>\r\n  );\r\n};\r\n\r\nexport default SM1ZP;","import MultiComponentSelection from '../../assembly/MultiComponentSelection';\r\nimport ESPCam from '../../assembly/ESPCamStream';\r\nimport Heater from '../../assembly/Heater';\r\nimport Rotary from '../../assembly/Rotary';\r\nimport Laser from '../../assembly/Laser';\r\nimport KM100 from '../../assembly/KM100';\r\nimport SM1ZP from '../../assembly/SM1ZP';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst MichelsonInterferometer = (props) => {\r\n  let footer = 'Initializing...'\r\n  const [setting, setSetting] = useState(false)\r\n  const [settingHeater, setSettingHeater] = useState(false)\r\n\r\n  var height = window.innerHeight;\r\n  var width = window.innerWidth;\r\n  var halfWidth = width / 2;\r\n  var topHigh = String(height - (height / 3 * 2.7))\r\n  var topHighMiddle = String(height - (height / 1.4))\r\n  var topMiddle = String(height - (height / 2.15))\r\n  var leftLeft = String(width - (halfWidth * 1.9))\r\n  var leftMiddle = String(width - (halfWidth * 1.8))\r\n  var leftRight = String(width - (halfWidth * 0.47))\r\n  var leftMiddleRight = String(width - (halfWidth * 0.4))\r\n  var leftCam = String(width - (halfWidth * 1.485))\r\n\r\n  return (\r\n    <div>\r\n      {/* KM100 */}\r\n      {props.selected.has('KM100_1') && (\r\n        <KM100\r\n          title='Reference Mirror'\r\n          id={'KM100_1'}\r\n          controlIdTop={'KM100_top_1'}\r\n          controlIdBottom={'KM100_bottom_1'}\r\n          rotationTop={0}\r\n          rotationBottom={0}\r\n          footer={footer}\r\n          top={topHigh}\r\n          left={leftLeft}\r\n        />\r\n      )}\r\n      {/* Linear stage */}\r\n      {props.selected.has('linear_1') && (\r\n        <SM1ZP\r\n          title='Linear Movable Mirror'\r\n          controlId={'linear_1'}\r\n          footer={footer}\r\n          rotation={0}\r\n          top={topMiddle}\r\n          left={leftMiddle}\r\n        />\r\n      )}\r\n      {/* Rotary stage plate*/}\r\n      {props.selected.has('plate_rotation') && (\r\n        <Rotary\r\n          title='Glass Plate Rotation Stage'\r\n          controlId={'plate_rotation'}\r\n          footer={footer}\r\n          rotation={0}\r\n          top={topMiddle}\r\n          left={leftRight}\r\n        />\r\n      )}\r\n      {/* Rotary stage Measurement Mirror*/}\r\n      {props.selected.has('heater_rotation') && (\r\n        <Rotary\r\n          title='Mirror Changing Stage'\r\n          controlId={'heater_rotation'}\r\n          footer={footer}\r\n          rotation={0}\r\n          top={topHighMiddle}\r\n          left={leftMiddle}\r\n        />\r\n      )}\r\n      {/* Laser ctrl */}\r\n      {props.selected.has('greenlaser_1') && (\r\n        <KM100\r\n          title='Laser Alignment'\r\n          id={'greenlaser_1'}\r\n          controlIdTop={'greenlaser_top_1'}\r\n          controlIdBottom={'greenlaser_bottom_1'}\r\n          footer={footer}\r\n          top={topMiddle}\r\n          left={leftMiddleRight}\r\n        />\r\n      )}\r\n      {/* Laser power */}\r\n      {props.selected.has('greenlaserPower_1') && (\r\n        <Laser\r\n          title='Power Supply'\r\n          id={'greenlaserPower_1'}\r\n          controlId={'greenlaser_1'}\r\n          footer={footer}\r\n          top={topHigh}\r\n          left={leftRight}\r\n        />\r\n      )}\r\n      {/* Cam1 */}\r\n      {props.selected.has('screen') && (\r\n        <ESPCam\r\n          title='Screen'\r\n          id={'screen'}\r\n          footer={footer}\r\n          top={topHighMiddle}\r\n          left={leftCam}\r\n          setting={setting}\r\n          setSetting= {setSetting}\r\n        />\r\n      )}\r\n      {/* Heater */}\r\n      {props.selected.has('heater') && (\r\n        <Heater\r\n          title='Heatable Mirror Stage'\r\n          id={'heater'}\r\n          controlIdHeater={'heater'}\r\n          controlIdThermistor={'thermistor'}\r\n          footer={footer}\r\n          top={topHighMiddle}\r\n          left={leftCam}\r\n          setting={settingHeater}\r\n          setSetting= {setSettingHeater}\r\n        />\r\n      )}\r\n\r\n      {/* Beam splitter */}\r\n      {props.selected.has('experimentSelection') && (\r\n        <MultiComponentSelection\r\n          title='Multi Component Selection'\r\n          controlId={'experimentSelection'}\r\n          controlId2={'pinhole'}\r\n          controlLED={'redLED'}\r\n          controlLED2={'whiteLED'}\r\n          footer={footer}\r\n          top={topMiddle}\r\n          left={halfWidth}\r\n        />\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\nexport default MichelsonInterferometer;","import { useSocketContext } from '../../../services/SocketContext';\r\nimport ESPCam from '../templates/ESPCam';\r\nimport propTypes from \"prop-types\";\r\nimport { useEffect } from 'react';\r\n\r\n/**\r\n * ESPCam component without settings\r\n * \r\n * @description This component returns a canvas with the camera stream of an ESPCam. For this, the height and width of the window must be transferred \r\n * and the controlId with which the ESP is to be addressed.\r\n * \r\n * @param {string} component - controlId \r\n * @param {string} width - Transfers the width to ESPCam class \r\n * @param {string} height - Transfer the height to ESPCam class \r\n * \r\n * @returns {React.ReactElement} styled canvas with ESPCam stream\r\n */\r\nconst ESPCamWithoutSettings = (props) => {\r\n    const socketCtx = useSocketContext();\r\n\r\n    useEffect(() => {\r\n        document.getElementById(props.component).style.transform = 'rotate(180deg)'\r\n\r\n        const status = (payload) => {\r\n            if (payload.controlId === props.component) {\r\n                //console.log('Status of settings:   ', payload)\r\n            }\r\n        }\r\n\r\n        socketCtx.socket.emit('command', {\r\n            userId: socketCtx.username,\r\n            controlId: props.component,\r\n            getStatus: true\r\n        })\r\n\r\n        socketCtx.socket.emit('getFooter', props.component)\r\n\r\n        socketCtx.socket.on('status', status);\r\n\r\n        return () => {\r\n            socketCtx.socket.removeAllListeners('status', status)\r\n        }\r\n        //Comment needed to prevent a warning\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [socketCtx.socket]);\r\n\r\n    return (\r\n        <ESPCam component={props.component} width={props.width} height={props.height} style={{ borderRadius: '5px', backgroundSize: 'cover', top: 30 }} />\r\n    )\r\n}\r\n\r\nESPCamWithoutSettings.propTypes = {\r\n    component: propTypes.string.isRequired,\r\n    width: propTypes.string.isRequired,\r\n    height: propTypes.string.isRequired,\r\n}\r\n\r\nexport default ESPCamWithoutSettings;","import ESPCam from '../UI/CtrlUnits/ESPCamWithoutSettings';\r\nimport Window from '../UI/experimentUI/Window';\r\n\r\n/**\r\n * Overview camera window\r\n * \r\n * @description This react component returns a window with the content for the Overview Camera window. \r\n *  \r\n * @returns {React.ReactElement} Overview camera window\r\n */\r\nconst CamWindow = () => {\r\n    var width = window.innerWidth\r\n    var height = 0;\r\n\r\n    if (0 < width && width < 576) {\r\n        width = '350px'\r\n        height = '260px'\r\n    }\r\n    else if (576 < width && width < 768) {\r\n        width = '510px'\r\n        height = '340px'\r\n    } else {\r\n        width = '600px'\r\n        height = '400px'\r\n    }\r\n\r\n\r\n    return (\r\n        <Window\r\n            header={'Top View of Experiment'}\r\n            top={'200'}\r\n            left={'650'}\r\n            id={'overview'}\r\n            componentList={['overview']}\r\n            width={width}\r\n            height={height}\r\n            footer={'none'}\r\n            topper={'none'}\r\n        >\r\n            <ESPCam\r\n                component={'overview'}\r\n                width={width}\r\n                height={height}\r\n            />\r\n        </Window>\r\n    );\r\n};\r\nexport default CamWindow;","export default __webpack_public_path__ + \"static/media/xrtl_team.9c8d8d7c.png\";","import styles from \"../CSS/InfoWindowContent.module.css\";\r\nimport bgTeam from \"../../media/images/xrtl_team.png\";\r\n\r\n/**\r\n * Information text\r\n * \r\n * @description This file contains the content and text for the information window.\r\n *  \r\n * @returns {React.ReactElement} Content and Text for the information window\r\n */\r\nconst InfoWindowContent = () => {\r\n  return (\r\n\r\n    <div className={styles.mainWrapper} style={{ backgroundImage: \"url(\\\"\" + bgTeam + \"\\\")\" }}\r\n    >\r\n      Remote labs represent a groundbreaking approach to science education and collaboration, facilitating communication and experimentation from afar. However, creating remote access capabilities can be prohibitively expensive or technically challenging, particularly for non-IT and non-engineering disciplines. To make remote labs accessible across all fields, we need a user-friendly platform that enables researchers, assistants, and technical staff to implement them independently. To that end, we are proud to present XR TwinLab (XRTL), an open-source toolbox designed specifically for the field of Photonics. With its modular structure XRTL offers a flexible, web-based application for controlling optical experimental setups. This exciting project is currently being developed by the esteemed Abbe School of Photonics and the Open Makerspace Lichtwerkstatt Jena.\r\n\r\n      Feel free to follow our <a href=\"https://github.com/Lichtwerkstatt/XRTL_SPA\">Git Repo</a> or <a href=\"mailto:team@lichtwerkstatt-jena.de\">Contact us.</a>\r\n\r\n      <p>\r\n        Best! Clara, Fabian, Falko, Jari and Johannes\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\nexport default InfoWindowContent;","import InfoWindowContent from \"./Content/InfoWindowContent\";\r\nimport Window from \"../UI/experimentUI/Window\";\r\n\r\n/**\r\n * Information window\r\n * \r\n * @description This react component returns a window with the content for the information window.\r\n *  \r\n * @returns {React.ReactElement} Information window\r\n */\r\nconst InfoWindow = () => {\r\n    var width = window.innerWidth\r\n    var height = 0;\r\n\r\n    if (0 < width && width < 576) {\r\n        width = '350px'\r\n        height = '650px'\r\n    }\r\n    else {\r\n        width = '600px'\r\n        height = '517px'\r\n    }\r\n\r\n    return (\r\n        <Window\r\n            header=\"About XR TwinLab\"\r\n            id='info'\r\n            top=\"200\"\r\n            left=\"200\"\r\n            width={width}\r\n            height={height}\r\n            footer={'none'}\r\n            topper={'para'}\r\n        >\r\n            <InfoWindowContent />\r\n        </Window>\r\n    );\r\n};\r\nexport default InfoWindow;","import MichelsonInterferometer from \"../../experiment/MichelsonInterferometer/MichelsonInterferometer\";\r\nimport { useSocketContext } from \"../../../services/SocketContext\";\r\nimport { usePopUpContext } from \"../../../services/PopUpContext\";\r\nimport { useAppContext } from \"../../../services/AppContext\";\r\nimport CamWindow from \"../../windows/OverviewCamWindow\";\r\nimport { useEffect, Fragment } from \"react\";\r\nimport InfoWindow from \"../../windows/InfoWindow\";\r\nimport { isEqual } from 'lodash';\r\nimport { memo } from \"react\";\r\n\r\n/**\r\n *  Fragment component \r\n * \r\n * @description This React component returns several components, on one hand the information window, the overview camera window and on the other hand the \r\n * experiment class that handles the rendering of the component windows. Furthermore, within this component, the auth/authfail command is handled and the \r\n * associated pop-up windows. The underConstruction command is processed within this React component.\r\n * \r\n * @returns {React.Fragment} Information window, the overview camera and experiment component  \r\n */\r\nconst ExperimentUILayer = () => {\r\n  const socketCtx = useSocketContext();\r\n  const popupCtx = usePopUpContext();\r\n  const appCtx = useAppContext();\r\n\r\n  useEffect(() => {\r\n    // If authentication was successful on the server side, then auth command is received with the colour assigned by the server.\r\n    const auth = (color) => {\r\n      popupCtx.toggleShowPopUp('Connection successful!', 'success');\r\n      socketCtx.socket.emit('userId', socketCtx.username);\r\n      socketCtx.setConnected(true);\r\n      socketCtx.setFontColor(color);\r\n    }\r\n\r\n    // When underConstruction command is received\r\n    const underConstruction = (payload) => {\r\n      appCtx.toggleunderConstruction(payload);\r\n    }\r\n\r\n    // If authentication fails on the server side because too many users are connected to the server, the authfailed command is sent to the client.\r\n    const authFailed = () => {\r\n      socketCtx.setConnected(false);\r\n      popupCtx.toggleShowPopUp('To many user are connected right now!', 'warning');\r\n    }\r\n\r\n    socketCtx.socket.on('AuthFailed', authFailed)\r\n\r\n    socketCtx.socket.on('Auth', auth);\r\n\r\n    socketCtx.socket.on('underConstruction', underConstruction)\r\n\r\n    // Prevents the rendering of the pop-up message when the web page is opened.\r\n    if (!socketCtx.socket.connected) {\r\n      popupCtx.toggleShowPopUp('No server connection!', 'error');\r\n    }\r\n\r\n    return () => {\r\n      socketCtx.socket.removeAllListeners('underConstruction', underConstruction)\r\n      socketCtx.socket.removeAllListeners('AuthFailed', authFailed)\r\n      socketCtx.socket.removeAllListeners('Auth', auth)\r\n\r\n    }\r\n    //Comment needed to prevent a warning\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [socketCtx.socket]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {appCtx.showInfoWindow && <InfoWindow />}\r\n      {appCtx.showCam && <CamWindow />}\r\n      <MichelsonInterferometer\r\n        toggleSelect={appCtx.toggleSelectedComp}\r\n        selected={appCtx.selectedComps}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\nexport default memo(ExperimentUILayer, isEqual);","import { Html } from '@react-three/drei';\r\nimport propTypes from \"prop-types\";\r\nimport { isEqual } from 'lodash';\r\nimport { memo } from 'react'\r\n\r\n/**\r\n * Descriptive tag component\r\n * \r\n * @description The React component returns the tag of a component for the 3D model. For this, the title, the description and the position within the 3D space must be specified.\r\n * \r\n * @param {string} title - title of a component\r\n * @param {string} description - Short description of the components\r\n * @param {string} position  - Positioning of the tag\r\n * \r\n * @returns {React.ReactElement} styled tag\r\n */\r\nconst DescriptiveTag = (props) => {\r\n  const wrapperStyle = {\r\n    color: 'white',\r\n    width: '200px',\r\n    height: '50px',\r\n    position: 'absolute',\r\n    left: props.position.x + 'px',\r\n    top: props.position.y + 'px',\r\n    transform: 'translateY(-100px)',\r\n  };\r\n  return <Html position={props.position} style={wrapperStyle} zIndexRange={[0, 10]} >\r\n\r\n    <div\r\n      style={{\r\n        height: '100px',\r\n        width: '0px',\r\n        borderLeft: '2px solid white',\r\n        float: 'left',\r\n      }}\r\n    ></div>\r\n\r\n    <div style={{ 'marginLeft': '12px' }}>\r\n      <span>\r\n        <b>{props.title}</b>\r\n      </span>\r\n      <br />\r\n      {props.description}\r\n      <br />\r\n      {props.status}\r\n    </div>\r\n  </Html>\r\n\r\n};\r\n\r\nDescriptiveTag.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  description: propTypes.string.isRequired,\r\n  position: propTypes.array.isRequired\r\n}\r\n\r\nexport default memo(DescriptiveTag, isEqual);","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, memo } from 'react';\r\nimport { useGLTF, Box, Cylinder} from '@react-three/drei';\r\nimport DescriptiveTag from \"../../UI/experimentUI/DescriptiveTag\";\r\nimport {isEqual} from 'lodash';\r\n\r\nexport function Model(props) {\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(\"/model/MI_230104.glb\");\r\n  return (\r\n    <group {...props} dispose={null}>\r\n      <group name=\"Scene\">\r\n        <group name=\"Optical elements\">\r\n          {/* Glass Materials need to be generated here*/}\r\n          {/* Beam Splitter cube */}\r\n          <Box\r\n            position={[-0.55, 0.66, -0.1]}\r\n            args={[1, 1, 1]}\r\n            scale={[0.25, 0.25, 0.25]}\r\n          >\r\n            <meshPhysicalMaterial\r\n              thickness={1}\r\n              roughness={0.1}\r\n              transmission={1}\r\n              clearcoat={0.5}\r\n              clearcoatRoughness={0}\r\n              ior={1.1}\r\n              envMapIntensity={25}\r\n              color={\"#ffffff\"}\r\n              attenuationColor={\"#00ffff\"}\r\n              attenuationDistance={5}\r\n            />\r\n          </Box>\r\n          {/* Refraction Plate 1 */}\r\n          <Box\r\n            position={[-0.45, 0.55, 0.58]}\r\n            args={[1, 1, 1]}\r\n            scale={[0.5, 0.5, 0.125]}\r\n          >\r\n            <meshPhysicalMaterial\r\n              thickness={1}\r\n              roughness={0.1}\r\n              transmission={1}\r\n              clearcoat={0.5}\r\n              clearcoatRoughness={0}\r\n              ior={1.1}\r\n              envMapIntensity={25}\r\n              color={\"#9999ff\"}\r\n              attenuationColor={\"#00ffff\"}\r\n              attenuationDistance={5}\r\n            />\r\n          </Box>\r\n          {/* Refraction Plate 2 */}\r\n          <Box\r\n            position={[0.2, 0.55, 0.44]}\r\n            args={[1, 1, 1]}\r\n            scale={[0.5, 0.5, 0.125]}\r\n          >\r\n            <meshPhysicalMaterial\r\n              thickness={1}\r\n              roughness={0.1}\r\n              transmission={1}\r\n              clearcoat={0.5}\r\n              clearcoatRoughness={0}\r\n              ior={1.1}\r\n              envMapIntensity={25}\r\n              color={\"#99ff99\"}\r\n              attenuationColor={\"#00ffff\"}\r\n              attenuationDistance={5}\r\n            />\r\n          </Box>\r\n          {/* Beam Splitter slim is defined in 'off' Overlay*/}\r\n\r\n          {/* Lens */}\r\n          <Cylinder\r\n            position={[0.7, 0.67, -0.13]}\r\n            args={[1, 1, 1]}\r\n            rotation={[0, 0, Math.PI / 2]}\r\n            scale={[0.14, 0.05, 0.14]}\r\n          >\r\n            <meshPhysicalMaterial\r\n              thickness={1}\r\n              roughness={0.1}\r\n              transmission={1}\r\n              clearcoat={0.5}\r\n              clearcoatRoughness={0}\r\n              ior={1.1}\r\n              envMapIntensity={25}\r\n              color={\"#ffffff\"}\r\n              attenuationColor={\"#00ffff\"}\r\n              attenuationDistance={5}\r\n            />\r\n          </Cylinder>\r\n        </group>\r\n        <group\r\n          name=\"Mirror1\"\r\n          position={[0,0,0]}\r\n          onPointerDown={(e) => {\r\n            e.stopPropagation();\r\n            props.toggleSelect(\"KM100_1\");\r\n          }}\r\n        >\r\n          {props.showTags && <DescriptiveTag position={[-0.5, 1, 1]} title=\"Reference Mirror\" description=\"KM100 Double Rotary Control\" />}\r\n          <mesh\r\n            name=\"SideMirrorMesh\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.SideMirrorMesh.geometry}\r\n            material={materials.BlackParts}\r\n          >\r\n            {props.selected.has(\"KM100_1\") ? (\r\n              <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n              ) : (\r\n                <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                )}          \r\n          </mesh>\r\n          <mesh\r\n            name=\"SideMirrorMesh_1\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.SideMirrorMesh_1.geometry}\r\n            material={materials.ShinyParts}\r\n          />\r\n        \r\n          <mesh\r\n            name=\"SideMirrorMesh_2\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.SideMirrorMesh_2.geometry}\r\n            material={materials.Mirror}\r\n          />\r\n        </group>\r\n\r\n        <group\r\n          name=\"Schirm\"\r\n          position={[0, 0, 0]}\r\n          onPointerDown={(e) => {\r\n            e.stopPropagation();\r\n            props.toggleSelect(\"screen\");\r\n          }}\r\n        >\r\n          {props.showTags && <DescriptiveTag position={[-0.4, 1, -1.3]} title=\"Screen\" description=\"Screen with Interference Pattern\" />}\r\n          <mesh\r\n            name=\"PlaneMesh\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.PlaneMesh.geometry}\r\n            material={materials.WhiteParts}\r\n          />\r\n        \r\n          <mesh\r\n            name=\"PlaneMesh_1\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.PlaneMesh_1.geometry}\r\n            material={materials.BlackParts}\r\n          />\r\n        </group>\r\n        <group\r\n          name=\"Laser\"\r\n          position={[0, 0, 0]}\r\n          onPointerDown={(e) => {\r\n            e.stopPropagation();\r\n            props.toggleSelect(\"greenlaser_1\");\r\n          }}\r\n        >\r\n          {props.showTags && <DescriptiveTag position={[1.6, 1, -0.15]} title=\"Laser Alignment\" description=\"KM100 Double Rotary Control\" />}\r\n          <mesh\r\n            name=\"LaserMesh\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.LaserMesh.geometry}\r\n            material={materials.BlackParts}\r\n          >\r\n            {props.selected.has(\"greenlaser_1\") ? (\r\n                <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n              ) : (\r\n                <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n              )}\r\n          </mesh>\r\n          <mesh\r\n            name=\"LaserMesh_1\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.LaserMesh_1.geometry}\r\n            material={materials.ShinyParts}\r\n          />\r\n       </group>\r\n\r\n        <mesh\r\n          name=\"SD5\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.SD5.geometry}\r\n          material={materials.BlackParts}\r\n          onPointerDown={(e) => {\r\n            e.stopPropagation();\r\n            props.toggleSelect(\"greenlaserPower_1\")\r\n          }}\r\n        >\r\n          {props.showTags && <DescriptiveTag position={[1.8, 0.6, -0.9]} title=\"Power Supply\" description=\"5V Laser Power Supply\" />}\r\n          {props.selected.has(\"greenlaserPower_1\") ? (\r\n            <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n          ) : (\r\n            <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n          )}\r\n        </mesh>\r\n        {\r\n          (props.showBeam === 'off') &&\r\n          <group>\r\n            <group\r\n                name=\"BS_slim\"\r\n                position={[0.64, 0, -0.52]}\r\n                onPointerDown={(e) => {\r\n                  e.stopPropagation();\r\n                  props.toggleSelect(\"experimentSelection\");\r\n                }}\r\n              >\r\n                {props.showTags && <DescriptiveTag position={[0, 1, -0.15]} title=\"Multi Component Selection\" description=\"Custom Revolving Mount\" />}\r\n                <mesh\r\n                  name=\"Cylinder\"\r\n                  castShadow\r\n                  receiveShadow\r\n                  geometry={nodes.Cylinder.geometry}\r\n                  material={materials.BlackParts}\r\n                >\r\n                  {props.selected.has(\"experimentSelection\") ? (\r\n                    <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n                  ) : (\r\n                    <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                  )}\r\n                </mesh>\r\n                <mesh\r\n                  name=\"Cylinder_1\"\r\n                  castShadow\r\n                  receiveShadow\r\n                  geometry={nodes.Cylinder_1.geometry}\r\n                  material={materials.ShinyParts}\r\n                />\r\n              </group>\r\n              <Cylinder\r\n                position={[0.64, 0.68, -0.66]}\r\n                args={[1, 1, 1]}\r\n                rotation={[0, -Math.PI / 4, Math.PI / 2]}\r\n                scale={[0.14, 0.05, 0.14]}\r\n              >\r\n                <meshPhysicalMaterial\r\n                  thickness={1}\r\n                  roughness={0.1}\r\n                  transmission={1}\r\n                  clearcoat={0.5}\r\n                  clearcoatRoughness={0}\r\n                  ior={1.1}\r\n                  envMapIntensity={25}\r\n                  color={\"#ffffff\"}\r\n                  attenuationColor={\"#00ffff\"}\r\n                  attenuationDistance={5}\r\n                />\r\n              </Cylinder>\r\n          </group>\r\n        }\r\n        {\r\n          (props.showBeam === 'on') &&\r\n          <group>\r\n            <mesh\r\n            name=\"LaserBeam\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.LaserBeam.geometry}\r\n            material={materials.Laser}\r\n            >\r\n              <meshStandardMaterial color=\"#65ff00\" transparent opacity={0.8} emissive emissiveIntensity={1}/>\r\n            </mesh>\r\n            <group\r\n              name=\"LED\"\r\n              position={[0.64, 0.45, -0.67]}\r\n              rotation={[Math.PI, -1.18, Math.PI]}\r\n              scale={0.05}\r\n              onPointerDown={(e) => {\r\n                e.stopPropagation();\r\n                props.toggleSelect(\"experimentSelection\");\r\n              }}\r\n            >\r\n              {props.showTags && <DescriptiveTag position={[0, 11, 0]} title=\"Multi Component Selection\" description=\"Custom Revolving Mount\" />}\r\n              <mesh\r\n                name=\"Cylinder007\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder007.geometry}\r\n                material={materials['ShinyParts.005']}\r\n              ></mesh>\r\n              <mesh\r\n                name=\"Cylinder007_1\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder007_1.geometry}\r\n                material={materials['BlackParts.005']}\r\n              >\r\n                {props.selected.has(\"experimentSelection\") ? (\r\n                  <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n                ) : (\r\n                  <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                )}\r\n              </mesh>\r\n            </group>\r\n          </group> \r\n        }\r\n\r\n        {\r\n          (props.showBeam === 'split') && \r\n          <group>\r\n            <mesh\r\n              name=\"LaserBeamBS\"\r\n              geometry={nodes.LaserBeamBS.geometry}\r\n              material={materials.Laser}\r\n              position={[-0.53, 0.68, -0.13]}\r\n              rotation={[0, 0, -Math.PI / 2]}\r\n              scale={0.17}\r\n            >\r\n              <meshStandardMaterial color=\"#65ff00\" transparent opacity={0.8} emissive emissiveIntensity={1}/>\r\n            </mesh>\r\n            <mesh\r\n              name=\"LaserBeam\"\r\n              castShadow\r\n              receiveShadow\r\n              geometry={nodes.LaserBeam.geometry}\r\n              material={materials.Laser}\r\n            >\r\n              <meshStandardMaterial color=\"#65ff00\" transparent opacity={0.8} emissive emissiveIntensity={1}/>\r\n            </mesh> \r\n            <group\r\n              name=\"BS_slim\"\r\n              position={[0, 0, 0]}\r\n              onPointerDown={(e) => {\r\n                e.stopPropagation();\r\n                props.toggleSelect(\"experimentSelection\");\r\n              }}\r\n            >\r\n              {props.showTags && <DescriptiveTag position={[0, 1, -0.1]} title=\"Multi Component Selection\" description=\"Custom Revolving Mount\" />}\r\n              <mesh\r\n                name=\"Cylinder\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder.geometry}\r\n                material={materials.BlackParts}\r\n              >\r\n                {props.selected.has(\"experimentSelection\") ? (\r\n                  <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n                ) : (\r\n                  <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                )}\r\n              </mesh>\r\n              <mesh\r\n                name=\"Cylinder_1\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder_1.geometry}\r\n                material={materials.ShinyParts}\r\n              />\r\n              <Cylinder\r\n                position={[0, 0.68, -0.14]}\r\n                args={[1, 1, 1]}\r\n                rotation={[0, -Math.PI / 4, Math.PI / 2]}\r\n                scale={[0.14, 0.05, 0.14]}\r\n              >\r\n                <meshPhysicalMaterial\r\n                  thickness={1}\r\n                  roughness={0.1}\r\n                  transmission={1}\r\n                  clearcoat={0.5}\r\n                  clearcoatRoughness={0}\r\n                  ior={1.1}\r\n                  envMapIntensity={25}\r\n                  color={\"#ffffff\"}\r\n                  attenuationColor={\"#00ffff\"}\r\n                  attenuationDistance={5}\r\n                />\r\n              </Cylinder>\r\n            </group>\r\n            <group\r\n              name=\"LED\"\r\n              position={[0.64, 0.45, -0.67]}\r\n              rotation={[Math.PI, -1.18, Math.PI]}\r\n              scale={0.05}\r\n              onPointerDown={(e) => {\r\n                e.stopPropagation();\r\n                props.toggleSelect(\"experimentSelection\");\r\n              }}\r\n            >\r\n              {props.showTags && <DescriptiveTag position={[0, 11, 0]} title=\"Multi Component Selection\" description=\"Custom Revolving Mount\" />}\r\n              <mesh\r\n                name=\"Cylinder007\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder007.geometry}\r\n                material={materials['ShinyParts.005']}\r\n              ></mesh>\r\n              <mesh\r\n                name=\"Cylinder007_1\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder007_1.geometry}\r\n                material={materials['BlackParts.005']}\r\n              >\r\n                {props.selected.has(\"experimentSelection\") ? (\r\n                  <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n                ) : (\r\n                  <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                )}\r\n              </mesh>\r\n            </group>\r\n          </group>  \r\n        }\r\n\r\n        {(props.showLED === 'none') &&\r\n        <mesh/>\r\n        }\r\n\r\n        {(props.showLED === 'white') &&\r\n          <group>\r\n            <mesh\r\n              name=\"LEDLightWhite\"\r\n              geometry={nodes.LEDLightWhite.geometry}\r\n              material={materials.LEDWhite}\r\n              position={[-0.7, 0.67, -0.12]}\r\n              rotation={[-Math.PI / 2, Math.PI / 2, 0]}\r\n              scale={0.17}\r\n            >\r\n              <meshStandardMaterial color=\"#ffffff\" transparent opacity={0.8} emissive emissiveIntensity={1}/>\r\n            </mesh>\r\n            <group\r\n              name=\"BS_slim\"\r\n              position={[0.64, 0, -0.52]}\r\n              onPointerDown={(e) => {\r\n                e.stopPropagation();\r\n                props.toggleSelect(\"experimentSelection\");\r\n              }}\r\n            >\r\n              {props.showTags && <DescriptiveTag position={[0, 1, -0.1]} title=\"Multi Component Selection\" description=\"Custom Revolving Mount\" />}\r\n              <mesh\r\n                name=\"Cylinder\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder.geometry}\r\n                material={materials.BlackParts}\r\n              >\r\n                {props.selected.has(\"experimentSelection\") ? (\r\n                  <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n                ) : (\r\n                  <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                )}\r\n              </mesh>\r\n              <mesh\r\n                name=\"Cylinder_1\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder_1.geometry}\r\n                material={materials.ShinyParts}\r\n              />\r\n            </group>\r\n            <group\r\n              name=\"LED\"\r\n              position={[0, 0.45, -0.13]}\r\n              rotation={[Math.PI, -1.18, Math.PI]}\r\n              scale={0.05}\r\n              onPointerDown={(e) => {\r\n                e.stopPropagation();\r\n                props.toggleSelect(\"experimentSelection\");\r\n              }}\r\n            >\r\n              {props.showTags && <DescriptiveTag position={[0, 11, 0]} title=\"Multi Component Selection\" description=\"Custom Revolving Mount\" />}\r\n              <mesh\r\n                name=\"Cylinder007\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder007.geometry}\r\n                material={materials['ShinyParts.005']}\r\n              ></mesh>\r\n              <mesh\r\n                name=\"Cylinder007_1\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder007_1.geometry}\r\n                material={materials['BlackParts.005']}\r\n              >\r\n                {props.selected.has(\"experimentSelection\") ? (\r\n                  <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n                ) : (\r\n                  <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                )}\r\n              </mesh>\r\n            </group>\r\n            <Cylinder\r\n            position={[0.64, 0.68, -0.66]}\r\n            args={[1, 1, 1]}\r\n            rotation={[0, -Math.PI / 4, Math.PI / 2]}\r\n            scale={[0.14, 0.05, 0.14]}\r\n          >\r\n            <meshPhysicalMaterial\r\n              thickness={1}\r\n              roughness={0.1}\r\n              transmission={1}\r\n              clearcoat={0.5}\r\n              clearcoatRoughness={0}\r\n              ior={1.1}\r\n              envMapIntensity={25}\r\n              color={\"#ffffff\"}\r\n              attenuationColor={\"#00ffff\"}\r\n              attenuationDistance={5}\r\n            />\r\n          </Cylinder>\r\n          </group>\r\n        }\r\n\r\n        {(props.showLED === 'red') &&\r\n          <group>\r\n            <mesh\r\n              name=\"LEDLightRed\"\r\n              geometry={nodes.LEDLightRed.geometry}\r\n              material={materials.LEDRed}\r\n              position={[-0.7, 0.67, -0.12]}\r\n              rotation={[-Math.PI / 2, Math.PI / 2, 0]}\r\n              scale={0.17}\r\n            >\r\n              <meshStandardMaterial color=\"#ff3900\" transparent opacity={0.8} emissive emissiveIntensity={1}/>\r\n            </mesh>\r\n            <group\r\n              name=\"BS_slim\"\r\n              position={[0.64, 0, -0.52]}\r\n              onPointerDown={(e) => {\r\n                e.stopPropagation();\r\n                props.toggleSelect(\"experimentSelection\");\r\n              }}\r\n            >\r\n              {props.showTags && <DescriptiveTag position={[0, 1.3, -0.1]} title=\"Multi Component Selection\" description=\"Custom Revolving Mount\"/>}\r\n              <mesh\r\n                name=\"Cylinder\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder.geometry}\r\n                material={materials.BlackParts}\r\n              >\r\n                {props.selected.has(\"experimentSelection\") ? (\r\n                  <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n                ) : (\r\n                  <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                )}\r\n              </mesh>\r\n              <mesh\r\n                name=\"Cylinder_1\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder_1.geometry}\r\n                material={materials.ShinyParts}\r\n              />\r\n            </group>\r\n            <group\r\n              name=\"LED\"\r\n              position={[0, 0.45, -0.13]}\r\n              rotation={[Math.PI, -1.18, Math.PI]}\r\n              scale={0.05}\r\n              onPointerDown={(e) => {\r\n                e.stopPropagation();\r\n                props.toggleSelect(\"experimentSelection\");\r\n              }}\r\n            >\r\n              {props.showTags && <DescriptiveTag position={[0, 11, 0]} title=\"Multi Component Selection\" description=\"Custom Revolving Mount\" />}\r\n              <mesh\r\n                name=\"Cylinder007\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder007.geometry}\r\n                material={materials['ShinyParts.005']}\r\n              ></mesh>\r\n              <mesh\r\n                name=\"Cylinder007_1\"\r\n                castShadow\r\n                receiveShadow\r\n                geometry={nodes.Cylinder007_1.geometry}\r\n                material={materials['BlackParts.005']}\r\n              >\r\n                {props.selected.has(\"experimentSelection\") ? (\r\n                  <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n                ) : (\r\n                  <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n                )}\r\n              </mesh>\r\n            </group>\r\n            <Cylinder\r\n            position={[0.64, 0.68, -0.66]}\r\n            args={[1, 1, 1]}\r\n            rotation={[0, -Math.PI / 4, Math.PI / 2]}\r\n            scale={[0.14, 0.05, 0.14]}\r\n          >\r\n            <meshPhysicalMaterial\r\n              thickness={1}\r\n              roughness={0.1}\r\n              transmission={1}\r\n              clearcoat={0.5}\r\n              clearcoatRoughness={0}\r\n              ior={1.1}\r\n              envMapIntensity={25}\r\n              color={\"#ffffff\"}\r\n              attenuationColor={\"#00ffff\"}\r\n              attenuationDistance={5}\r\n            />\r\n          </Cylinder> \r\n          </group>\r\n        }\r\n\r\n    \r\n        <group\r\n          name=\"TranslateMirror\"\r\n          position={[-1.76, 0.62, 0.03]}\r\n          onPointerDown={(e) => {\r\n            e.stopPropagation();\r\n            props.toggleSelect(\"linear_1\");\r\n          }}\r\n        >\r\n          {props.showTags && <DescriptiveTag position={[0, 0.4, 0]} title=\"Linear Movable Mirror\" description=\"SM1ZP/M Translation Mount\" />}\r\n          <mesh\r\n            name=\"TranslateMirrorMesh005\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.TranslateMirrorMesh005.geometry}\r\n            material={materials.BlackParts}\r\n          >\r\n            {props.selected.has(\"linear_1\") ? (\r\n              <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n              ) : (\r\n              <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n            )}\r\n          </mesh>\r\n          <mesh\r\n            name=\"TranslateMirrorMesh005_1\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.TranslateMirrorMesh005_1.geometry}\r\n            material={materials.ShinyParts}\r\n          />\r\n          <mesh\r\n            name=\"TranslateMirrorMesh005_2\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.TranslateMirrorMesh005_2.geometry}\r\n            material={materials.Mirror}\r\n          />\r\n        </group>\r\n                  \r\n        <mesh\r\n          name=\"TranslateMirrorBase\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.TranslateMirrorBase.geometry}\r\n          material={materials.BlackParts}\r\n          position={[-1.88, 0.11, -0.01]}\r\n        />\r\n\r\n        <group\r\n          name=\"ThermalMirror\"\r\n          position={[-2.7, 0.82, -0.91]}\r\n          rotation={[0, -Math.PI / 2, 0]}\r\n          onPointerDown={(e) => {\r\n            e.stopPropagation();\r\n            props.toggleSelect(\"heater\");\r\n          }}\r\n        >\r\n          {props.showTags && <DescriptiveTag position={[0, 0.2, 0]} title=\"Heatable Mirror Stage\" description=\"Mirror Mounted on an Aluminum Rod\" />}\r\n          <mesh \r\n            name=\"Cylinder008\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.Cylinder008.geometry}\r\n            material={materials['Material.002']}\r\n          >\r\n            {props.selected.has(\"heater\") ? (\r\n              <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n            ) : (\r\n              <meshStandardMaterial color=\"#884422\" opacity={1.0}/>\r\n            )}\r\n          </mesh>\r\n          <mesh \r\n            name=\"Cylinder008_1\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.Cylinder008_1.geometry}\r\n            material={materials['BlackParts.001']}\r\n          >\r\n            {props.selected.has(\"heater\") ? (\r\n              <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n            ) : (\r\n              <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n            )}\r\n          </mesh>\r\n          <mesh\r\n            name=\"Cylinder008_2\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.Cylinder008_2.geometry}\r\n            material={materials['ShinyParts.001']}\r\n          />\r\n          <mesh\r\n            name=\"Cylinder008_3\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.Cylinder008_3.geometry}\r\n            material={materials['Alu.001']}\r\n          />\r\n          <mesh\r\n            name=\"Cylinder008_4\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.Cylinder008_4.geometry}\r\n            material={materials['Mirror.002']}\r\n          />\r\n          <mesh\r\n            name=\"Cylinder008_5\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.Cylinder008_5.geometry}\r\n            material={materials.BlackParts}\r\n          >\r\n            {props.selected.has(\"heater\") ? (\r\n              <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n            ) : (\r\n              <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n            )}\r\n          </mesh>\r\n        </group>\r\n\r\n        <group\r\n          name=\"TranslateMirrorBase\"\r\n          position={[-2.38, 0.11, -1.01]}\r\n          onPointerDown={(e) => {\r\n            e.stopPropagation();\r\n            props.toggleSelect('heater_rotation');\r\n          }}\r\n        >\r\n          {props.showTags && <DescriptiveTag position={[0, 0.2, 0]} title=\"Mirror Changing Stage\" description=\"PR01/M Rotation Stage\" />}\r\n          <mesh\r\n            name=\"TranslateMirrorMesh004\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.TranslateMirrorMesh004.geometry}\r\n            material={materials.BlackParts}\r\n          >  \r\n            {props.selected.has('heater_rotation') ? (\r\n              <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n            ) : (\r\n              <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n            )}\r\n          </mesh>\r\n          <mesh\r\n            name=\"TranslateMirrorMesh004_1\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes.TranslateMirrorMesh004_1.geometry}\r\n            material={materials.ShinyParts}\r\n          />\r\n        </group>\r\n        \r\n        <group\r\n          name=\"RotaryStage\"\r\n          position={[-0.12, 0, 0.51]}\r\n          rotation={[0, -1.57, 0]}\r\n          onPointerDown={(e) => {\r\n            e.stopPropagation();\r\n            props.toggleSelect('plate_rotation');\r\n          }}\r\n        >\r\n          {props.showTags && <DescriptiveTag position={[0, 0.5, 0]} title=\"Glass Plate Rotation Stage\" description=\"PR01/M Rotation Stage\" />}\r\n          <mesh\r\n            name=\"PR01_M-Step001\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['PR01_M-Step001'].geometry}\r\n            material={materials['BlackParts.004']}\r\n          >\r\n            {props.selected.has('plate_rotation') ? (\r\n              <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n            ) : (\r\n              <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n            )}\r\n          </mesh>\r\n          \r\n          <mesh\r\n            name=\"PR01_M-Step001_1\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['PR01_M-Step001_1'].geometry}\r\n            material={materials['BlackParts.003']}\r\n          >\r\n            {props.selected.has('plate_rotation') ? (\r\n              <meshStandardMaterial color=\"#00ff00\" transparent opacity={0.7} />\r\n            ) : (\r\n              <meshStandardMaterial color=\"#222222\" opacity={1.0} />\r\n            )}\r\n          </mesh>\r\n          \r\n          <mesh\r\n            name=\"PR01_M-Step001_2\"\r\n            castShadow\r\n            receiveShadow\r\n            geometry={nodes['PR01_M-Step001_2'].geometry}\r\n            material={materials['ShinyParts.003']}\r\n          />\r\n        </group>\r\n\r\n        <mesh\r\n          name=\"BS_slimHolder001\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.BS_slimHolder001.geometry}\r\n          material={materials.BlackParts}\r\n        />     \r\n\r\n        <mesh\r\n          name=\"BS_slimHolder\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.BS_slimHolder.geometry}\r\n          material={materials.BlackParts}\r\n          position={[0.64, 0, -0.66]}\r\n          rotation={[-Math.PI, 0.63, -Math.PI]}\r\n        />\r\n        \r\n        \r\n\r\n        <mesh\r\n          name=\"BaseMesh001\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.BaseMesh001.geometry}\r\n          material={materials.BlackParts}\r\n        />\r\n        \r\n        <mesh\r\n          name=\"BaseMesh001_1\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.BaseMesh001_1.geometry}\r\n          material={materials.ShinyParts}\r\n        />\r\n        \r\n        <mesh\r\n          name=\"BaseMesh001_2\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.BaseMesh001_2.geometry}\r\n          material={materials['BlackParts.004']}\r\n        />\r\n        \r\n        <mesh\r\n          name=\"BaseMesh001_3\"\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.BaseMesh001_3.geometry}\r\n          material={materials['ShinyParts.004']}\r\n        />\r\n      </group>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload('/MI_230104.glb')\r\nexport default memo(Model, isEqual);\r\n","import { OrbitControls, Environment, Billboard } from \"@react-three/drei\";\r\n//import Model2d from \"../../experiment/AdaptiveOptics/MIS1_2D_control\";\r\nimport { useSocketContext } from \"../../../services/SocketContext\";\r\nimport Model3d from \"../../experiment/MichelsonInterferometer/MI_230201\";\r\nimport { useAppContext } from \"../../../services/AppContext\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { Suspense } from \"react\";\r\n\r\n/**\r\n * 3D Experiment Visualization and Overview Camera Stream\r\n * \r\n * @description Within this recat component, the visualisation of the 3D model or the overview camera stream of the experiment is handled as the background of the React app.\r\n * \r\n * @param {string} height - For scaling the content (is specified in pixels)\r\n * @param {string} width - For scaling the content (is specified in pixels)\r\n *  \r\n * @returns {React.ReactElement} Background of the web application  \r\n */\r\nconst VirtualLayer = (...props) => {\r\n  const appCtx = useAppContext();\r\n  const socketCtx = useSocketContext();\r\n\r\n  if (appCtx.showVirtualLayer) {\r\n    // 3D model of the experiment\r\n    return (\r\n      /* Handles the colour gradient of the background */\r\n      <Canvas\r\n        style={{\r\n          position: \"absolute\",\r\n          background: \"linear-gradient(Teal, Black)\",\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n        }}\r\n        /* Enable the automatic conversion of colors according to the renderer's configured color space */\r\n        colorManagement\r\n        softShadows\r\n        /* Positioning of the viewpoint */\r\n        camera={{ position: [5, 4, 5], fov: 30 }}\r\n      >\r\n        {/* Display a fallback until its children have finished loading */}\r\n        <Suspense fallback={null}>\r\n          <Environment files=\"../hdri/autoshop.hdr\" />\r\n          {/* Handles the ambient rotation of the experiment */}\r\n          <OrbitControls autoRotate={appCtx.autoRotate} />\r\n          {/* Intialisation of the 3D model and transfer of the most important parameters required within this class. */}\r\n          <Model3d\r\n            toggleSelect={appCtx.toggleSelectedComp}\r\n            selected={appCtx.selectedComps}\r\n            showTags={appCtx.showTags}\r\n            showBeam={appCtx.showBeam}\r\n            socket={socketCtx.socket}\r\n          />\r\n        </Suspense>\r\n      </Canvas>\r\n    );\r\n  } else {\r\n    return (\r\n      <Canvas\r\n        style={{\r\n          position: \"absolute\",\r\n          background: \"linear-gradient(Teal, Black)\",\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n        }}\r\n        colorManagement\r\n        camera={{ position: [0, 0, 5], fov: 40 }}\r\n      >\r\n        <Suspense fallback={null}>\r\n    \r\n          <Environment files=\"../hdri/autoshop.hdr\" />\r\n\r\n          {/* <pointLight /> */}\r\n          <Billboard>\r\n            {/* Intialisation of the 2D model with the hitboxes and transfer of the most important parameters required within this class. */}\r\n           {/*  <Model2d\r\n              toggleSelect={appCtx.toggleSelectedComp}\r\n              selected={appCtx.selectedComps}\r\n              showTags={appCtx.showTags}\r\n              socket={socketCtx.socket}\r\n            /> */}\r\n          </Billboard>\r\n        </Suspense>\r\n      </Canvas>\r\n    );\r\n  }\r\n};\r\n\r\nexport default VirtualLayer;","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\nimport \"./index.css\"\r\n\r\n/**\r\n * Recat app rendering in browser\r\n * \r\n * @description Handling the rendering of the React app within the browser. Is the JavaScript entry point.\r\n * \r\n * @returns {React.ReactElement} React App for the display within the browser\r\n */\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);","import { createTheme } from '@mui/material/styles';\r\n\r\n/**\r\n * Standard theme\r\n * \r\n * @description This theme is the default theme used.\r\n * \r\n * @returns theme\r\n */\r\nexport const theme = createTheme({\r\n    palette: {\r\n        mode: 'dark',\r\n        primary: {\r\n            light: '#01bd7d',\r\n            main: '#01bd7d',\r\n            dark: '#01bd7d',\r\n            contrastText: '#01bd7d',\r\n        },\r\n    }\r\n})\r\n\r\n/**\r\n * Login theme\r\n * \r\n * @description This theme is used in the login window. The special feature here is that the contrast text is white and spaceing is set to two.\r\n * \r\n * @returns login theme\r\n */\r\n\r\nexport const themeLogin = createTheme({\r\n    palette: {\r\n        mode: 'dark',\r\n        primary: {\r\n            light: '#01bd7d',\r\n            main: '#01bd7d',\r\n            dark: '#01bd7d',\r\n            contrastText: '#fff',\r\n        },\r\n    },\r\n    spacing: 2,\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Temp\":\"HeaterCtrl_Temp__jBaKb\",\"Switch\":\"HeaterCtrl_Switch__3eN4Z\",\"Canvas1\":\"HeaterCtrl_Canvas1__2Nq0o\",\"Canvas2\":\"HeaterCtrl_Canvas2__1H7_e\",\"Select\":\"HeaterCtrl_Select__1DEUK\",\"TempSmall\":\"HeaterCtrl_TempSmall__2Dmo3\",\"SwitchTemp\":\"HeaterCtrl_SwitchTemp__GvZuy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"window\":\"Window_window__bP_tv\",\"windowHeader\":\"Window_windowHeader__3dGvs\",\"windowFooter\":\"Window_windowFooter__32UEl\",\"icon\":\"Window_icon__3b2y3\",\"iconClose\":\"Window_iconClose__1d70Z\"};","import { useState, useContext, createContext } from \"react\";\r\nimport { useSocketContext } from \"./SocketContext\";\r\nimport { Alert, Snackbar } from '@mui/material';\r\n\r\nconst PopUpContext = createContext();\r\n\r\n// Creates the PopUpContext, so that it can be accessed/imported from other React components\r\nexport function usePopUpContext() {\r\n    return useContext(PopUpContext);\r\n}\r\n/**\r\n * PopUp Window \r\n *\r\n * @description  This React component is a ContextProvider, which means that every function within this class can be executed whenever \r\n * this class is imported. It can only be imported in React components, which are in the hierachie below the PopUpcontext. This class \r\n * included a function for the cration of a new PopUp window with the transmitted text and typ. The type can be for example warning, success\r\n * or info.\r\n * \r\n *\r\n * @returns {React.Context} PopUp context\r\n */\r\nexport function PopUpContextProvider({ children }) {\r\n    const [showPopUp, setShowPopUp] = useState(false); // displays popUp window, if true\r\n    const [text, setText] = useState(''); // represents the text displayed in the popUp window\r\n    const [type, setType] = useState('info'); // sets the type of the popUp window, e.g. warning, info, success\r\n\r\n    const socketCtx = useSocketContext();\r\n\r\n    // Display of popUp window, if microcontroller sends a error message to the server\r\n    socketCtx.socket.on('error', error => {\r\n        setShowPopUp(true);\r\n        setText(error.errmsg);\r\n        setType('error');\r\n    })\r\n\r\n    // Display of popUp widnow, if new web application client has connected to the server\r\n    socketCtx.socket.on('newUserInfo', (payload) => {\r\n        toggleShowPopUp(payload + ' has joined the experiment!', 'info')\r\n    })\r\n\r\n    // Creates a new popUp Window with transmitted text and type\r\n    const toggleShowPopUp = (newText, newType) => {\r\n        setText(newText);\r\n        setType(newType);\r\n        setShowPopUp(!showPopUp);\r\n    }\r\n\r\n    // Handles the closing of the popUp window, if the the close icon is clicked\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setShowPopUp(false);\r\n    };\r\n\r\n    //Styling of the popUp window \r\n    return (\r\n        <PopUpContext.Provider\r\n            value={{\r\n                showPopUp,\r\n                toggleShowPopUp\r\n            }}\r\n        >\r\n            <Snackbar open={showPopUp} autoHideDuration={2000} onClose={handleClose} >\r\n                <div  style={{ position: 'fixed', top: '5.25%', right: '0.5%' }}>\r\n                    <Alert variant=\"filled\" severity={type} onClose={() => { setShowPopUp(false) }}>{text}</Alert>\r\n                </div>\r\n            </Snackbar>\r\n            {children}\r\n        </PopUpContext.Provider>\r\n    );\r\n} ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatContainer\":\"Chat_chatContainer__12YJt\",\"chatMain\":\"Chat_chatMain__2eTFB\",\"msgForm\":\"Chat_msgForm__3_C6o\",\"chatHandler\":\"Chat_chatHandler__321sW\",\"openChat\":\"Chat_openChat__3oUjr\",\"closeChat\":\"Chat_closeChat__GVHsw\",\"buttonBlink\":\"Chat_buttonBlink__3AMb2\"};"],"sourceRoot":""}