/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 AO_230803.glb -k -s
*/

import DescriptiveTag from "../../UI/experimentUI/DescriptiveTag";
import { Cylinder, useGLTF } from "@react-three/drei";
import React, { memo } from "react";
import { isEqual } from "lodash";
import GlassMaterial from "./materials/GlassMaterial";
import LaserMaterial from "./materials/LaserMaterial";

function Model(props) {
  const { nodes, materials } = useGLTF("/model/AO_240131.glb");

  return (
    <group {...props} dispose={null} scale={[5, 5, 5]}>
      {/* Beam Overlay */}

      {props.showBeam && (
        <group>
          <mesh
            name="Beam_eye"
            castShadow
            receiveShadow
            geometry={nodes.Beam_eye.geometry}
          >
            <LaserMaterial />
          </mesh>
          <mesh
            name="Beam_screen"
            castShadow
            receiveShadow
            geometry={nodes.Beam_screen.geometry}
            material={materials.Laser_red}
          >
            <LaserMaterial />
          </mesh>
        </group>
      )}

      {/* Interactive Components */}

      <group
        name="LaserPower"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("relay_laser");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[0.15, 0.05, 0.45]}
            title="Power Supply"
            description="5V Laser Power Supply"
          />
        )}
        <mesh
          name="LaserPower"
          castShadow
          receiveShadow
          geometry={nodes.Netzteil.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("relay_laser") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
      </group>
      <group
        name="AM"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("mirror_1");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.1, -0.42]}
            title="Adaptive Mirror"
            description="DMH40-P01 Piezoelectric Deformable Mirror"
          />
        )}
        <mesh
          name="AS"
          castShadow
          receiveShadow
          geometry={nodes.ASMesh.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("mirror_1") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="ASMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.ASMesh_1.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="ASMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.ASMesh_2.geometry}
          material={materials.ShinyParts}
        />
      </group>

      <group
        name="Eye"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("eye_1");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.1, 0.43]}
            title="Artificial Eye"
            description="Adjustable Diopter and Pupil Size"
          />
        )}
        <mesh
          name="ArtEyeMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.ArtEyeMesh_1.geometry}
          material={materials["BlackParts"]}
        >
          {props.selected.has("eye_1") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="ArtEyeMesh"
          castShadow
          receiveShadow
          geometry={nodes.ArtEyeMesh.geometry}
          material={materials["Glass"]}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="ArtEyeMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.ArtEyeMesh_2.geometry}
          material={materials.ShinyParts}
        />
      </group>
      <group
        name="Beamsplitter"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("beamSplitter");
        }}
      >
        <mesh
          name="BSMesh"
          castShadow
          receiveShadow
          geometry={nodes.BSMesh.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("beamSplitter") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.1, 0.305]}
            title="Beam Splitter"
            description="10:90 Plate Beam Splitter"
          />
        )}
        <mesh
          name="BSMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.BSMesh_1.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="BSMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.BSMesh_2.geometry}
          material={materials.ShinyParts}
        />
      </group>

      <mesh
        name="Lens1mesh"
        castShadow
        receiveShadow
        geometry={nodes.Lens1mesh.geometry}
        material={materials.BlackParts}
      />
      <mesh
        name="Lens1mesh_1"
        castShadow
        receiveShadow
        geometry={nodes.Lens1mesh_1.geometry}
        material={materials.ShinyParts}
      />
      <mesh
        name="Lens1mesh_2"
        castShadow
        receiveShadow
        geometry={nodes.Lens1mesh_2.geometry}
        material={materials.Glass}
      >
        <GlassMaterial />
      </mesh>

      <mesh
        name="Lens2Mesh"
        castShadow
        receiveShadow
        geometry={nodes.Lens2Mesh.geometry}
        material={materials.BlackParts}
      />
      <mesh
        name="Lens2Mesh_1"
        castShadow
        receiveShadow
        geometry={nodes.Lens2Mesh_1.geometry}
        material={materials.ShinyParts}
      />
      <mesh
        name="Lens2Mesh_2"
        castShadow
        receiveShadow
        geometry={nodes.Lens2Mesh_2.geometry}
        material={materials.Glass}
      >
        <GlassMaterial />
      </mesh>

      <group
        name="Telescope_1"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("telescope_1");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.1, -0.13]}
            title="Telescope 1"
            description="Composition of two Lenses"
          />
        )}
        <mesh
          name="Lens3Mesh"
          castShadow
          receiveShadow
          geometry={nodes.Lens3Mesh.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("telescope_1") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="Lens3Mesh_1"
          castShadow
          receiveShadow
          geometry={nodes.Lens3Mesh_1.geometry}
          material={materials.ShinyParts}
        />

        <mesh
          name="Lens3Mesh_2"
          castShadow
          receiveShadow
          geometry={nodes.Lens3Mesh_2.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="Lens4Mesh"
          castShadow
          receiveShadow
          geometry={nodes.Lens4Mesh.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("telescope_1") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="Lens4Mesh_1"
          castShadow
          receiveShadow
          geometry={nodes.Lens4Mesh_1.geometry}
          material={materials.ShinyParts}
        />
        <mesh
          name="Lens4Mesh_2"
          castShadow
          receiveShadow
          geometry={nodes.Lens4Mesh_2.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
      </group>

      <group
        name="Telescope_2"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("telescope_2");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.02, 0.1, -0.24]}
            title="Telescope 2"
            description="Composition of two Lenses"
          />
        )}
        <mesh
          name="LM1XYMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.LM1XYMesh_1.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("telescope_2") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="LM1XYMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.LM1XYMesh_2.geometry}
          material={materials.ShinyParts}
        />
        <mesh
          name="LM1XYMesh"
          castShadow
          receiveShadow
          geometry={nodes.LM1XYMesh.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="Lens6Mesh"
          castShadow
          receiveShadow
          geometry={nodes.Lens6Mesh.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("telescope_2") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="Lens6Mesh_1"
          castShadow
          receiveShadow
          geometry={nodes.Lens6Mesh_1.geometry}
          material={materials.ShinyParts}
        />
        <mesh
          name="Lens6Mesh_2"
          castShadow
          receiveShadow
          geometry={nodes.Lens6Mesh_2.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
      </group>

      <group
        name="Wavefront Sensor"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("wavesensor_1");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[0.05, 0.1, -0.11]}
            title="Wavefront Sensor"
            description="WFS20-5C/M Shack-Hartmann Sensor"
          />
        )}

        <mesh
          name="WFS"
          castShadow
          receiveShadow
          geometry={nodes.WFSMesh.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("wavesensor_1") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="WFSMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.WFSMesh_1.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="WFSMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.WFSMesh_2.geometry}
          material={materials.ShinyParts}
        />
      </group>

      <group
        name="Iris"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("stepper_pinhole");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.01, 0.1, 0.3]}
            title="Pinhole"
            description="ID12/M Post-Mounted Iris Diaphragm"
          />
        )}
        <mesh
          name="IrisMesh"
          castShadow
          receiveShadow
          geometry={nodes.IrisMesh.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("stepper_pinhole") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="IrisMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.IrisMesh_1.geometry}
          material={materials.ShinyParts}
        />
      </group>

      <group
        name="LinearStage"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("stepper_linear1");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[0.1, 0.1, 0.15]}
            title="Linear Stage"
            description="XR50P/M Linear Translation Platform"
          />
        )}
        <mesh
          name="XR50PMesh"
          castShadow
          receiveShadow
          geometry={nodes["XR50PMesh"].geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("stepper_linear1") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="XR50PMesh_1"
          castShadow
          receiveShadow
          geometry={nodes["XR50PMesh_1"].geometry}
          material={materials.ShinyParts}
        />
        <mesh
          name="RetrorefractorMesh"
          castShadow
          receiveShadow
          geometry={nodes.RetrorefractorMesh.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="RetrorefractorMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.RetrorefractorMesh_1.geometry}
          material={materials.BlackParts}
        />
        <mesh
          name="RetrorefractorMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.RetrorefractorMesh_2.geometry}
          material={materials.ShinyParts}
        />
      </group>
      <group
        name="LinearStage"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("prism");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.1, 0.15]}
            title="Prism"
            description="Right-Angle Prism Mirror"
          />
        )}
        <mesh
          name="PSMesh"
          castShadow
          receiveShadow
          geometry={nodes.PSMesh.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="PSMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.PSMesh_1.geometry}
          material={materials.BlackParts}
        >
          {props.selected.has("prism") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="PSMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.PSMesh_2.geometry}
          material={materials.ShinyParts}
        />
      </group>

      <group>
        {props.showTags && (
          <DescriptiveTag
            position={[0.12, 0.1, 0.3]}
            title="Light Source"
            description="635 nm Laser Diode Module"
          />
        )}
        <mesh
          name="Laser"
          castShadow
          receiveShadow
          geometry={nodes.LaserMesh.geometry}
          material={materials.ShinyParts}
        />
        <mesh
          name="Laser_1"
          castShadow
          receiveShadow
          geometry={nodes.LaserMesh_1.geometry}
          material={materials.BlackParts}
        ></mesh>
      </group>

      <group
        name="SelectableScreen"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("servo_screen");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.1, -0.04]}
            title="Screen Retraction"
            description="Moves screen in and out of the beam"
          />
        )}
        <mesh
          name="ScreenRetractionMesh"
          castShadow
          receiveShadow
          geometry={nodes.ScreenRetractionMesh.geometry}
          material={materials["BlackParts"]}
        >
          {props.selected.has("servo_screen") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="ScreenRetractionMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.ScreenRetractionMesh_1.geometry}
          material={materials.ShinyParts}
        />
        <mesh
          name="ScreenRetractionMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.ScreenRetractionMesh_2.geometry}
          material={materials.Servo}
        />
      </group>
      <group
        name="SelectableScreen"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("cam_screen");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.12, -0.01]}
            title="Screen"
            description="Simple Retractable Plate"
          />
        )}
        <mesh
          name="ScreenMesh"
          castShadow
          receiveShadow
          geometry={nodes.ScreenMesh.geometry}
          material={materials["BlackParts.002"]}
        >
          {props.selected.has("cam_screen") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="ScreenMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.ScreenMesh_1.geometry}
          material={materials.WhiteParts}
        />
      </group>

      <group
        name="RotaryStage"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("stepper_rotation");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.025, 0.46]}
            title="Target Changing Stage"
            description="PR01/M Rotation Stage"
          />
        )}
        <mesh
          name="PR01_M-StepMesh"
          castShadow
          receiveShadow
          geometry={nodes["PR01_M-StepMesh"].geometry}
          material={materials["BlackParts.003"]}
        >
          {props.selected.has("stepper_rotation") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="PR01_M-StepMesh_1"
          castShadow
          receiveShadow
          geometry={nodes["PR01_M-StepMesh_1"].geometry}
          material={materials["ShinyParts.002"]}
        />
        <mesh
          name="ReferenzMirrorMesh"
          castShadow
          receiveShadow
          geometry={nodes.ReferenzMirrorMesh.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="ReferenzMirrorMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.ReferenzMirrorMesh_1.geometry}
          material={materials.Mirror_Back}
        />
        <mesh
          name="ReferenzMirrorMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.ReferenzMirrorMesh_2.geometry}
          material={materials.BlackParts}
        />
        <mesh
          name="ReferenzMirrorMesh_3"
          castShadow
          receiveShadow
          geometry={nodes.ReferenzMirrorMesh_3.geometry}
          material={materials.ShinyParts}
        />
        <mesh
          name="TargetMirrorMesh"
          castShadow
          receiveShadow
          geometry={nodes.TargetMirrorMesh.geometry}
          material={materials.Glass}
        >
          <GlassMaterial />
        </mesh>
        <mesh
          name="TargetMirrorMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.TargetMirrorMesh_1.geometry}
          material={materials.Mirror_Back}
        />
        <mesh
          name="TargetMirrorMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.TargetMirrorMesh_2.geometry}
          material={materials.BlackParts}
        />
        <mesh
          name="TargetMirrorMesh_3"
          castShadow
          receiveShadow
          geometry={nodes.TargetMirrorMesh_3.geometry}
          material={materials.ShinyParts}
        />
      </group>

      {/* Detail Cam */}

      <group
        name="Detail Cam"
        onPointerDown={(e) => {
          e.stopPropagation();
          props.toggleSelect("cam_eye");
        }}
      >
        {props.showTags && (
          <DescriptiveTag
            position={[-0.12, 0.025, 0.46]}
            title="Detail Cam"
            description="Shows Diopter and Iris state"
          />
        )}
        <mesh
          name="Cam_eyeMesh"
          castShadow
          receiveShadow
          geometry={nodes.Cam_eyeMesh.geometry}
          material={materials.plastic}
        >
          {props.selected.has("cam_eye") ? (
            <meshStandardMaterial color="#00ff00" transparent opacity={0.7} />
          ) : (
            <meshStandardMaterial color="#222222" opacity={1.0} />
          )}
        </mesh>
        <mesh
          name="Cam_eyeMesh_1"
          castShadow
          receiveShadow
          geometry={nodes.Cam_eyeMesh_1.geometry}
          material={materials.visor}
        />
        <mesh
          name="Cam_eyeMesh_2"
          castShadow
          receiveShadow
          geometry={nodes.Cam_eyeMesh_2.geometry}
          material={materials.monitor}
        />
      </group>

      {/* Base */}

      <mesh
        name="BaseMesh"
        castShadow
        receiveShadow
        geometry={nodes.BaseMesh.geometry}
        material={materials.BlackParts}
      />
      <mesh
        name="BaseMesh_1"
        castShadow
        receiveShadow
        geometry={nodes.BaseMesh_1.geometry}
        material={materials.ShinyParts}
      />
    </group>
  );
}

useGLTF.preload("/AO_230803.glb");
export default memo(Model, isEqual);
